[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Project Introduction"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Project Name:**  Project Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Chatbot Name:**  Rick"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Project Description:**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This chatbot is inspired by the legendary Duke chatbot, and is aptly named Rick to complement the Morty chatbot introduced in the first lecture of CS2113. This chatbot can be used to keep track of and manage important (and not so important) tasks such as upcoming events and deadlines."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Installation and Usage"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* Java (preferably Java 11 and above)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* A working keyboard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Initialising Rick**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Run the Command Prompt **as Administrator**."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Type in `java -jar duke.jar` and press enter. Depending on your computer settings, you might have to include your file path. (e.g. `java -jar C:\\Users\\User\\Documents\\CS2113\\duke.jar`)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Alternatively, Windows users can type `java -jar duke.jar` in a notepad, and save it as a .bat file in the same folder as duke.jar, while Mac users can upgrade to a Windows computer. This allows you to open duke.jar just by clicking on the created Windows batch file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "**Usage**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Upon initialisation, Rick will prompt you about all tasks that are due today (based on your system time)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. If this is your first time using this chatbot, please enter the `help` command to get a detailed list of valid commands and formats, or refer to the attached User Guide for more information."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Enter your desired command and press enter. If your command is valid, Rick will carry out the operation and reply with a confirmation that the command has been executed. If your command is invalid, Rick will reply with a prompt explaining why the command was invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Add and delete your tasks as required. For events and deadlines, a date has to be specified, while specifying a time is optional. (e.g. `event watch the next episode of Rick and Morty /at 2020-03-03 03:30`)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Please enter the `help` command for a full list of all valid commands and formats."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Upon termination of the chatbot, Rick will automatically save all tasks in a text file `duke.txt`, and will load these tasks when it is next initialised. Please **do not tamper with the location or contents** of `duke.txt` as this could result in the loss of your stored data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Feedback, Bug Reports"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "* If you have feedback or bug reports, please post at https://github.com/JeremiasLiew/duke/issues."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 23,
      "-": 10
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 1) Add Tasks "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "There are 3 types of tasks that can be added. They are:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Todo - A task that can be completed at any time. Cannot be assigned a date or time."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Event - A task that is going to occur at a specified date. Users must indicate the date of the event, while indicating the time is optional."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. Deadline - A task that is due at a specified date. Users must indicate the date of the deadline, while indicating the time is optional."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 2) Mark Tasks as Done"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Users are able to mark tasks as done once they have finished it. This allows for the chatbot to accurately check the status of all saved tasks for other functions that take into account the completion status of each task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 3) Search for Tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "The chatbot comes with a search function, and will return all tasks that contain the keyword or character sequence that the user has input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 4) Manage and Remove Tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Users are able to manually remove tasks, based on their individual index number. Alternatively, users can choose to remove all tasks that have passed or all tasks that have already been completed, and the chatbot will automatically remove all such tasks."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 5) Keep Track of Events and Deadlines"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "This chatbot is also able to keep track of events and deadlines that has been entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Upon initialisation of the chatbot, it will prompt the user on tasks that are due/occurring today, based on the System time of the computer. Users can also check uncompleted events/deadlines that have passed, and upcoming events/deadlines within a user-defined amount of days from today."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### 6) Save All Tasks"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "All tasks will be automatically saved in an external text file `Duke.txt`. Please do not tamper with the location or contents of the text file, as this could result in the loss of your stored data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `help` - Accesses the help page"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Shows the help page which contains all accepted commands and formats. Please check the help page if you are using this program for the first time."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`help`"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eWelcome to the Help Page\u003cbr/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Here is a list of valid commands and formats:\u003cbr/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;1) todo \u003ctask description\u003e  -  adds a todo task\u003cbr/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;... ...\u003c/code\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `todo` - Adds a todo task"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "A todo task will be added to the chatbot. By default, the todo task will be marked as undone. The chatbot will then reply with a confirmation that the command has been executed, and will inform the user of the number of tasks currently in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`todo read book`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eGot it. I\u0027ve added this task:\u003cbr/\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;[T][N] read book\u003cbr/\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Now you have 1 task(s) in the list.\u003c/code\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `event` - Adds an event task"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "An event task will be added to the chatbot. By default, the event task will be marked as undone. The chatbot will then reply with a confirmation that the command has been executed, and will inform the user of the number of tasks currently in the list.\u003cbr/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Events need to be added with a date, while a time is optional. For the full list of accepted date and time formats, please refer to the date and time format section below.\u003cbr/\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Events are added using the following format: `event \u003cdescription of event\u003e /at \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`event CCA meeting /at 2020-01-01 6PM`"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eGot it. I\u0027ve added this task:\u003cbr/\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;[E][N] CCA meeting(at: 2020-01-01 18:00)\u003cbr/\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Now you have 2 task(s) in the list.\u003c/code\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `deadline` - Adds a deadline task"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "A deadline task will be added to the chatbot. By default, the deadline task will be marked as undone. The chatbot will then reply with a confirmation that the command has been executed, and will inform the user of the number of tasks currently in the list.\u003cbr/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deadlines need to be added with a date, while a time is optional. For the full list of accepted date and time formats, please refer to the date and time format section below.\u003cbr/\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deadlines are added using the following format: `deadline \u003cdescription of deadline\u003e /by \u003cdate\u003e \u003ctime\u003e`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage (1):"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`deadline finish reading book /by 3/3/2020 1015`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome (1):"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eGot it. I\u0027ve added this task:\u003cbr/\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;[D][N] finish reading book(by: 2020-03-03 10:15)\u003cbr/\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Now you have 3 task(s) in the list.\u003c/code\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage (2):"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`deadline return book /by 4-Mar-2020`"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome (2):"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eGot it. I\u0027ve added this task:\u003cbr/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;[D][N] return book(by: 2020-03-04)\u003cbr/\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Now you have 4 task(s) in the list.\u003c/code\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `list` - Lists out all tasks"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Displays all saved tasks in a list format for easy viewing, in order of when the task was added. Each task will also be assigned an index based on their position in the list. This index can be used for other functions such as deleting or making done a specified task."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`list`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eHere are the tasks in your list:\u003cbr/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;1. [T][N] read book\u003cbr/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;2. [E][N] CCA meeting(at: 2020-01-01 18:00)\u003cbr/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;3. [D][N] finish reading book(by: 2020-03-03 10:15)\u003cbr/\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;4. [D][N] return book(by: 2020-03-04)\u003c/code\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `done` - Marks a selected task as done"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Marks a task as done based on their index in the list (refer to `list` for more details). This changes the task\u0027s status to done, which is reflected by a `[Y]` instead of a `[N]` for undone tasks."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Tasks are marked as done using the following format: `done \u003cindex of task\u003e`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`done 3`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eNice! I\u0027ve marked this task as done:\u003cbr/\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;[D][Y] finish reading book(by: 2020-03-03 10:15)\u003c/code\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `delete` - Deletes a selected task"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deletes a task based on their index in the list (refer to `list` for more details). This removes the task from the list, and moves it into a deleted tasks list."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Tasks are deleted using the following format: `delete \u003cindex of task\u003e`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`delete 4`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eNoted. I\u0027ve removed this task:\u003cbr/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;[D][N] return book(by: 2020-03-04)\u003c/code\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `find` - Finds for certain tasks"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Searches for and returns all tasks that contain the specified keyword or character sequence."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Tasks are searched using the following format: `find \u003ckeyword / characters\u003e`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`find book`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eHere are the matching tasks in your list:\u003cbr/\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;1. [T][N] read book\u003cbr/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;2. [D][Y] finish reading book(by: 2020-03-03 10:15)\u003c/code\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `show_overdue` - Lists all overdue tasks"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Shows all tasks that have passed, but are still marked as undone. This does not delete the task from the chatbot."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`show_overdue`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eHere are the uncompleted overdue tasks:\u003cbr/\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;1. [E][N] CCA meeting(at: 2020-01-01 18:00)\u003c/code\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `show_upcoming` - Lists all upcoming tasks"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Shows all upcoming tasks within the number of days specified in the input command. This includes tasks that are already marked as done."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Upcoming tasks are shown using the following format: `show_upcoming \u003cnumber of days\u003e`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`show_upcoming 5`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eHere are the upcoming tasks within 5 day(s):\u003cbr/\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;1. [D][Y] finish reading book(by: 2020-03-03 10:15)\u003c/code\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `remove_past` - Removes all tasks that have passed"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deletes all tasks that have passed, regardless of if the task has been marked as done or not."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`remove_past`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eAll past tasks have been removed.\u003c/code\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `remove_done` - Removes all tasks that are marked as done"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deletes all tasks that are marked as done, regardless of if the task has passed or not."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`remove_done`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eAll completed tasks have been removed.\u003c/code\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `show_deleted` - Lists all deleted tasks"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Shows all tasks that have been deleted in this instance of the chatbot. This is cleared everytime the chatbot is terminated."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`show_deleted`"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eHere are the tasks that have been removed:\u003cbr/\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;1. [D][N] return book(by: 2020-03-04)\u003cbr/\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;2. [E][N] CCA meeting(at: 2020-01-01 18:00)\u003cbr/\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u0026nbsp;\u0026nbsp;3. [D][Y] finish reading book(by: 2020-03-03 10:15)\u003c/code\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `clear_all` - Deletes all tasks"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Deletes all tasks. This action cannot be reversed, and all tasks saved in the external text file will be wiped as well."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`clear_all`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eAll tasks have been cleared.\u003c/code\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### `bye` - Terminates the program"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "Terminates the program and saves all tasks into an external text file `Duke.txt`. This text file will be read and loaded from when Duke is next initialised."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "`bye`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\u003ccode\u003eBye. Hope to see you again soon!\u003c/code\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "## Acceptable Date and Time Formats"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Acceptable date formats:"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. date/month/year  (e.g. 1/3/19, 01/03/19, 1/3/2019, 01/03/2019, 2019/03/01)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. date-month-year  (e.g. 1-3-19, 01-03-19, 1-3-2019, 01-03-2019)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. date.month.year  (e.g. 1.3.19, 01.03.19, 1.3.2019, 01.03.2019)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. date-MMM-year  (e.g. 1-Mar-19, 1-Mar-2019, 01-Mar-2019)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "#### Acceptable time formats:"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "1. 12-hr time  (e.g. 10PM, 10:15PM, 10:15:00PM)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "2. 24-hr time  (e.g. 2215, 22:15, 22:15:00)"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 248,
      "-": 22
    }
  },
  {
    "path": "src/main/java/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * The Command class stores all information needed, in a format that is easy for the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * chatbot to understand and execute. Certain variables are optional as they are not"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * needed for all command types."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final String commandType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final Optional\u003cString\u003e description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final Optional\u003cString\u003e check;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final Optional\u003cLocalDate\u003e date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final Optional\u003cLocalTime\u003e time;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final Optional\u003cDukeException\u003e e;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Command(String commandType) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.description \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.check \u003d Optional.empty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.date \u003d Optional.empty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.e \u003d Optional.empty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Command(String commandType, Optional\u003cString\u003e description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.check \u003d Optional.empty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.date \u003d Optional.empty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.e \u003d Optional.empty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Command(String commandType, Optional\u003cString\u003e description, Optional\u003cString\u003e check, "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                   Optional\u003cLocalDate\u003e date, Optional\u003cLocalTime\u003e time) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.commandType \u003d commandType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.check \u003d check;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.e \u003d Optional.empty();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Command(DukeException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.commandType \u003d \"exception\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.description \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.check \u003d Optional.empty();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.date \u003d Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.e \u003d Optional.of(e);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getCommandType() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.commandType;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cString\u003e getDescription() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cString\u003e getCheck() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.check;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cLocalDate\u003e getDate() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cLocalTime\u003e getTime() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DukeException getException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.e.get();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 83
    }
  },
  {
    "path": "src/main/java/commands/CommandExecution.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Deadline;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Task;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.ToDo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static common.HelpPage.HelpMessage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Handles all the execution and validation of commands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CommandExecution {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cTask\u003e removedTasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Constructor for CommandExecution class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param tasks List of tasks that references TaskList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param removedTasks List of removed tasks that references TaskList."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public CommandExecution(ArrayList\u003cTask\u003e tasks, ArrayList\u003cTask\u003e removedTasks) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.removedTasks \u003d removedTasks;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns a help message detailing all accepted commands and formats."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return HelpMessage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    \treturn HelpMessage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Searches the current tasks for a particular substring and outputs a list of"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * all tasks that contain the substring."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command containing the substring to be found."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg String representation of a list of all tasks containing the substring."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String findTask(Command command) throws DukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"find\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cTask\u003e foundTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String toFind \u003d commandDescription.get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (task.getDescription().contains(toFind)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                foundTasks.add(task);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d listFound(foundTasks);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Formats the list of found tasks into a proper chatbot reply."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param list List of found tasks."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Properly formatted chatbot reply."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String listFound(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // accesses the list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg \u003d \"No matching tasks found!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg \u003d \"Here are the matching tasks in your list:\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \"    \" + counter + \". \" + s.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Clear all tasks, including stored tasks."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String clearAll() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.removeAll(tasks);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"All tasks have been cleared.\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Shows upcoming tasks within the number of days specified in the input command,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * and outputs a list of all such tasks."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command containing the timeframe in days."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg String representation of a list of all upcoming tasks in the time frame."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String showUpcoming(Command command) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"show\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int days \u003d Integer.valueOf(commandDescription.get());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cTask\u003e upcomingTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (task.getOptionalDate().isPresent()) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                LocalDate date \u003d task.getDate();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                long period \u003d today.until(date, ChronoUnit.DAYS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (period \u003c\u003d days \u0026\u0026 period \u003e\u003d 0) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    upcomingTasks.add(task);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Collections.sort(upcomingTasks);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d listUpcoming(upcomingTasks, days);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Formats the list of upcoming tasks into a proper chatbot reply."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param list List of upcoming tasks."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param days Timeframe of upcoming tasks."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Properly formatted chatbot reply."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String listUpcoming(ArrayList\u003cTask\u003e list, int days) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // accesses the list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (days \u003d\u003d 0) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg \u003d \"Great! No upcoming tasks today! :)\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg \u003d \"Great! No upcoming tasks within \" + days + \" day(s)! :)\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (days \u003d\u003d 0) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg \u003d \"Here are the upcoming tasks today:\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg \u003d \"Here are the upcoming tasks within \" + days + \" day(s):\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \"    \" + counter + \". \" + s.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Shows all overdue tasks that have not been completed, and outputs "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * a list of all such tasks."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg String representation of a list of all overdue tasks."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String showOverdue(Command command) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cTask\u003e overdueTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (task.getOptionalDate().isPresent()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                LocalDate date \u003d task.getDate();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (date.isBefore(today) \u0026\u0026 !task.isDone()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    overdueTasks.add(task);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Collections.sort(overdueTasks);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d listOverdue(overdueTasks);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Formats the list of overdue tasks into a proper chatbot reply."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param list List of overdue tasks."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Properly formatted chatbot reply."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String listOverdue(ArrayList\u003cTask\u003e list) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // accesses the list"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg \u003d \"Great! No uncompleted overdue tasks! :)\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg \u003d \"Here are the uncompleted overdue tasks:\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (Task s : list) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \"    \" + counter + \". \" + s.toString();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Remove all completed tasks."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String removeCompleted() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cTask\u003e completedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (task.isDone()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                completedTasks.add(task);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                removedTasks.add(task);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.removeAll(completedTasks);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"All completed tasks have been removed.\";"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Removes all tasks that have passed, regardless of if the task has been"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * completed or not."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String removePast() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ArrayList\u003cTask\u003e pastTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        LocalDate today \u003d LocalDate.now();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (Task task : tasks) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (task.getOptionalDate().isPresent()) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                LocalDate date \u003d task.getDate();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (date.isBefore(today)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    pastTasks.add(task);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    removedTasks.add(task);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.removeAll(pastTasks);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"All past tasks have been removed.\";"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Sets an undone task as done."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String makeDone(Command command) throws DukeException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"done\", tasks);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // sets a specified task as done"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int index \u003d Integer.valueOf(commandDescription.get());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Task curr \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        curr.markAsDone();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"Nice! I\u0027ve marked this task as done: \" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"    \" + curr.toString();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Removes the selected task."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String removeTask(Command command) throws DukeException {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"remove\", tasks);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int index \u003d Integer.valueOf(commandDescription.get());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Task curr \u003d tasks.get(index - 1);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        removedTasks.add(curr);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"Noted. I\u0027ve removed this task: \" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"    \" + curr.toString() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.remove(index - 1);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"  Now you have \" + tasks.size() + \" tasks in the tasks.\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a todo task."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String addTodo(Command command) throws DukeException {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"todo\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String description \u003d commandDescription.get();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Task todo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg \u003d outputMessage(todo);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds a deadline task."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String addDeadline(Command command) throws DukeException {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"deadline\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalDate\u003e date \u003d command.getDate();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalTime\u003e time \u003d command.getTime();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String description \u003d commandDescription.get();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Task deadline \u003d new Deadline(description, date, time);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d outputMessage(deadline);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Adds an event task."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply acknowledging that the command has been executed."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String addEvent(Command command) throws DukeException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        CommandValidation.validate(command, \"event\");"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalDate\u003e date \u003d command.getDate();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalTime\u003e time \u003d command.getTime();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String description \u003d commandDescription.get();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Task event \u003d new Event(description, date, time);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d outputMessage(event);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Properly formats the chatbot reply when adding tasks."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param task Task to be added"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Properly formatted chatbot reply."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String outputMessage(Task task) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"Got it. I\u0027ve added this task: \" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"    \" + task.toString() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        msg +\u003d \"  Now you have \" + tasks.size() + \" task(s) in the list.\";"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 360
    }
  },
  {
    "path": "src/main/java/commands/CommandValidation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Validates certain commands, making sure that they are correctly formatted for their "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * supposed command type. If any incorrect commands are found, outputs a DukeException "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * specifying what caused the error."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * \u003cp\u003e e.g adding an event requires a description and a \"/at\" substring, as well as a"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * acceptable date format and an optional time. Any missing or incorrectly formatted "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * fields will result in the respective DukeException. \u003c/p\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class CommandValidation {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Validates the showUpcoming, findTask, addTodo, addDeadline, addEvent commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Checks if the input Command is valid for the command type called."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be checked for validity."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param type Command type to check validity for."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void validate(Command command, String type) throws DukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandCheck \u003d command.getCheck();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalDate\u003e date \u003d command.getDate();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (type.equals(\"show\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (!commandDescription.isPresent()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Please enter a time period.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                index \u003d Integer.valueOf(commandDescription.get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (Exception exception) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Wrong format.\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (index \u003c 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Please enter a non-negative integer.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (!commandDescription.isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Please enter a description.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (type.equals(\"event\") || type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (!commandCheck.isPresent()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Wrong format.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else if (!commandCheck.get().equals(\"/at\") \u0026\u0026 type.equals(\"event\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Wrong format.\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else if (!commandCheck.get().equals(\"/by\") \u0026\u0026 type.equals(\"deadline\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Wrong format.\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else if (!date.isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                throw new DukeException(\"Oops!! Please specify a date.\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Validates the makeDone, removeTask commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Checks if the input Command is valid for the command type called."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be checked for validity."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param type Command type to check validity for."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param tasks List of current tasks for reference."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the command is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void validate(Command command, String type, ArrayList\u003cTask\u003e tasks) throws DukeException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e commandDescription \u003d command.getDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (!commandDescription.isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Please enter a task number.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int index;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            index \u003d Integer.valueOf(commandDescription.get());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (Exception exception) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Wrong format.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (index \u003c 1) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Invalid task.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else if (index \u003e tasks.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! No such task.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else if (tasks.get(index - 1).isDone() \u0026\u0026 type.equals(\"done\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Task is already completed.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 92
    }
  },
  {
    "path": "src/main/java/common/HelpPage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Help page containing all valid commands and formats."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class HelpPage {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\tpublic final static String HelpMessage \u003d \"Welcome to the Help Page\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"  Here is a list of valid commands and formats:\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    1) todo \u003ctask description\u003e  -  adds a todo task\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    2) event \u003ctask description\u003e \u003cdate\u003e \u003ctime(optional)\u003e  -  adds an event task\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    * refer to date and time format help section below for accepted formats *\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    3) deadline \u003ctask description\u003e \u003cdate\u003e \u003ctime(optional)\u003e  -  adds an deadline task\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    4) list  -  lists out all tasks and their index numbers\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    5) done \u003cindex of task\u003e  -  marks a task as done based on their index (refer to list command)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    6) delete \u003cindex of task\u003e  -  deletes the task based on their index (refer to list command)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    7) find \u003ckeyword / characters\u003e  -  finds all tasks containing the keyword/characters\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    8) show_overdue  -  lists all overdue tasks\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    9) show_upcoming \u003cnumber of days\u003e  -  lists all upcoming tasks within the number of days\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    10) remove_past  -  removes all tasks that have passed\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    11) remove_done  -  removes all tasks that are marked as done\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    12) show_deleted  -  lists all deleted tasks\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    13) clear_all  -  deletes all tasks\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    14) bye  -  terminates the program\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \u0027\\n\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"  Acceptable date formats:\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    1) date/month/year  (e.g. 1/3/19, 01/03/19, 1/3/2019, 01/03/2019, 2019/03/01)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    2) date-month-year  (e.g. 1-3-19, 01-03-19, 1-3-2019, 01-03-2019)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    3) date.month.year  (e.g. 1.3.19, 01.03.19, 1.3.2019, 01.03.2019)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    4) date-MMM-year  (e.g. 1-Mar-19, 1-Mar-2019, 01-Mar-2019)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"  Acceptable time formats:\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    1) 12-hr time  (e.g. 10PM, 10:15PM, 10:15:00PM)\" + \u0027\\n\u0027"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t\t\t+ \"    2) 24-hr time  (e.g. 2215, 22:15, 22:15:00)\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "\t"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 35
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Stored messages for greeting and bidding farewell to the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public final static String name \u003d \"Rick\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public final static String line \u003d \"____________________________________________________________\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public final static String LINE_BUFFER \u003d \"  \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public final static String MESSAGE_GREETING \u003d LINE_BUFFER + \"Hello! I\u0027m \" + name +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        \u0027\\n\u0027 + LINE_BUFFER + \"What can I do for you?\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public final static String MESSAGE_GOODBYE \u003d LINE_BUFFER + \"Bye. Hope to see you again soon!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 15
    }
  },
  {
    "path": "src/main/java/common/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * An exception which results from incorrect input from the user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class DukeException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private static final long serialVersionUID \u003d 1L;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DukeException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DukeException(String message) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 17
    }
  },
  {
    "path": "src/main/java/common/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Deadline subclass of a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Deadline(String description, Optional\u003cLocalDate\u003e date, Optional\u003cLocalTime\u003e time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(description, date, time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Deadline(String description, Optional\u003cLocalDate\u003e date, Optional\u003cLocalTime\u003e time, boolean isDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(description, date, time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (this.time.isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return \"[D][\" + this.getStatusIcon() + \"] \" + this.description + \"(by: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + this.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \" \" "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + this.getTime().format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return \"[D][\" + this.getStatusIcon() + \"] \" + this.description + \"(by: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + this.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 33
    }
  },
  {
    "path": "src/main/java/common/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Event subclass of a task."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Event(String description, Optional\u003cLocalDate\u003e date, Optional\u003cLocalTime\u003e time) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(description, date, time);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Event(String description, Optional\u003cLocalDate\u003e date, Optional\u003cLocalTime\u003e time, boolean isDone) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(description, date, time);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (this.time.isPresent()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return \"[E][\" + this.getStatusIcon() + \"] \" + this.description + \"(at: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + this.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \" \" "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + this.getTime().format(DateTimeFormatter.ofPattern(\"HH:mm\")) + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return \"[E][\" + this.getStatusIcon() + \"] \" + this.description + \"(at: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                + this.getDate().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) + \")\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 33
    }
  },
  {
    "path": "src/main/java/common/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Represents a task which the user inputs in the chatbot."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Task implements Comparable\u003cTask\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    protected final String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    protected final Optional\u003cLocalDate\u003e date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    protected final Optional\u003cLocalTime\u003e time;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Constructor for Task class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.date \u003d Optional.empty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.time \u003d Optional.empty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Constructor for Task class."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param description Description of the task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param date Date of the task (only for Event and Deadline)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param time Time of the task (optional for Event and Deadline)."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Task(String description, Optional\u003cLocalDate\u003e date, Optional\u003cLocalTime\u003e time) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns status icon depicting if task is done or not."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Indication if task is done or not."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return (isDone ? \"Y\" : \"N\"); //return tick or X symbols"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cLocalDate\u003e getOptionalDate() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.date;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cLocalTime\u003e getOptionalTime() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.time;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public LocalDate getDate() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.date.get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public LocalTime getTime() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.time.get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Sets task as done."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return void."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void markAsDone() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public boolean isDone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Custom comparable between two tasks. Sorted by date then time."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * If time is not present, then time taken to be until 2359."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param o Other task to compare against."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Integer depicting result of comparison."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public int compareTo(Task o) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (!this.date.get().equals(o.getDate())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return this.date.get().compareTo(o.getDate());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (!this.time.isPresent()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (o.getOptionalTime().isPresent()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (!o.getOptionalTime().isPresent()) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    return this.time.get().compareTo(o.getTime());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Returns String representation of Task."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return String representation of Task."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return \"[\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 121
    }
  },
  {
    "path": "src/main/java/common/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package common.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Todo subclass of a task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return \"[T][\" + this.getStatusIcon() + \"] \" + this.description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 21
    }
  },
  {
    "path": "src/main/java/data/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import ui.TextUi;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import commands.CommandExecution;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Stores all the tasks for the current instance of the chatbot. Tasks are imported from "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * the Storage and added to the currant instance of the chatbot."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private ArrayList\u003cTask\u003e removedTasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private CommandExecution commandExecution;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private boolean isExit;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Constructor for TaskList class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param storage Storage that imports saved tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public TaskList(Storage storage) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.tasks \u003d storage.list;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.removedTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.commandExecution \u003d new CommandExecution(tasks, removedTasks);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.isExit \u003d false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public boolean isTerminated() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return this.isExit;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Executes the given command on the stored classes. Prints out the corresponding"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * chatbot reply, and updates the stored tasks in the text file when there are"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * any changes to the tasks in the current instance."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param ui TextUi that prints out the corresponding chatbot reply."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param storage Storage for updating the stored tasks in the text file."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param command Command to be executed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void executeCommand(TextUi ui, Storage storage, Command command) throws DukeException, IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String commandType \u003d command.getCommandType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"  \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            switch (commandType) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"bye\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    // exits the program"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    this.isExit \u003d true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"exception\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    throw command.getException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"list\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d list();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"show_deleted\":"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d showRemoved();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"help\":"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                \tmsg +\u003d commandExecution.getHelp();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                \tbreak;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"find\":"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.findTask(command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"show_upcoming\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.showUpcoming(command);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"show_overdue\":"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.showOverdue(command);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"clear_all\":"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.clearAll();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"remove_done\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.removeCompleted();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"remove_past\":"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.removePast();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"delete\":"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.removeTask(command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"done\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.makeDone(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"todo\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.addTodo(command);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"deadline\":"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.addDeadline(command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                case \"event\":"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    msg +\u003d commandExecution.addEvent(command);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    storage.writeToFile(tasks);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    throw new DukeException(\"Oops!! Unknown Command.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (DukeException exception) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d exception.getMessage() + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \"  Enter \u0027help\u0027 for a list of accepted commands and formats.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ui.outputMessage(msg);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists out all tasks"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String list() throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // accesses the list"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (tasks.isEmpty()) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! List is empty.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \"Here are the tasks in your list:\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (Task s : tasks) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \"    \" + counter + \". \" + s.toString();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Lists all tasks that have been removed in the current instance of the chatbot."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return msg Chatbot reply."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String showRemoved() throws DukeException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String msg \u003d \"\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        // accesses the list"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (removedTasks.isEmpty()) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! No removed tasks.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \"Here are the tasks that have been removed:\" + \u0027\\n\u0027;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int counter \u003d 1;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (Task s : removedTasks) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \"    \" + counter + \". \" + s.toString();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                counter++;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                msg +\u003d \u0027\\n\u0027;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return msg;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 169
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Duke chatbot. Stores and keeps tracks of tasks which the user inputs."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Also provides company to lonely souls who lack friends."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Duke() throws IOException, DukeException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.ui \u003d new TextUi();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.storage \u003d new Storage();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        storage.readFromFile();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.tasks \u003d new TaskList(storage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static void main(String[] args) throws DukeException, IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        new Duke().run();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Starts the chatbot."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void run() throws DukeException, IOException{"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ui.greet(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        initialiseChatting();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        ui.goodbye();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Starts the chatting part of the chatbot."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void initialiseChatting() throws IOException, DukeException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        boolean isTerminated \u003d false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        while (!isTerminated) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String input \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            Command command \u003d new Parser().parse(input);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            tasks.executeCommand(ui, storage, command);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            isTerminated \u003d tasks.isTerminated();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 61
    }
  },
  {
    "path": "src/main/java/parser/DateTimeParser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Contains the accepted formats for parsing LocalDate and LocalTime."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class DateTimeParser {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DateTimeFormatter dateKey;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DateTimeFormatter timeKey;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Constructor for a DateTimeParser object."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public DateTimeParser() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.dateKey \u003d DateTimeFormatter.ofPattern(\"[dd/MM/yyyy][d/M/yyyy][dd/MM/yy][d/M/yy]\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                                                       + \"[yyyy/MM/dd][yyyy-MM-dd][yyyy-M-d]\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                                                       + \"[dd-MM-yyyy][d-M-yyyy][dd-MM-yy][d-M-yy]\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                                                       + \"[dd.MM.yy][d.M.yy][dd.MM.yyyy][d.M.yyyy]\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                                                       + \"[dd-MMM-yyyy][d-MMM-yyyy][d-MMM-yy]\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.timeKey \u003d DateTimeFormatter.ofPattern(\"[hh:mma][hh:mm:ssa]\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                                                       + \"[HH:mm][HHmm][HH:mm:ss][hha][ha]\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 25
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Deals with making sense of user input and stored data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_TYPE \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_CHECK \u003d 2;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_DATE \u003d 3;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_TIME \u003d 4;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses a String user input into a Command that can be easily understood by the chatbot."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * The necessary information that will be extracted are the command type, command description,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * command check (used to check input format, optional), date (optional), time (optional)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param input User input that has been obtained by the UI."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return command Command that contains all necessary information for the chatbot to process."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the date or time formats are incorrect."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Command parse(String input) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String[] inputCommand \u003d input.split(\" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String[] commandParts \u003d new String[5];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String commandType \u003d inputCommand[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        commandParts[COMMAND_TYPE] \u003d commandType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (inputCommand.length \u003e 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            commandParts[COMMAND_DESCRIPTION] \u003d inputCommand[1];"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int index \u003d -1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (int i \u003d 0; i \u003c inputCommand.length; i++) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                if (inputCommand[i].equals(\"/by\") || inputCommand[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    index \u003d i;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                String description \u003d input.replaceFirst(commandType, \"\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                commandParts[COMMAND_DESCRIPTION] \u003d description.trim();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } else if (index \u003e 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                String description \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                for (int i \u003d 1; i \u003c index; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    description +\u003d inputCommand[i] + \" \";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                commandParts[COMMAND_DESCRIPTION] \u003d description.trim();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                int j \u003d 2;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                int i \u003d index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                while (i \u003c inputCommand.length \u0026\u0026 j \u003c 5) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    commandParts[j] \u003d inputCommand[i];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    i++;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    j++;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            command \u003d process(commandParts);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (DukeException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            command \u003d new Command(e);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses stored text from the storage and extracts all relevant information."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * This information is to be passed back to Storage for the purposes of populating"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * the task list according to the stored tasks in the text file."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param input Input from saved text in text file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return commandParts String[] containing needed task information."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String[] parseFromStorage(String input) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String[] commandParts \u003d new String[5];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        int index \u003d input.indexOf(\u0027(\u0027);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            description \u003d input.substring(7);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            description \u003d input.substring(7, index);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            int index2 \u003d input.indexOf(\u0027:\u0027) + 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String trimmed \u003d input.substring(index2, input.length() - 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String[] inputCommands \u003d trimmed.split(\" \");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            String[] dateTime \u003d new String[2];"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            for (int i \u003d 0; i \u003c inputCommands.length; i++) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                dateTime[i] \u003d inputCommands[i];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            commandParts[COMMAND_DATE] \u003d dateTime[0];"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            commandParts[COMMAND_TIME] \u003d dateTime[1];"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        commandParts[COMMAND_TYPE] \u003d input.substring(1, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        commandParts[COMMAND_DESCRIPTION] \u003d description;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return commandParts;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Needed for the parse method. A String[] containing command information"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * is processed into a Command that can be easily understood by the chatbot."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param commandParts String[] that is to be processed into a Command."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return Command Command that is understood by the chatbot."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the date or time formats are incorrect."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Command process(String[] commandParts) throws DukeException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String commandType \u003d commandParts[COMMAND_TYPE];"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e description \u003d Optional.ofNullable(commandParts[COMMAND_DESCRIPTION]);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cString\u003e check \u003d Optional.ofNullable(commandParts[COMMAND_CHECK]);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalDate\u003e date \u003d parseDate(commandParts[COMMAND_DATE]);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalTime\u003e time \u003d parseTime(commandParts[COMMAND_TIME]);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return new Command(commandType, description, check, date, time);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses a String representation of a date into a LocalDate object which can be"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * easily understood by the chatbot. The accepted input formats are dictated by "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * a DateTimeParser."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param date String representation of a date."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return parsedDate Optional\u003cLocalDate\u003e that contains a LocalDate if the input date is valid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the date format is incorrect."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cLocalDate\u003e parseDate(String date) throws DukeException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        DateTimeParser dateParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalDate\u003e parsedDate;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            parsedDate \u003d Optional.ofNullable(LocalDate.parse(date, dateParser.dateKey));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            parsedDate \u003d Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Wrong date format.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return parsedDate;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Parses a String representation of a time into a LocalTime object which can be"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * easily understood by the chatbot. The accepted input formats are dictated by "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * a DateTimeParser."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param time String representation of a date."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return parsedTime Optional\u003cLocalTime\u003e that contains a LocalTime if the input time is valid."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException if the time format is incorrect."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public Optional\u003cLocalTime\u003e parseTime(String time) throws DukeException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        DateTimeParser timeParser \u003d new DateTimeParser();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Optional\u003cLocalTime\u003e parsedTime;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            parsedTime \u003d Optional.ofNullable(LocalTime.parse(time, timeParser.timeKey));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            parsedTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Wrong time format.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return parsedTime;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 162
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.time.LocalTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.tasks.ToDo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Deals with loading tasks from the file and saving tasks in the file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_TYPE \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_DESCRIPTION \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_CHECK \u003d 2;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_DATE \u003d 3;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public static int COMMAND_TIME \u003d 4;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Writes all tasks to a text file in the home directory."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param tasks List of tasks to be written to a text file."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws IOException when file cannot be read."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException when an unexpected error occurs."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void writeToFile(ArrayList\u003cTask\u003e tasks) throws IOException, DukeException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        FileWriter fw \u003d new FileWriter(\"duke.txt\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        if (list.isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            fw.write(\"\u003cduke.java\u003e No saved tasks yet! :)\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else if (!list.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                fw.write(\"\u003cduke.java\u003e Saved tasks: (Please do not edit)\" + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                for (Task task : tasks) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    fw.write(task.toString() + \u0027\\n\u0027);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            throw new DukeException(\"Oops!! Something went wrong.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Reads and import stored tasks from a text file in the home directory."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * The text file has to be named \"duke.txt\"."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws IOException when file cannot be written."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException when date or time formats are wrong."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void readFromFile() throws IOException, DukeException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        BufferedReader br;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            br \u003d new BufferedReader(new FileReader(\"duke.txt\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            br.readLine();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        String input;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            while ((input \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                Parser parser \u003d new Parser();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                boolean isDone \u003d input.charAt(4) \u003d\u003d \u0027Y\u0027;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                String[] commandParts \u003d parser.parseFromStorage(input);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                String commandType \u003d commandParts[COMMAND_TYPE];"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                String commandDescription \u003d commandParts[COMMAND_DESCRIPTION];"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                Optional\u003cLocalDate\u003e date \u003d parser.parseDate(commandParts[COMMAND_DATE]);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                Optional\u003cLocalTime\u003e time \u003d parser.parseTime(commandParts[COMMAND_TIME]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                switch (commandType) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    case \"T\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                        list.add(new ToDo(commandDescription, isDone));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    case \"D\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                        list.add(new Deadline(commandDescription, date, time, isDone));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                    case \"E\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                        list.add(new Event(commandDescription, date, time, isDone));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            System.out.println(\"Something went wrong: \" + e.getMessage());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 99
    }
  },
  {
    "path": "src/main/java/ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import common.exceptions.DukeException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import data.TaskList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static common.Messages.MESSAGE_GREETING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static common.Messages.MESSAGE_GOODBYE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "import static common.Messages.line;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * Deals with interactions with the user, accepting input and returning a reply"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " * based on the input received."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Constructor for TextUi class."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public TextUi() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.in \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        this.out \u003d System.out;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Greets the user and displays the tasks that are due today."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Runs every time the user starts the program."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param tasks Stored list of tasks."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws DukeException"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void greet(TaskList tasks) throws DukeException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        outputMessage(MESSAGE_GREETING);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        Command startingCommand \u003d new Command(\"show_upcoming\", Optional.of(\"0\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        tasks.executeCommand(this, null, startingCommand);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Prints a message bidding goodbye to the user."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void goodbye() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        outputMessage(MESSAGE_GOODBYE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Prints the selected message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @param message Message to be printed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public void outputMessage(String... message) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        out.println(line);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        for (String m : message) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        out.println(line);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * Reads the next user input."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     * @return String representation of the next user input."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JeremiasLiew"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JeremiasLiew": 74
    }
  }
]
