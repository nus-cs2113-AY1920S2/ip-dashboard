[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE is a personal task tracker app that uses command line interface."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "It helps its users keep track of tasks that are entered into the app, keeping them in a task list."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "It is also able to store tasks added into the app and store them, allowing it to "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "be retrieved again when the user starts the app again. "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "## Feature Summary"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Add Task: Todo](#todo) - Add a `todo` task to ALIE"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Add Task: Deadline](#deadline) - Add a `deadline` task to ALIE."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Add Task: Event](#event) - Add a `event` task to ALIE."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [List](#list) - Lists all the tasks added into ALIE."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Mark Task as Complete](#done) - Mark a specific task as done in ALIE."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Delete Task](#delete) - Remove any task from ALIE. "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Find task](#find) - Search for tasks by name using keyword in the task list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* [Exit](#exit) - Exit ALIE."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "### 1. Add Task "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE keep track of 3 types of task - `todo`, `deadline` and `event`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "For each task, its type is marked by a symbol. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "If the task is completed, `[Y]` will be shown. If it is not, `[N]` will be shown."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* ## `todo` \u003ca name\u003d\"todo\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  #### keyword: `todo` "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Add a `todo` task to the task list in ALIE, keeping only a description of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  `todo` tasks are marked with the symbol `[T]`."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  The `todo` task will be added to the list in ALIE and also in local file storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Syntax: `todo \u003cdescription\u003e` "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Example of usage: `todo quiz for CS2113T`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Expected outcome:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     [T][N] quiz for CS2113T"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Now you have 1 tasks in the list.    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* ## `deadline` \u003ca name\u003d\"deadline\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  #### keyword: `deadline`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Add a `deadline` task to the list in ALIE, keeping a description and due date of the task."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  It is able to keep track of time in the format `YYYY-MM-DD`, converting them to `dd MMM YYYY`. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  `deadline` tasks are marked with the symbol `[D]`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  The `deadline` task will be added to the list in ALIE and also in local file storage."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Syntax: `deadline \u003cdescription\u003e /by \u003cdate\u003e` "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Example of usage: `deadline CS2113T iP final submission /by 2020-03-02`"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Expected outcome:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    [D][N] CS2113T iP final submission (by: 02 Mar 2020)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  \u003e Although other date formats are accepted, a warning will be shown as it is unable to convert the date properly."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "* ## `event` \u003ca name\u003d\"event\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  #### keyword: `event` "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Add an `event` task to the list in ALIE, keeping a description and duedate of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  It it able to keep track of time in the format `YYYY-MM-DD`, converting them to `dd MMM YYYY`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  `event` tasks are marked with the symbol `[E]`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  The `event` task will be added to the list in ALIE and also in local file storage."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Syntax: `event \u003cdescription\u003e /at \u003ctime\u003e` "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Example of usage: `event NUS computing career fair /at 2020-04-02`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  Expected outcome:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    [E][N] NUS computing career fair (at: 02 Apr 2020)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "   \u003e Although other date formats are accepted, a warning will be shown as it is unable to convert"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "   the date properly."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "### 2. List Task \u003ca name\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "#### keyword: `list`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Displays a numbered list with all the tasks stored in ALIE."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Syntax: `list` "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Here are the tasks in your list: "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "1.[T][N] quiz for CS2113T"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "2.[D][N] CS2113T iP final submission (by: 02 Mar 2020)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "3.[E][N] NUS computing career fair (at: 02 Apr 2020)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "4.[T][Y] assignment 4"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "### 3. Complete Task \u003ca name\u003d\"done\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "E0309556"
        },
        "content": "#### keyword: `done`"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Mark a task in the list in ALIE as done. Changing the symbol from `[N]` to `[Y]` "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Syntax: `done \u003cindex of task in list\u003e` "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Example of usage: `done 1`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  1. [T][Y] quiz for CS2113T"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "E0309556"
        },
        "content": "### 4. Delete Task \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "E0309556"
        },
        "content": "#### keyword: `delete`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Delete/Remove a task from the list in ALIE."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Syntax: `delete \u003cindex of task in list\u003e` "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Example of usage: `delete 4`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  [T][N] assignment 4"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "E0309556"
        },
        "content": "### 5. Find Task \u003ca name\u003d\"find\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "E0309556"
        },
        "content": "#### keyword: `find`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Find tasks by searching for a specified key. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "E0309556"
        },
        "content": "The key can be a word, phrase or task name. \u003cbr/\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "E0309556"
        },
        "content": "It will display any task whose name matches the specific key."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Syntax: `find \u003ckey\u003e` "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Example of usage: `find CS2113T`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Here are the tasks in your list: "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "E0309556"
        },
        "content": "1.[T][Y] quiz for CS2113T"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "E0309556"
        },
        "content": "2.[D][N] CS2113T iP final submission (by: 02 Mar 2020)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "E0309556"
        },
        "content": "___"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "E0309556"
        },
        "content": "### 6. Exit ALIE \u003ca name\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "E0309556"
        },
        "content": "#### keyword: `bye`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Exit the program."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Syntax: `bye` "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Exiting A.L.I.E..."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "E0309556"
        },
        "content": "-------------------------------------"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Bye-bye! Hope to see you again soon."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "E0309556"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "E0309556": 140
    }
  },
  {
    "path": "src/main/java/alie/Alie.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.ExitCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "@@author e0309556-reused"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Adapted logic for refactoring of Storage, Ui from https://github.com/nus-cs2113-AY1920S2/personbook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "with minor modification in the public class Alie."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "*/"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Alie {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private TaskManager taskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Construct ALIE object by instantiating Ui, Storage and TaskManager classes"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * then loads saved data if any."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param filePath Desired file path for where saved data is kept at"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Alie(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskList \u003d new TaskManager(storage.readFromFile(ui));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (FileNotFoundException | InvalidFileFormatException errorMsg) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            ui.print(Ui.FILE_NOT_FOUND_ERROR);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskList \u003d new TaskManager();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * The main entry point to run Duke."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param args Unused."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        new Alie(Storage.findStoragePath()).run();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Runs ALIE."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        start();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        runCmdLoopTillExitCmd();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Starts up ALIE with welcome message."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void start() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui.print(Ui.WELCOME_MSG);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Main logic of app; Repeatedly read input from user and execute ALIE"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * commands until \"bye\" input is detected."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void runCmdLoopTillExitCmd() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Command command \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        do {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                String userCommandText \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                command \u003d new Parser().parseCommand(userCommandText);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                CommandResult result \u003d executeCommand(command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                ui.showCmdResult(result);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                storage.save(taskList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            } catch (Exception errorMsg) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                ui.print(errorMsg.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                ui.print(ui.DIVIDER);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } while (!ExitCommand.isExit(command));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Executes the command provided by user input"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param command Command object provided by user to be executed"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return CommandResult object containing result from executing command"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws Exception Any exceptions that could be thrown while executing all the"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * different command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult executeCommand(Command command) throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Exits app after showing goodbye message"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui.print(Ui.GOODBYE_MSG);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 98,
      "-": 1
    }
  },
  {
    "path": "src/main/java/alie/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.AddDeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.AddEventCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.AddTodoCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.DeleteCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.DoneCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.ExitCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.IncorrectCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.ListCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidCmdException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Parses all user inputs"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final DateTimeFormatter PRINT_DATE_FORMAT \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            DateTimeFormatter.ofPattern(\"dd MMM YYYY\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Parses user input and categorise them into a specific Command object using the first word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * in param."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param userCommandText String input provided by user."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Specific Command object based on first word in param."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If any invalid command is detected while executing command."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Command parseCommand(String userCommandText) throws InvalidCmdException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String[] splitCmds \u003d userCommandText.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String cmdType \u003d splitCmds[0].toLowerCase();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        switch (cmdType) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case ExitCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case ListCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case DoneCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new DoneCommand(splitCmds);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case DeleteCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new DeleteCommand(splitCmds);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case FindCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new FindCommand(splitCmds[1]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case AddTodoCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new AddTodoCommand(splitCmds);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case AddDeadlineCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new AddDeadlineCommand(splitCmds);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        case AddEventCommand.COMMAND_KEYWORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new AddEventCommand(splitCmds);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new IncorrectCommand(userCommandText);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Splits details of Deadline and Event objects for easy differentiation based on given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * divider and also check for error or invalid inputs given."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param details The details for a deadline provided by user"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param divider Regex expression used to differentiate different details for the task"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *                object provided."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param commandType COMMAND_KEYWORD of deadline or event to know which object is invoking"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *                    the function."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return A string array with index 0 containing name of event and index 1 containing event"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *         time (that could be a deadline or event start date)."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If an unknown format is encountered."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static String[] parseDeadlineOrEventDetails(String details, String divider,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                                                       String commandType)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throws InvalidCmdException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String[] stringDetails \u003d details.split(divider);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (stringDetails.length \u003e 2) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(InvalidCmdException.TOO_MANY_DATES_ERROR);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else if (stringDetails.length \u003c 2) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    InvalidCmdException.DEADLINE_OR_EVENT_MISSING_DETAILS_ERROR, commandType));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return stringDetails;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Converting a string of specific date-time-format to another format if applicable, else"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * will simply print an warning message."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param stringDate A string specifying the date or time."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return LocalDate with pattern of MMM-dd-YYYY if stringDate matches pattern YYYY-MM-DD."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *         Else unedited stringDate."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static String parseDate(String stringDate) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            LocalDate date \u003d LocalDate.parse(stringDate);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return date.format(PRINT_DATE_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Ui.printDateWarning();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return stringDate;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 100
    }
  },
  {
    "path": "src/main/java/alie/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidFileFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.ToDo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Event;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Handles local storage of TaskManager in ALIE."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String FILENAME \u003d \"storage.txt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Construct Storage with default filePath provided."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param filePath Default filePath provided"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Finds non-system dependent file path to desired file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String containing the desired file path."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static String findStoragePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String home \u003d System.getProperty(\"user.home\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        java.nio.file.Path path \u003d java.nio.file.Paths.get(home, \"Desktop\", FILENAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return path.toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Loads information from local file containing information from past ALIE usage."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param ui Ui to deal with any input and output after reading from file."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList constructed from the stored information."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws FileNotFoundException If storage file cannot be found."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidFileFormatException If storage file is corrupted or cannot be deciphered."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e readFromFile(Ui ui) throws FileNotFoundException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            InvalidFileFormatException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        while (s.hasNextLine()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             String encodedTasks \u003d s.nextLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             switch (encodedTasks.charAt(0)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             case \u0027T\u0027:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 taskList.add(ToDo.decodeTask(encodedTasks));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 break;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             case \u0027D\u0027:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 taskList.add(Deadline.decodeTask(encodedTasks));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             case \u0027E\u0027:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 taskList.add(Event.decodeTask(encodedTasks));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 break;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             default:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                 throw new InvalidFileFormatException("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                         InvalidFileFormatException.INCORRECT_FILE_FORMAT_MSG);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "             }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "         }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ui.print(Ui.FILE_FOUND_MSG);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Saves current state of taskManager into local file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskManager The TaskManager to be saved into the file."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws IOException If there is error writing to the file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void save(TaskManager taskManager) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        StringBuilder allTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : taskManager.taskList) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            allTasks.append(task.encodeTask());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            allTasks.append(System.lineSeparator());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        fw.write(allTasks.toString());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 90
    }
  },
  {
    "path": "src/main/java/alie/TaskManager.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Object to manage the list of tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class TaskManager {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialize new taskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public TaskManager () {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Constructor to initialize taskList with pre-existing tasks."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public TaskManager (ArrayList\u003cTask\u003e taskList) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain total number of tasks currently in the list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return int Number of tasks in list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public int getNumOfTasks() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return taskList.size();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain the entire taskList."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return ArrayList containing all the tasks in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ArrayList\u003cTask\u003e getAllTasksAdded() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain specific task based on its index in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return The index-th item in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Task getTaskFromIndex(int index) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return taskList.get(index);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Add new Task to the list"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param newTask Task to be added to the list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Nothing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void addNewTask(Task newTask) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskList.add(newTask);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Mark a specific task to be completed based on its index."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void markTaskCompleted(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Task taskCompleted \u003d taskList.get(index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskCompleted.setTaskCompleted(taskCompleted);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Remove a task from the list based on its index."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param index The index of the task in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void deleteTask(int index) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskList.remove(index);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 78
    }
  },
  {
    "path": "src/main/java/alie/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.commands.CommandResult;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Object to manage all input and output of ALIE."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String logo \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                      \"    /\\\\       |        |   |‾‾‾‾‾\" + System.lineSeparator()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"   /  \\\\      |        |   |\"      + System.lineSeparator()"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"  /____\\\\     |        |   |----\"  + System.lineSeparator()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \" /      \\\\    |        |   |\"      + System.lineSeparator()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    + \"/        \\\\ . |_____ . | . |_____ .\"+ System.lineSeparator();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DIVIDER \u003d \"-------------------------------------\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String WELCOME_MSG \u003d \"Hello from\" + System.lineSeparator() + logo + \"What\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \" would you like to do today?\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String GOODBYE_MSG \u003d \"Bye-bye! Hope to see you again soon.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String FILE_FOUND_MSG \u003d \"File found. Imported data from file.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String FILE_NOT_FOUND_ERROR \u003d \"ERROR: file not found or invalid file \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"format.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String NO_TASK_FOUND_MSG \u003d \"No tasks found.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String TASK_FOUND_MSG \u003d \"Here are the tasks in your list: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            + System.lineSeparator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DATE_FORMAT_WARNING \u003d \"Warning: DateTime provided does not fit \" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"format, unable to parse correctly.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Constructor to initialize value in Object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Print any messages with a line separator in between."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param msgs Strings to be printed."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void print(String... msgs) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (String msg : msgs) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            out.println(msg);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain input without leading and trailing spaces from the user"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String containing user\u0027s unfiltered input."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.print(\"\u003e \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return in.nextLine().trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Prints the result of executed commands from Obj CommandResult"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param command Object created post execution of command, containing message"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *                to be printed."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public void showCmdResult(CommandResult command) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        out.println(command.feedbackToUser);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Prints warning message for erroneous date provided."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static void printDateWarning() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        System.out.println(DATE_FORMAT_WARNING);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 82
    }
  },
  {
    "path": "src/main/java/alie/commands/AddDeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidCmdException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to add deadline task with specific input format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * task_type task_name /by task_deadline"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class AddDeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final Deadline taskToAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String DEADLINE_DETAIL_DIVIDER \u003d \" /by \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Construct a Deadline Object after parsing spiltCommands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param spiltCommands Array of String containing details in each index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If Name, Date or Deadline of Deadline Object is missing or empty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public AddDeadlineCommand(String[] spiltCommands) throws InvalidCmdException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String[] details \u003d Parser.parseDeadlineOrEventDetails(spiltCommands[1],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    DEADLINE_DETAIL_DIVIDER, COMMAND_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String taskName \u003d details[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String taskDeadline \u003d Parser.parseDate(details[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (taskName.equals(\"\") || taskDeadline.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        InvalidCmdException.DEADLINE_OR_EVENT_MISSING_DETAILS_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        COMMAND_KEYWORD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskToAdd \u003d new Deadline(taskName, taskDeadline);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    InvalidCmdException.DEADLINE_OR_EVENT_MISSING_DETAILS_ERROR, COMMAND_KEYWORD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskLists.addNewTask(taskToAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(ADD_TASK_ACK, taskToAdd.getTaskInfo(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                taskLists.getNumOfTasks()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 49
    }
  },
  {
    "path": "src/main/java/alie/commands/AddEventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidCmdException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Event;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to add deadline task with specific input format:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * task_type task_name /at task_startDate"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final Event taskToAdd;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"event\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String EVENT_DETAIL_DIVIDER \u003d \" /at \";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Construct an Event Object after parsing spiltCommands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param splitCommands Array of String containing details in each index."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If Name or Start Date of Event Object is missing or empty."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public AddEventCommand(String[] splitCommands) throws InvalidCmdException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String[] details \u003d Parser.parseDeadlineOrEventDetails(splitCommands[1],"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    EVENT_DETAIL_DIVIDER, COMMAND_KEYWORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String taskName \u003d details[0];"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String taskStartDate \u003d Parser.parseDate(details[1]);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (taskName.equals(\"\") || taskStartDate.equals(\"\")) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        InvalidCmdException.DEADLINE_OR_EVENT_MISSING_DETAILS_ERROR,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        COMMAND_KEYWORD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskToAdd \u003d new Event(taskName, taskStartDate);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    InvalidCmdException.DEADLINE_OR_EVENT_MISSING_DETAILS_ERROR, COMMAND_KEYWORD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskLists.addNewTask(taskToAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(ADD_TASK_ACK, taskToAdd.getTaskInfo(),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                taskLists.getNumOfTasks()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 49
    }
  },
  {
    "path": "src/main/java/alie/commands/AddTodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidCmdException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.ToDo;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to add deadline task with specific input format:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * task_type task_name"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class AddTodoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private final ToDo taskToAdd;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"todo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Construct a ToDo Object after parsing spiltCommands."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param splitCommands Array of String containing details in each index."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If Name of ToDo Object is missing."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public AddTodoCommand(String[] splitCommands) throws InvalidCmdException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (splitCommands[1].equals(\"\")) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        InvalidCmdException.TODO_MISSING_NAME_ERROR, COMMAND_KEYWORD));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskToAdd \u003d new ToDo(splitCommands[1]);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(String.format("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    InvalidCmdException.TODO_MISSING_NAME_ERROR, COMMAND_KEYWORD));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskLists.addNewTask(taskToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(ADD_TASK_ACK, taskToAdd.getTaskInfo(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                taskLists.getNumOfTasks()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 42
    }
  },
  {
    "path": "src/main/java/alie/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Commands given by user to be executed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String RANGE_OF_VALID_TASKS_INDEX_MSG \u003d \"Any number from 1 --- %1$s\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String NO_TASK_MSG \u003d \"Please add tasks first.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String ADD_TASK_ACK \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Got it. I\u0027ve added this task:\" + System.lineSeparator() + \"  %1$s\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    System.lineSeparator() + \"Now you have %2$s tasks in the list.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DELETE_TASK_ACK \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Noted. I\u0027ve removed this task:\" + System.lineSeparator() + \"  %1$s\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    System.lineSeparator() + \"Now you have %2$s tasks in the list.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DONE_ACK \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Nice! I\u0027ve marked this task as done:\" + System.lineSeparator() + \"  %1$s. %2$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String FIND_COMMAND_ACK \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Here are the matching tasks in your list: \" + System.lineSeparator() + \"%1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Perform the desired actions of the specific Command."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskLists TaskManager containing the user\u0027s tasks."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param ui Ui to deal with any input and output when required."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param storage Storage to save data when required."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Result of executing the command."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws Exception Any exception that could be encountered while executing command."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public abstract CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) throws"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Exception;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * To convert a integer from one-based numbering to zero-based numbering."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param index One-based integer to be converted."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Integer with zero-based numbering"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected int convertToZeroBased (int index) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return index - 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * To convert a integer from zero-based numbering to one-based numbering."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param index Zero-based integer to be converted."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Integer with one-based numbering"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected int convertToOneBased (int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return index + 1;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Obtain a range of numbers that is valid for usage on taskList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskList The interested list in TaskManager to find the range of values"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return A string with the range of valid numbers."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String getRangeOfValidIndex(TaskManager taskList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        int maxTasks \u003d taskList.getNumOfTasks();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (maxTasks \u003e 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return String.format(RANGE_OF_VALID_TASKS_INDEX_MSG, maxTasks);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return NO_TASK_MSG;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Converting taskList into a string for printing."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param targetTaskList TaskList containing the tasks that needs to be converted into a String."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param originalTaskList TaskList that contains all the tasks added. Used as reference for"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     *                         finding the correct index of the task to be listed in targetTaskList."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String containing all the tasks in taskList with proper spacing and line separator."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String stringAllTasksInList(ArrayList\u003cTask\u003e targetTaskList,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                                       ArrayList\u003cTask\u003e originalTaskList) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        StringBuilder allTasks \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (targetTaskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            allTasks.append(Ui.NO_TASK_FOUND_MSG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            allTasks.append(Ui.TASK_FOUND_MSG);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            for (Task task : targetTaskList) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                allTasks.append(String.format(\"%d.%s\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        convertToOneBased(originalTaskList.indexOf(task)),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                        task.getTaskInfo() + System.lineSeparator()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return allTasks.toString();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 93
    }
  },
  {
    "path": "src/main/java/alie/commands/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Result from running the Command to be shown to user."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String feedbackToUser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise the input to be shown to user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param feedbackToUser String to be shown to user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.feedbackToUser \u003d feedbackToUser;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 17
    }
  },
  {
    "path": "src/main/java/alie/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidCmdException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to delete task from task list."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"delete\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public int taskIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise taskIndex to reflect correctly the index of the task"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * to be deleted."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param spiltCommands Array of String with first index containing index of interested task."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If index provided by user is not a number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public DeleteCommand(String[] spiltCommands) throws InvalidCmdException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskIndex \u003d convertToZeroBased(Integer.parseInt(spiltCommands[1]));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(InvalidCmdException.INVALID_NUM_ERROR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(InvalidCmdException.MISSING_INDEX_ERROR);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throws InvalidCmdException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task deletedTask \u003d taskLists.getTaskFromIndex(taskIndex);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskLists.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(String.format(DELETE_TASK_ACK, deletedTask.getTaskInfo(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    taskLists.getNumOfTasks()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(String.format(InvalidCmdException.INVALID_ID_ERROR,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    getRangeOfValidIndex(taskLists)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 46
    }
  },
  {
    "path": "src/main/java/alie/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.exceptions.InvalidCmdException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to mark a task as done."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"done\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public final int taskIndex;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise taskIndex to reflect correctly the index of the task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * to be marked as done."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param spiltCommands Array of String with first index containing index of interested task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @throws InvalidCmdException If index provided by user is not a number."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public DoneCommand(String[] spiltCommands) throws InvalidCmdException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskIndex \u003d convertToZeroBased(Integer.parseInt(spiltCommands[1]));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(InvalidCmdException.INVALID_NUM_ERROR);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(InvalidCmdException.MISSING_INDEX_ERROR);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throws InvalidCmdException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            Task targetTask \u003d taskLists.getTaskFromIndex(taskIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (targetTask.getisDone()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                throw new InvalidCmdException(InvalidCmdException.COMPLETED_TASK_ERROR);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            taskLists.markTaskCompleted(taskIndex);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            return new CommandResult(String.format(DONE_ACK, convertToOneBased(taskIndex),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    targetTask.getTaskInfo()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        } catch (IndexOutOfBoundsException | NullPointerException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            throw new InvalidCmdException(String.format(InvalidCmdException.INVALID_ID_ERROR,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                    getRangeOfValidIndex(taskLists)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 50
    }
  },
  {
    "path": "src/main/java/alie/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to signal to exit the app."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String EXIT_PROG_ACK \u003d \"Exiting A.L.I.E...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Checks if user wants to exit the app by checking given command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param command The Command to be checked."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return True if it is an object of type ExitCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * False if it is not an object of type ExitCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(EXIT_PROG_ACK);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 28
    }
  },
  {
    "path": "src/main/java/alie/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param keyword The String that user wants to find."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public FindCommand(String keyword) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e matchKeywordTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d taskLists.getAllTasksAdded();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        for (Task task : allTasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            String description \u003d task.getDescription();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            if (description.contains(keyword)) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                matchKeywordTasks.add(task);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(stringAllTasksInList(matchKeywordTasks, allTasks),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "                FIND_COMMAND_ACK));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 37
    }
  },
  {
    "path": "src/main/java/alie/commands/IncorrectCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command that deals with invalid commands given by user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class IncorrectCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public final String feedbackToUser \u003d \"Unable to execute \\\"%1$s\\\". \" +"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Please try again with valid command.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public final String cmd;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise the cmd given by user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param cmd Invalid input provided by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public IncorrectCommand(String cmd) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.cmd \u003d cmd;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(String.format(feedbackToUser, cmd));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 27
    }
  },
  {
    "path": "src/main/java/alie/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.TaskManager;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import alie.task.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Command to print all the tasks added to task list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMMAND_KEYWORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public CommandResult execute(TaskManager taskLists, Ui ui, Storage storage) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ArrayList\u003cTask\u003e allTasks \u003d taskLists.getAllTasksAdded();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return new CommandResult(stringAllTasksInList(allTasks, allTasks));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 21
    }
  },
  {
    "path": "src/main/java/alie/exceptions/InvalidCmdException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Exception for when an invalid command is detected"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class InvalidCmdException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    //exceptions specific to ALIE"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String TOO_MANY_DATES_ERROR \u003d \"Please only provide 1 date.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static String TODO_MISSING_NAME_ERROR \u003d \"Please enter NAME for %1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String DEADLINE_OR_EVENT_MISSING_DETAILS_ERROR  \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            \"Please enter NAME or DATE for %1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String INVALID_NUM_ERROR \u003d \"Please provide a positive number.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String INVALID_ID_ERROR \u003d \"Please provide a valid index. %1$s\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String COMPLETED_TASK_ERROR \u003d \"Task is already completed\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String MISSING_INDEX_ERROR \u003d \"Please provide a number.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public InvalidCmdException (String errorMsg) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Formats the string that is return from the exception thrown"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String with default error message for this error."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return \"INVALID CMD ERROR: \" + super.getMessage();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 29
    }
  },
  {
    "path": "src/main/java/alie/exceptions/InvalidFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Exception for when an invalid file format is detected"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class InvalidFileFormatException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static final String INCORRECT_FILE_FORMAT_MSG \u003d \"File format is not correct.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public InvalidFileFormatException(String errorMsg) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(errorMsg);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Formats the string that is return from the exception thrown"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String with default error message for this error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return \", INVALID FILE FORMAT ERROR: \" + super.getMessage();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 21
    }
  },
  {
    "path": "src/main/java/alie/task/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Task that should be completed before a specific date or time."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String DEADLINE_SYMBOL \u003d \"D\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String endDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise task\u0027s name and due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param date Due Date of task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Deadline(String name, String date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        endDate \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (\"[D]\" + super.getTaskInfo() + \" (by: \" + endDate + \")\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return DEADLINE_SYMBOL + DELIMITER + isDone + DELIMITER + description + DELIMITER + endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Decipher a string containing information of a task (deadline)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param encodedTask String containing information of the task (deadline)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Deadline object with information from encodedTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static Deadline decodeTask(String encodedTask) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String[] task \u003d encodedTask.split(\"\\\\\" + DELIMITER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(task[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String description \u003d task[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String endDate \u003d task[3];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Deadline deadlineTask \u003d new Deadline(description, endDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            deadlineTask.setTaskCompleted(deadlineTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return deadlineTask;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 46
    }
  },
  {
    "path": "src/main/java/alie/task/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Task that begin at a specific date or timing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String EVENT_SYMBOL \u003d \"E\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private String startDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise task\u0027s name and due date."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param date Date when task begins."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Event(String name, String date) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        startDate \u003d date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (\"[E]\" + super.getTaskInfo() + \" (at: \" + startDate + \")\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return EVENT_SYMBOL + DELIMITER + isDone + DELIMITER + description + DELIMITER + startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Decipher a string containing information of a task (event)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param encodedTask String containing information of the task (event)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Deadline object with information from encodedTask."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static Event decodeTask(String encodedTask) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String[] task \u003d encodedTask.split(\"\\\\\" + DELIMITER);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(task[1]);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String description \u003d task[2];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String startDate \u003d task[3];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        Event eventTask \u003d new Event(description, startDate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            eventTask.setTaskCompleted(eventTask);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return eventTask;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 46
    }
  },
  {
    "path": "src/main/java/alie/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Task that user keeps track of."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    protected static final String DELIMITER \u003d \"|\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor for a task to initialise task\u0027s name and mark that it is not done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param name String containing Name of the task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Task (String name) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.description \u003d name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain the name of the Task added."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String containing Name of the task."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getDescription() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain the condition of isDone of the Task added."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return True if task is marked done. False if task is not."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public boolean getisDone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to check whether the task is done"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return \"Y\" if task is done and \"N\" if task is not done."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (isDone ? \"Y\" : \"N\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Setter to set a task as completed."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param taskToSet The task that is completed."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Same task that is now completed."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public Task setTaskCompleted(Task taskToSet) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        taskToSet.isDone \u003d true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return taskToSet;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Getter to obtain all the information of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return A string containing all information of the task in a specific format."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (\"[\" + getStatusIcon() + \"] \" + description);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Formats information in a task for it to be saved and decoded in future."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return String with all information in the task."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public abstract String encodeTask();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 67
    }
  },
  {
    "path": "src/main/java/alie/task/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "package alie.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": " * Task that need to be done."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    private static final String TODO_SYMBOL \u003d \"T\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Default constructor to initialise task\u0027s name."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param name Name of task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public ToDo(String name) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        super(name);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String getTaskInfo() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return (\"[T]\" + super.getTaskInfo());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public String encodeTask() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return TODO_SYMBOL + DELIMITER + isDone + DELIMITER + description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * Decipher a string containing information of a task (todo)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @param encodedTask String containing information of the task (todo)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     * @return Deadline object with information from encodedTask."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    public static ToDo decodeTask(String encodedTask) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String[] task \u003d encodedTask.split(\"\\\\\" + DELIMITER);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        boolean isDone \u003d Boolean.parseBoolean(task[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        String description \u003d task[2];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        ToDo toDoTask \u003d new ToDo(description);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        if (isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "            toDoTask.setTaskCompleted(toDoTask);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        return toDoTask;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "E0309556": 42
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "Hello from"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    /\\       |        |   |‾‾‾‾‾"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "   /  \\      |        |   |"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "  /____\\     |        |   |----"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": " /      \\    |        |   |"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "/        \\ . |_____ . | . |_____ ."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e What would you like to do?"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e No tasks added yet"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [T][?] read book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [D][?] deadline return book (by: June 6th)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [E][?] event project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [T][?] join sports club"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      [✓] read book"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      [✓] join sports club"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [T][?] borrow book"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Here are the tasks in your list:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       1.[T][?] read book"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       2.[D][?] deadline return book (by: June 6th)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       3.[E][?] event project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       4.[T][?] join sports club"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       5.[T][?] borrow book"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [D][?] deadline return book (by: Sunday)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [E][?] event project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [D][?] deadline do homework (by: no idea :-p)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 8 tasks in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: DESCRIPTION of TODO is missing."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: Unable to execute \"blah\". Please try again with valid command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: DESCRIPTION and DATE of deadline is missing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: DESCRIPTION and DATE of event is missing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: INDEX provided is not a valid index."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: To exit, use cmd: \"bye\"."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: Unable to append info to cmd: \"list\"."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: INDEX provided is not a valid index."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [D][?] deadline return book (by: June 6th)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [T][?] join sports club"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Here are the tasks in your list:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       1.[T][?] read book"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       2.[E][?] event project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       3.[T][?] borrow book"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       4.[D][?] deadline return book (by: Sunday)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       5.[E][?] event project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       6.[D][?] deadline do homework (by: no idea :-p)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [T][?] read book"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Noted. I\u0027ve removed this task:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "E0309556"
        },
        "content": "        [E][?] event project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "E0309556"
        },
        "content": "      Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e INVALID CMD ERROR: INDEX provided is not a valid index."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e       Here are the tasks in your list:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       1.[T][?] borrow book"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       2.[D][?] deadline return book (by: Sunday)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       3.[E][?] event project meeting (at: Mon 2-4pm)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "E0309556"
        },
        "content": "       4.[D][?] deadline do homework (by: no idea :-p)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "E0309556"
        },
        "content": "ALIE\u003e Bye-bye!"
      }
    ],
    "authorContributionMap": {
      "E0309556": 76
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "list"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "deadline return book /by June 6th"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "deadline do homework /by no idea :-p"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "todo"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": "blah"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "deadline "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": "event"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "done 20"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "bye bye"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": "list more"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "done 2020"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "E0309556"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "E0309556"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "E0309556"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "E0309556"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "E0309556"
        },
        "content": "delete 0"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "E0309556"
        },
        "content": "list"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "E0309556"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "E0309556": 28
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "E0309556"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "E0309556"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "E0309556"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "E0309556"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "E0309556"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "E0309556"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "E0309556"
        },
        "content": "javac  -cp ..\\src\\main\\java\\alie -Xlint:none -d ..\\bin ..\\src\\main\\java\\alie\\*.java ..\\src\\main\\java\\alie\\task\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "E0309556"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "E0309556"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "E0309556"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "E0309556"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "E0309556"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "E0309556"
        },
        "content": "java -classpath ..\\bin alie.Alie \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "E0309556"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "E0309556"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "E0309556"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "E0309556": 21
    }
  }
]
