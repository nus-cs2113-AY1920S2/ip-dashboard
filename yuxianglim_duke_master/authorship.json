[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "# Using duke task manager"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**Functions available**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `todo [task]`   --- store a new todo task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `deadline [task]`   --- store a new task with deadline"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `event [task]`  --- store a new event task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `list` --- list all task stored"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `done [tasknumber]` --- mark a task as completed"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `delete [tasknumber]` --- delete task"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `find [keyword]` --- find task with the keyword in the descriptions"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `bye` --- exit program"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `reset` --- delete data directory and Tasklist.txt"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* `help` --- call up the functions table (TBC)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "# (Original ReadME)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "duke.Duke.duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke.duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "yuxianglim": 19
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "# Using duke task manager  "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "  "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Duke BAPE is a task manager built specially for you to store your daily task. With export function built-in, you will be able to transfer all your task easily between machines.  "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**Starting Up**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Install `Java 11 or higher` in your computer"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Download the most updated `duke.jar` from release page. Current version : `Duke v1.5`"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Copy the jar file to any folder that you wish to run from."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Launch terminal on your OS / CMD for window users --- `Win Key + R and type cmd, hit enter`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Navigate to the folder where duke.jar is in. -- `cd filepath`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* Type the command `java -jar duke.jar` to launch the program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**Functions available**  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "  "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|Functions             | Example                                        |  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|----------------------|------------------------------------------------|  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`todo [task]`         | store a new todo task                          |       "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`deadline [task]`     | store a new task with deadline                 |  "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`event [task]`        | store a new event task                         |  "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`list`                | list all task stored                           |  "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`done [tasknumber]`   | mark a task as completed                       |  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`delete [tasknumber]` | delete task                                    |  "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`find [keyword]`      | find task with the keyword in the descriptions |  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`bye`                 | exit program                                   |  "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`reset`               | reset and clear data directory and Tasklist.txt|  "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "|`help`                | call up the functions table (TBC)              |  "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "  "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "**\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "  "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "1. Todo : Creating and storing a todo task.  "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Eg: `todo borrow book` will create a new task with description `borrow book` and store in the Array of task."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "2. deadline : Creating and storing a task with a deadline in it.  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Eg: `deadline return book /by 1200` will create a new deadline task with description `return book` and `/by` will be the escaping keyword.  "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Anything after `\\by` will be part of the timing stored into the task.  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "2. event : Creating and storing a task with a deadline in it.  "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Eg: `event career fair /at library` will create a new event task with description `career fair` and `/at` will be the escaping keyword.  "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Anything after `\\at` will be part of the location stored into the task.  "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "3. list : Will list out all task stored in the array list.  "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "4. reset : This function will clear and reset the Tasklist.txt file in the /data dir. After completion, the program will exit.  "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Launch the program again to start storing new task. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* If you have feedback or bug reports, please ignore it :)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 52
    }
  },
  {
    "path": "src/main/java/Duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.io.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.lang.NullPointerException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.exceptions.MissingDescriptionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.exceptions.WhitespaceExceptions;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.taskManager.Deadline;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.taskManager.Events;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.taskManager.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.taskManager.Todo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import duke.ui.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.nio.file.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * Duke is a a chatbot with task managing functions."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @author Lim Yu Xiang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @version CS2113 AY19/20 Sem 2 Duke"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Main method for Duke."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param args String[] args in main."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        boolean reset;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        importTaskFromFile();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        programStart();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        reset \u003d loopTillEnd();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if(reset){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            resetProgram();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Importing of all task from Tasklist.txt to program when first launch"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws IOException if error in importing task from .txt file due to formatting"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void importTaskFromFile() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            Path path \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (!Files.exists(path)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                Files.createDirectory(path);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                File f \u003d new File(\"data/Tasklist.txt\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                File f \u003d new File(\"data/Tasklist.txt\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                Scanner fileScanner \u003d new Scanner(f);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                while (fileScanner.hasNextLine()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    String line \u003d fileScanner.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    String[] singleTaskDescriptions \u003d line.split(\"\\\\|\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    switch (singleTaskDescriptions[0]) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        case \"T\":"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            addtask(new Todo(singleTaskDescriptions[2]));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            if (Integer.parseInt(singleTaskDescriptions[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                tasks.get(tasks.size() - 1).importDone();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        case \"D\":"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            addtask(new Deadline(singleTaskDescriptions[2], singleTaskDescriptions[3]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            if (Integer.parseInt(singleTaskDescriptions[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                tasks.get(tasks.size() - 1).importDone();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        case \"E\":"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            addtask(new Events(singleTaskDescriptions[2], singleTaskDescriptions[3]));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            if (Integer.parseInt(singleTaskDescriptions[1]) \u003d\u003d 1) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                tasks.get(tasks.size() - 1).importDone();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Error occurred. Please try again!\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Run greetings and show table of available functions"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void programStart() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        DisplayUI ui \u003d new DisplayUI();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        ui.showStartMessages();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Loop the program until \"bye\" is entered"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return true if reset is keyed in function else false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static boolean loopTillEnd() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Scanner myScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        boolean flag \u003d true; //Boolean flag for while loop"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String function;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        while (flag \u003d\u003d true) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                function \u003d myScanner.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                switch (function) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //add new todo task"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"todo\":"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        todoCommand(myScanner, function);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        //String line;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //add new task with deadline"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"deadline\":"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        deadlineCommand(myScanner, function);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //add new event task"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"event\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        eventCommand(myScanner, function);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //exit program"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"bye\":"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        System.out.println(\"Bye! Hope to see you again soon!\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        flag \u003d false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //list all task stored"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"list\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        listCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //mark a task as completed"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"done\":"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        doneCommand(myScanner);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //delete a task"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"delete\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        deleteCommand(myScanner);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //delete /data dir and contents and end the program (Bugs)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"reset\":"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "//                        flag \u003d false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "//                        break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //find task with matching descriptions to keyword"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"find\":"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        findCommand(myScanner);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    //Display help functions table"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    case \"help\":"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        DisplayUI ui \u003d new DisplayUI();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        ui.showFunctionList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        //loop till valid function entered"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        String redundant \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        System.out.println(\"Please key in a valid function\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (MissingDescriptionException e) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                e.printDescr();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"☹ OOPS! Error storing date and time!! Please try again.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (NullPointerException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"☹ OH NO! task number is missing!! Please try storing a task first.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"☹ OOPS! Missing command! Please try command: done [task number] \");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (WhitespaceExceptions e) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"Error while appending to file. Please check your white spaces and symbols.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Method for finding task"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param myScanner"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void findCommand(Scanner myScanner) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        boolean found \u003d false;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        line \u003d myScanner.nextLine().trim();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] keywords \u003d line.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"Here are the matching tasks in your list:\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for (String word : keywords) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                String descrp \u003d tasks.get(i).getDescription();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                if (descrp.contains(word)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    System.out.println(\"    \" + i + 1 + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    found \u003d true;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (!found) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Sorry! There are no task with descriptions matching your keyword! Please try again!\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Method for marking task as done"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param myScanner"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws WhitespaceExceptions"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void doneCommand(Scanner myScanner) throws WhitespaceExceptions {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        line \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String l \u003d line.replace(\" \", \"\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (l \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        int taskNumber \u003d Integer.parseInt(l) - 1;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (taskNumber \u003e\u003d tasks.size() || taskNumber \u003c 0) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        tasks.get(taskNumber).markAsDone(tasks.get(taskNumber));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String str \u003d tasks.get(taskNumber).toString();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String str2 \u003d str.substring(6, str.length());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        appendToFile(str2);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"Great job! I\u0027ve marked this task as done in your planner:\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"    \" + tasks.get(taskNumber));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Method for deleting task"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param myScanner"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws WhitespaceExceptions"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void deleteCommand(Scanner myScanner) throws WhitespaceExceptions {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String l;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        int taskNumber;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String str;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String str2;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        line \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        l \u003d line.replace(\" \", \"\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        taskNumber \u003d Integer.parseInt(l) - 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (l \u003d\u003d \"\") {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (taskNumber \u003e\u003d tasks.size() || taskNumber \u003c 0) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new NullPointerException();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"Noted. I\u0027ve removed this task:\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"    \" + tasks.get(taskNumber));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        str \u003d tasks.get(taskNumber).toString();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        str2 \u003d str.substring(6, str.length());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        deleteToFile(str2);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"Now you have \" + tasks.size() + \" tasks in your list.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Method for listing all task in the Array List"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void listCommand() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Here are your task(s) currently in your planner:\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(i + 1 + \".\" + tasks.get(i));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Wow! your planner is empty currently! Try adding some tasks first!\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Add a new event to the task list command"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param myScanner Scanner for task description input"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param function function name to throw into writeToFile method"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws MissingDescriptionException if descriptions is missing in the input"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void eventCommand(Scanner myScanner, String function) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        line \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] eventName \u003d line.split(\"/\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (eventName[0].equals(\"\")) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new MissingDescriptionException(\"☹ OOPS!!! The event description cannot be empty!!\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] event \u003d eventName[1].split(\"at \");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (event[0].equals(null)) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        addtask(new Events(eventName[0], event[1]));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        writeToFile(function, line);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        printAddedTask(tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Add a new task with deadline into the task list commmand"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param myScanner Scanner for task description input"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param function name to throw into writeToFile method"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws MissingDescriptionException if descriptions is missing in the input"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void deadlineCommand(Scanner myScanner, String function) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String line;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        line \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] description \u003d line.split(\"/\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (description[0].equals(\"\")) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new MissingDescriptionException(\"☹ OOPS!!! The deadline description cannot be empty!!\");"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] deadLine \u003d description[1].split(\"by \");"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (description[0] \u003d\u003d null) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new ArrayIndexOutOfBoundsException();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        addtask(new Deadline(description[0], deadLine[1]));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        writeToFile(function, line);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        printAddedTask(tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Add a new todo task to the tasklist command"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param myScanner Scanner for task description input"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param function name to throw into writeToFile method"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws MissingDescriptionException if descriptions is missing in the input"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void todoCommand(Scanner myScanner, String function) throws MissingDescriptionException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String line \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (line.equals(\"\")) {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new MissingDescriptionException(\"☹ OOPS!!! The todo description cannot be empty!!\");"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        addtask(new Todo(line));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        writeToFile(function, line);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        printAddedTask(tasks.get(tasks.size() - 1));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Print out the added new task to user"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param t The last task that is added into the list"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static void printAddedTask(Task t) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"\\n____________________________________________________________\");"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"New task added:\");"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"    \" + t);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"Total number of tasks in the list:  \" + tasks.size());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(\"____________________________________________________________\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Function to add a newly created task into the tasks array"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param description A string description of the task"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static void addtask(Task description) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        tasks.add(description);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Write new task created to Tasklist.txt"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param str1 function name of the current action"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param str2 A String description of the task"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void writeToFile(String str1, String str2) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String filePath \u003d \"data/Tasklist.txt\";"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath, true);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (str1.contains(\"todo\")) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                String newLineFormatted \u003d str2.stripLeading();"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                fw.write(\"T|0|\" + newLineFormatted + System.lineSeparator());"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (str1.contains(\"deadline\")) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                String[] newLineFormatted \u003d str2.split(\"/by\");"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                fw.write(\"D|0|\" + newLineFormatted[0].trim() + \"|\" + newLineFormatted[1].trim() + System.lineSeparator());"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (str1.contains(\"event\")) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                String[] newLineFormatted \u003d str2.split(\"/at\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                fw.write(\"E|0|\" + newLineFormatted[0].trim() + \"|\" + newLineFormatted[1].trim() + System.lineSeparator());"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                fw.close();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Error while writing into file. Please try again\");"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Append to a task in Tasklist.txt"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param newLine String description of task from the txt file"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws WhitespaceExceptions If there is undefined or additional whitespaces in the txt file"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void appendToFile(String newLine) throws WhitespaceExceptions {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String taskSymbol;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] strArr;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String timeDate;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (newLine.contains(\"(by:\")) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newline2 \u003d newLine.replace(\"(by:\", \":\");"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            strArr \u003d newline2.split(\":\");"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            description \u003d strArr[0].trim();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(description);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            timeDate \u003d strArr[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            taskSymbol \u003d \"D|\";"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            //   System.out.println(\"D Formatted: \" + description + timeDate);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else if (newLine.contains(\"(at:\")) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newline2 \u003d newLine.replace(\"(at:\", \":\");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            strArr \u003d newline2.split(\":\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            description \u003d strArr[0].trim();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            timeDate \u003d strArr[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            taskSymbol \u003d \"E|\";"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            //   System.out.println(\" E Formatted: \" + description + timeDate);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            description \u003d newLine.trim();"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            timeDate \u003d \"\";"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            taskSymbol \u003d \"T|\";"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            //   System.out.println(\"T Formatted: \" + description);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new WhitespaceExceptions();"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String filePath \u003d \"data/Tasklist.txt\";"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        File fileToBeModified \u003d new File(filePath);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String originalFileContent \u003d \"\";"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        BufferedReader reader \u003d null;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        FileWriter writer \u003d null;"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(fileToBeModified));"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String currentReadingLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String oldString \u003d null;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newString \u003d null;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            while (currentReadingLine !\u003d null) {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                if (currentReadingLine.contains(description)) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    oldString \u003d currentReadingLine;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    newString \u003d taskSymbol + 1 + \"|\" + description + \"|\" + timeDate;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                originalFileContent +\u003d currentReadingLine + System.lineSeparator();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                currentReadingLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newFileContent \u003d originalFileContent.replace(oldString, newString);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            writer \u003d new FileWriter(fileToBeModified);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            writer.write(newFileContent);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Error appending to file! Please try again!\");"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     *Delete a task from Tasklist.txt"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param newLine String description of task from the txt file"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws WhitespaceExceptions If there is undefined or additional whitespaces in the txt file"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void deleteToFile(String newLine) throws WhitespaceExceptions {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String taskSymbol;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String[] strArr;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String description;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String timeDate;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        //    System.out.println(\"input:\"+newLine);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (newLine.contains(\"(by:\")) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newline2 \u003d newLine.replace(\"(by:\", \":\");"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            strArr \u003d newline2.split(\":\");"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            description \u003d strArr[0].trim();"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            timeDate \u003d strArr[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            taskSymbol \u003d \"D|\";"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            //   System.out.println(\"D Formatted: \" + description + timeDate);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else if (newLine.contains(\"(at:\")) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newline2 \u003d newLine.replace(\"(at:\", \":\");"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            strArr \u003d newline2.split(\":\");"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            description \u003d strArr[0].trim();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            timeDate \u003d strArr[1].replace(\")\", \"\").trim();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            taskSymbol \u003d \"E|\";"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            //   System.out.println(\" E Formatted: \" + description + timeDate);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            description \u003d newLine.trim();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            timeDate \u003d \"\";"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            taskSymbol \u003d \"T|\";"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            //   System.out.println(\"T Formatted: \" + description);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (description.isBlank()) {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            throw new WhitespaceExceptions();"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String filePath \u003d \"data/Tasklist.txt\";"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        File fileToBeModified \u003d new File(filePath);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String originalFileContent \u003d \"\";"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        BufferedReader reader \u003d null;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        FileWriter writer \u003d null;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(fileToBeModified));"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String currentReadingLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String oldString \u003d null;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newString \u003d null;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            while (currentReadingLine !\u003d null) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                if (currentReadingLine.contains(description)) {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    oldString \u003d currentReadingLine;"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    newString \u003d \"\";"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                originalFileContent +\u003d currentReadingLine + System.lineSeparator();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                currentReadingLine \u003d reader.readLine();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            String newFileContent \u003d originalFileContent.replace(oldString, newString);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            writer \u003d new FileWriter(fileToBeModified);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            writer.write(newFileContent);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Error appending to file! Please try again!\");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                reader.close();"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                writer.close();"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Clean the Tasklist.txt file in /data dir and reset the program"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @throws IOException If there is error in closing the fileInStream"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void resetProgram() throws IOException {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        FileInputStream fi \u003d null;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        FileOutputStream fio \u003d null;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            fi \u003d new FileInputStream(\"data/Tasklist.txt\");"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            fio \u003d new FileOutputStream(\"data/Tasklist.txt\");"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            System.out.println(\"Error Closing File\");"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            fi.close();"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            fio.close();"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        deleteDirectory(new File(\"data\"));"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Delete the /data and contents in it"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param dir The name of the path of dir"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static void deleteDirectory(File dir) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if (dir.isDirectory()) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (dir.list().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                dir.delete();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"Deleting folder : \" + dir.getAbsolutePath());"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                File[] children \u003d dir.listFiles();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                for (File temp : children) {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                    deleteDirectory(temp);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            if (dir.list().length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                dir.delete();"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"Deleting folder : \" + dir.getAbsolutePath());"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                dir.delete();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                System.out.println(\"Deleting File  : \" + dir.getAbsolutePath());"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 1,
      "yuxianglim": 575
    }
  },
  {
    "path": "src/main/java/Duke/exceptions/MissingDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class MissingDescriptionException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    String errorDescriptions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public MissingDescriptionException(String errorDescriptions){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.errorDescriptions \u003d errorDescriptions;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void printDescr(){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(errorDescriptions);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 14
    }
  },
  {
    "path": "src/main/java/Duke/exceptions/WhitespaceExceptions.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class WhitespaceExceptions extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 5
    }
  },
  {
    "path": "src/main/java/Duke/exceptions/resetError.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class resetError extends Exception {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    String errorDescriptions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public resetError(String errorDescriptions){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.errorDescriptions \u003d errorDescriptions;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void printDescr(){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        System.out.println(errorDescriptions);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void manualPathEntry(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        Scanner myScanner \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        String path \u003d myScanner.nextLine();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 21
    }
  },
  {
    "path": "src/main/java/Duke/taskManager/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.taskManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * The Deadline class is a Task with specified String description and String dateTime."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * Deadline class extends from Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @author Lim Yu Xiang"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @version CS2113 AY19/20 Sem 2 Duke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String by;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Public constructor for Deadline Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param by Time of Task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Getter for the Time of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return Time of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String getDeadline() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return by;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Return a string representation of the task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return [taskStatus] followed by the description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return \"[D]\" + super.toString() + \"(by: \" + getDeadline() + \")\" ;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 39
    }
  },
  {
    "path": "src/main/java/Duke/taskManager/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.taskManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * The Event class is a Task with specified String description and String location (at)."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * Event class extends from Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @author Lim Yu Xiang"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @version CS2113 AY19/20 Sem 2 Duke"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String at;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Public constructor for Event Task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param at Location/Date/Time of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Events(String description, String at) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Getter for the Location/Date/Time of the task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return Location/Date/Time of the task"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String getEvent(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return at;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Return a string representation of the task"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return [taskStatus] followed by the description"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return \"[E]\" + super.toString() + \"(at: \" + getEvent() + \")\" ;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 39
    }
  },
  {
    "path": "src/main/java/Duke/taskManager/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.taskManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * The Task class store the record of the description of any Task created"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @author Lim Yu Xiang"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " * @version CS2113 AY19/20 Sem 2 Duke"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Public constructor for Task and isDone is set to false by default."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param description Description of the Task."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Getter method for getting status of the Task completion"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return O if task is done and X if it is not done"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String getStatusIcon(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        if(isDone) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            return \"O\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                return \"X\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Getter method for getting descriptions of the Task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return O if task is done and X if it is not done"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Mark the task as done by setting isDone to true."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void markAsDone(Task description) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Import task as completed if it is completed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void importDone() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Return a string representation of the task"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return [taskStatus] followed by the description"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return \"[\" + getStatusIcon() + \"]\" + getDescription();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 64
    }
  },
  {
    "path": "src/main/java/Duke/taskManager/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.taskManager;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private String description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Public constructor for Todo Task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param description Description of task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public Todo(String description){"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Return a string representation of the task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @return [taskStatus] followed by the description"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 24
    }
  },
  {
    "path": "src/main/java/Duke/ui/DisplayUI.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "public class DisplayUI {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String VERSION \u003d \"TASK MANAGER - Version 1.1\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private static final String DIVIDER \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String MESSAGE_WELCOME  \u003d \"Welcome to BAPE, your Task Manager!\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                                + \"Here are the functions available.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String LOGO    \u003d \" _____     _      ______ ______\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                       + \"|  _  \\\\   / \\\\    |  __  |  ____|\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                       + \"| |_| |  / _ \\\\   | |__| | |___\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                       + \"|  _  | / /_\\\\ \\\\  |  ____|  ___|\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                       + \"| |_| |/ _____ \\\\ | |    | |____\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                       + \"|_____/_/     \\\\_\\\\|_|    |______|\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public static final String FUNCTION_LIST \u003d  \" ___________________________________________________________________________________________________________\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|  Functions:  |                 Descriptions:                      |               Example:                |\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|______________|____________________________________________________|_______________________________________|\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   todo       |                Create a To-do task                 | (eg. todo borrow books)               |\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   deadline   |                Create a task with a deadline       | (eg. deadline bathe /by 9PM)          |\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   event      |                Create an event task                | (eg. event Meeting /at Library, 12PM) |\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   list       |                List all the task in your planner   |                                       |\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   done       |                Mark a task as completed            | (eg. done 2)                          |\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   find       |                Find task with keyword              | (eg. find book)                       |\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   reset      |                reset program and Tasklist.txt      |                                       |\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   bye        |                Exit Planner                        |                                       |\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|   help       |                Show this table                     |                                       |\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"|______________|____________________________________________________|_______________________________________|\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"LEGEND:   [O] ---- DONE | [X] ---- NOT DONE \\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                                             + \"Please key in your command: \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Print greeting message when program is launched"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void showStartMessages(){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        printToUser("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                DIVIDER,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                LOGO,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                VERSION,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                DIVIDER,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                MESSAGE_WELCOME,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                DIVIDER,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                FUNCTION_LIST);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * Show the help functions table"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void showFunctionList(){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        printToUser("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "                FUNCTION_LIST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * A printer to print the String of message"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     * @param message String of message to be printed"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public void printToUser(String... message){"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        for(String m : message){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "            out.println(m);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public DisplayUI() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    public DisplayUI(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 84
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "Potatochips"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "todo borrow book list"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "todo watch movie"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "delete 3"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "list"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 20
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\Exceptions\\*.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": " java -Dfile.encoding\u003dUTF-8 -classpath ..\\bin Duke \u003c input.txt \u003e EXPECTED.TXT"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxianglim"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "yuxianglim": 27
    }
  }
]
