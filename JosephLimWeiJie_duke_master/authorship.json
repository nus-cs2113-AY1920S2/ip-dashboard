[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "By: `JosephLimWeiJie` Since: `Feb 2019`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [2. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [3. Features](#features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.1. Adding a task:](#addtask) `add`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.2. Listing all tasks:](#list) `list`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.3. Finding a task:](#find) `find`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.4. Deleting a task:](#delete) `delete`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.5. Filter tasks by date:](#filter) `filter`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.6. Complete a task:](#complete) `done`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.7. Exiting the program:](#exit) `bye`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [4. FAQ](#faq)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [5. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##  1. Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/75109414-a9446300-565d-11ea-938e-8bcc5e3c0bc7.PNG\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Duke is for those who prefer to use a desktop app to keep track of their to-do lists. More importantly, Duke is **optimized for those who prefer to work with a Command Line Interface (CLI)**. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Jump to [_Section 2, \"Quick Start\"_](#quick-start) to get started."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   1. Ensure that `Java 11` or above is installed in your Computer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   2. Download the latest `duke.jar` [_here_](https://github.com/JosephLimWeiJie/duke/releases/download/v0.2.0/duke.jar)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   3. Copy the file to the folder you want to use as the home folder for your Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   4. Double-click on `duke.jar` to start the app. It should appear in a few seconds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   5. Type in a command and press `ENTER` to execute it. For e.g. typing `list` and                         pressing enter will list all your current tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   6. Some other commands you can try:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *  `todo return book`: adds a todo task to return a book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `deadline Finish a movie /by 2019-12-01T10:00`: adds a deadline task to finish a movie by 1 Dec 2019 at 1000 hrs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `event Midnight Party /at Marina Bay Sands`: adds an event task to attend a midnight party at Marina Bay Sands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `done 1`: Mark the first task as done shown in the current list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `bye`: Exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   7. Refer to [_Section 3, \"Features\"_](#features) for more details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. in `todo TASK_DESCRIPTION`, TASK_DESCRIPTION is a parameter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    to specify a task\u0027s description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* For a general todo task, a task description MUST be added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. in `todo TASK_DESCRIPTION`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* For a deadline task, a date MUST be added right after the TASK_DESCRIPTION by using /by. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. `deadline complete homework /by YYYY-MM-DDTHH:mm` such as 2020-01-12T23:59. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  Note that you have to add \u0027T\u0027 between the date and the time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* For an event task, an event start and end date and time MUST be added "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  right after the TASK_DESCRIPTION by using /on."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. in `event TASK_DESCRIPTION /on YYYY-MM-DDTHH:mm to YYYY-MM-DDTHH:mm` "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "         such as 2020-01-12T10:00 to 2020-01-12T11:00`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  Note that you have to add \u0027T\u0027 between the date and the time.    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"addtask\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.1 Adding a task: `add`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Adds a task into Duke."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Format**: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `deadline TASK_DESCRIPTION /by DATE_TIME`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `event TASK_DESCRIPTION /on START_DATE_TIME to END_DATE_TIME`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Examples**:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `todo return book`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `deadline Thesis submission /by 2020-01-12T23:59`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `event Wedding Ceremony /on 2020-01-12T11:00 to 2020-01-12T12:00`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.2. Listing all tasks: `list`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Shows a list of all the tasks in Duke."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `list`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"find\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.3 Finding a task: `find`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Finds tasks that contain a given keyword."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format** : `find KEYWORD`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Example**: `find book`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.4 Deleting a task: `delete`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Deletes a specified task from Duke."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `delete INDEX`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * Deletes the task at the specified INDEX."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * The index refers to the index number shown on the displayed task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * The index must be a positive number 1,2,3,..."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"filter\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.5 Filter tasks by date: `filter`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Filters tasks based on a given DATE."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `filter DATE`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Example**: `filter 2019-01-01`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Note that the month and date MUST be in 2 digits. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  If a date occurs on 1 Jan 2019, you have to add a ZERO in front. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"complete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.6 Complete a task: `done`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Marks a task as completed at the specified INDEX."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `done INDEX`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* The index refers to the index number shown on the displayed task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* The index must be a positive number 1,2,3,.."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.7 Exiting the program: `bye`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `bye`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"faq\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*Q:* How do I transfer my data onto another computer?"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*A:* Download or copy the previous `Duke.jar` onto the other computer and copy the `storage.txt` from the previous Duke folder onto your current new folder containing the `Duke.jar`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Add "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * Format: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `deadline TASK_DESCRIPTION /by DATE_TIME`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `event TASK_DESCRIPTION /on START_DATE_TIME to END_DATE_TIME`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `todo return book`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `deadline Thesis submission /by 2020-01-12T23:59`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `event Wedding Ceremony /on 2020-01-12T11:00 to 2020-01-12T12:00`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* List: `list`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Find: `find KEYWORD`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `find book`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Filter: `filter DATE`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `filter 2019-01-01`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Delete: `delete INDEX`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `delete 2`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Complete: `done INDEX`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `done 1`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "   "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Exit: `bye`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 185,
      "-": 8
    }
  },
  {
    "path": "data/storage.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 0 | cry"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 0 | qwrqwf | wqrwqr"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 1 | sleep"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 0 | fwqqw | wqrqwr"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 0 | seqwr"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 0 | wqrwqr"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 1 | qwfqw | wqrqw"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 11
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "# Duke - User Guide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "By: `JosephLimWeiJie` Since: `Feb 2019`"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [1. Introduction](#introduction)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [2. Quick Start](#quick-start)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [3. Features](#features)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.1. Adding a task:](#addtask) `add`"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.2. Listing all tasks:](#list) `list`"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.3. Finding a task:](#find) `find`"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.4. Deleting a task:](#delete) `delete`"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.5. Filter tasks by date:](#filter) `filter`"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.6. Complete a task:](#complete) `done`"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    + [3.7. Exiting the program:](#exit) `bye`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [4. FAQ](#faq)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* [5. Command Summary](#command-summary)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"introduction\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "##  1. Introduction"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003cp align\u003d\"center\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  \u003cimg src\u003d\"https://user-images.githubusercontent.com/59989652/75109414-a9446300-565d-11ea-938e-8bcc5e3c0bc7.PNG\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003c/p\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Duke is for those who prefer to use a desktop app to keep track of their to-do lists. More importantly, Duke is **optimized for those who prefer to work with a Command Line Interface (CLI)**. "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Jump to [_Section 2, \"Quick Start\"_](#quick-start) to get started."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"quick-start\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 2. Quick Start"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   1. Ensure that `Java 11` or above is installed in your Computer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   2. Download the latest `duke.jar` [_here_](https://github.com/JosephLimWeiJie/duke/releases/download/v0.2.0/duke.jar)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   3. Copy the file to the folder you want to use as the home folder for your Duke."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   4. Double-click on `duke.jar` to start the app. It should appear in a few seconds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   5. Type in a command and press `ENTER` to execute it. For e.g. typing `list` and                         pressing enter will list all your current tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   6. Some other commands you can try:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *  `todo return book`: adds a todo task to return a book"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `deadline Finish a movie /by 2019-12-01T10:00`: adds a deadline task to finish a movie by 1 Dec 2019 at 1000 hrs."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `event Midnight Party /at Marina Bay Sands`: adds an event task to attend a midnight party at Marina Bay Sands"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `done 1`: Mark the first task as done shown in the current list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    *   `bye`: Exits the app"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*   7. Refer to [_Section 3, \"Features\"_](#features) for more details of each command."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 3. Features"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Command Format**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. in `todo TASK_DESCRIPTION`, TASK_DESCRIPTION is a parameter"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    to specify a task\u0027s description."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* For a general todo task, a task description MUST be added"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. in `todo TASK_DESCRIPTION`."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* For a deadline task, a date MUST be added right after the TASK_DESCRIPTION by using /by. "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. `deadline complete homework /by YYYY-MM-DDTHH:mm` such as 2020-01-12T23:59. "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  Note that you have to add \u0027T\u0027 between the date and the time."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* For an event task, an event start and end date and time MUST be added "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  right after the TASK_DESCRIPTION by using /on."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  * e.g. in `event TASK_DESCRIPTION /on YYYY-MM-DDTHH:mm to YYYY-MM-DDTHH:mm` "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "         such as 2020-01-12T10:00 to 2020-01-12T11:00`."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  Note that you have to add \u0027T\u0027 between the date and the time.    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"addtask\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.1 Adding a task: `add`"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Adds a task into Duke."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Format**: "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `deadline TASK_DESCRIPTION /by DATE_TIME`"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `event TASK_DESCRIPTION /on START_DATE_TIME to END_DATE_TIME`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* **Examples**:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `todo return book`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `deadline Thesis submission /by 2020-01-12T23:59`"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * `event Wedding Ceremony /on 2020-01-12T11:00 to 2020-01-12T12:00`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.2. Listing all tasks: `list`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Shows a list of all the tasks in Duke."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `list`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"find\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.3 Finding a task: `find`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Finds tasks that contain a given keyword."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format** : `find KEYWORD`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Example**: `find book`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.4 Deleting a task: `delete`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Deletes a specified task from Duke."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `delete INDEX`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * Deletes the task at the specified INDEX."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * The index refers to the index number shown on the displayed task list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * The index must be a positive number 1,2,3,..."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"filter\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.5 Filter tasks by date: `filter`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Filters tasks based on a given DATE."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `filter DATE`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Example**: `filter 2019-01-01`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Note that the month and date MUST be in 2 digits. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  If a date occurs on 1 Jan 2019, you have to add a ZERO in front. "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"complete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.6 Complete a task: `done`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Marks a task as completed at the specified INDEX."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `done INDEX`"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* The index refers to the index number shown on the displayed task list."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* The index must be a positive number 1,2,3,.."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "```"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "### 3.7 Exiting the program: `bye`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "**Format**: `bye`"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"faq\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 4. FAQ"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*Q:* How do I transfer my data onto another computer?"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "*A:* Download or copy the previous `Duke.jar` onto the other computer and copy the `storage.txt` from the previous Duke folder onto your current new folder containing the `Duke.jar`."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003ca name\u003d\"command-summary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "## 5. Command Summary"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Add "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * Format: "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `todo TASK_DESCRIPTION`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `deadline TASK_DESCRIPTION /by DATE_TIME`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `event TASK_DESCRIPTION /on START_DATE_TIME to END_DATE_TIME`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `todo return book`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `deadline Thesis submission /by 2020-01-12T23:59`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        * `event Wedding Ceremony /on 2020-01-12T11:00 to 2020-01-12T12:00`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* List: `list`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Find: `find KEYWORD`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `find book`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Filter: `filter DATE`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `filter 2019-01-01`"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Delete: `delete INDEX`"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `delete 2`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Complete: `done INDEX`"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    * e.g. `done 1`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "   "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "* Exit: `bye`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 186,
      "-": 7
    }
  },
  {
    "path": "src/main/java/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_END_OF_INPUT_FILE;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.InvalidCommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.InvalidTaskArgumentException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import storage.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import storage.Storage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import storage.StorageReadWriteException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import ui.Ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Initializes the program and takes command from the user."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * @author JosephLimWeiJie"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Duke duke;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Storage storage;   "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Driver code for the program. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static void main(String... args) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        new Main().run(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Runs the program until the user terminates it. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void run(String[] args) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        start(args);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        runCommandUntilExit();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        exit();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Initializes the required classes, loads any data from storage text file and "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * prints a welcome message. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param args Arguments to be provided by the user at program launch."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws RuntimeException If the storage text file does not have a "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                          .txt extension or cannot be read or overwritten."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void start(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.storage \u003d new Storage();           "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.duke \u003d new Duke(storage.load());  "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ui.displayWelcomeMessage();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (InvalidStorageFilePathException | StorageReadWriteException e) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            ui.displayErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Processes user command and execute until an exit command is given. */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void runCommandUntilExit() {                     "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        while (true) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Command command;                          "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            try {        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                String commandText \u003d ui.getCommand();                 "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayBorder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                command \u003d new Parser().parseCommand(commandText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                if (ExitCommand.isExit(command)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                CommandResult output \u003d executeCommand(command, this.duke);                 "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayOutputMessage(output);             "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } catch (InvalidTaskArgumentException e) {                "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } catch (InvalidCommandException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayErrorMessage(e.getMessage());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } catch (NoSuchElementException nsee) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                // Used only for testing runtest.bat reads from an input file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayErrorMessage(MESSAGE_END_OF_INPUT_FILE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                exit();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } finally {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                ui.displayBorder();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Executes a command and save the result onto storage text file. */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private CommandResult executeCommand(Command command, Duke duke) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            CommandResult output \u003d command.execute(this.duke);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            storage.save(storage.getFilePath(), duke.getTaskList());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return output;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new RuntimeException(ioe);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Exits the program with a goodbye message. */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void exit() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        ui.displayExitMessage();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }    "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 111
    }
  },
  {
    "path": "src/main/java/command/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INVALID_TASK_TYPE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_ADD_COMMAND_INVALID_TASK_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_ADD_COMMAND_INVALID_TASK_REQUIREMENT_DEADLINES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_ADD_COMMAND_INVALID_TASK_REQUIREMENT_EVENTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Events;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.InvalidTaskArgumentException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.ToDos;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027Add\u0027 functionality of a command. An AddCommand contains"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * arguments to create a Task, which will then be pass onto Duke to execute the "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * command. An IllegalTaskArguments will be thrown if the arguments within the "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * command are invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Refers to task\u0027s keywords such as \u0027todo\u0027, \u0027deadline\u0027 or \u0027events\u0027. */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String taskType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Refers to an optional description of a task. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cString\u003e taskDescription;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Refers to an optional deadline requirement needed for a task. */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e taskDeadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Refers to an optional starting date and time needed for a task. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e taskStartDateTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Refers to an optional ending date and time needed for a task. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e taskEndDateTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Task task;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An AddCommand constructor for a ToDos task. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public AddCommand(String taskType, Optional\u003cString\u003e taskDescription) {       "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.task \u003d makeTask(taskType, taskDescription, taskDeadline, "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskStartDateTime, taskEndDateTime);        "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An AddCommand constructor for a Deadlines task. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public AddCommand(String taskType, Optional\u003cString\u003e taskDescription, "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskDeadline) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.task \u003d makeTask(taskType, taskDescription, taskDeadline, "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskStartDateTime, taskEndDateTime);        "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An AddCommand constructor for an Events task. */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public AddCommand(String taskType, Optional\u003cString\u003e taskDescription,  "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskStartDateTime,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskEndDateTime) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskType \u003d taskType;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d taskStartDateTime;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d taskEndDateTime;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.task \u003d makeTask(taskType, taskDescription, taskDeadline, "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskStartDateTime, taskEndDateTime);        "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Creates a task based on task arguments encapsulated within the AddCommand Object. "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidTaskArgumentException If any of the arguments are blank entries."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Task makeTask(String taskType, Optional\u003cString\u003e taskDescription, "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskDeadline, "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskStartDateTime,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskEndDateTime) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (taskDescription.get().isBlank()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_ADD_COMMAND_INVALID_TASK_DESCRIPTION);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        switch(taskType) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"todo\":                      "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            task \u003d new ToDos(TaskList.taskIdCounter, taskDescription.get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (taskDeadline.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        MESSAGE_ADD_COMMAND_INVALID_TASK_REQUIREMENT_DEADLINES);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            task \u003d new Deadlines(TaskList.taskIdCounter, taskDescription.get(), "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    taskDeadline.get());         "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (taskStartDateTime.isEmpty() || taskEndDateTime.isEmpty()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        MESSAGE_ADD_COMMAND_INVALID_TASK_REQUIREMENT_EVENTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            task \u003d new Events(TaskList.taskIdCounter, taskDescription.get(), "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    taskStartDateTime.get(), taskEndDateTime.get());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException(MESSAGE_INVALID_TASK_TYPE);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duke.executeAddCommand(task); "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_SUCCESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 133
    }
  },
  {
    "path": "src/main/java/command/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an abstract command. A command can be executed by"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * specifying Duke as a parameter, which will return a CommandResult."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Executes a command based on the command type."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param duke Takes in duke to process the command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return The result of executing the command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public abstract CommandResult execute(Duke duke);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 19
    }
  },
  {
    "path": "src/main/java/command/CommandResult.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the result after executing a command. A CommandResult"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * contains a string description of a result that will be used by the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Ui to display to the user. As CommandResult is the final stage of "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * executing a command, an IllegalStateException will be thrown when "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * executing a CommandResult."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class CommandResult extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** String representation of a result after executing. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public final String commandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor for the CommandResult."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param commandResult A String description of a command result after"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                      a command is being executed. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult(String commandResult) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.commandResult \u003d commandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getCommandResult() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.commandResult;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        throw new IllegalStateException(\"Cannot execute a Command Result\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 36
    }
  },
  {
    "path": "src/main/java/command/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_DELETE_COMMAND_MISSING_TASKID;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027Delete\u0027 functionality of a command. A DeleteCommand contains"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * a TaskID that will be pass onto Duke to delete a task that matches this"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * TaskID. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The unique ID of a task. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of the DeleteCommand. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of a task that is to be deleted."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidCommandException If a taskId is a blank entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public DeleteCommand(Optional\u003cString\u003e taskId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasTaskId \u003d taskId.get().isBlank();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasTaskId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.taskId \u003d Integer.parseInt(taskId.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidCommandException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_DELETE_COMMAND_MISSING_TASKID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duke.executeDeleteCommand(this.taskId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 43
    }
  },
  {
    "path": "src/main/java/command/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_DONE_COMMAND_MISSING_TASKID;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027Done\u0027 functionality of a command. A DoneCommand contains"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * a TaskID that will be pass onto Duke to complete a task that matches this"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * TaskID.  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class DoneCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The unique ID of a task. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int taskId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a DoneCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of a task that is to be completed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidCommandException If the Id of a task is a blank entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public DoneCommand(Optional\u003cString\u003e taskId) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasTaskId \u003d taskId.get().isBlank();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasTaskId) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.taskId \u003d Integer.parseInt(taskId.get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidCommandException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_DONE_COMMAND_MISSING_TASKID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duke.executeDoneCommand(this.taskId);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_SUCCESS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 43
    }
  },
  {
    "path": "src/main/java/command/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_EXIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027Exit\u0027 functionality of a command. This command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * serves to exit the program upon executed.  "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if a Command is an ExitCommand. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static boolean isExit(Command command) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return command instanceof ExitCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_EXIT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 23
    }
  },
  {
    "path": "src/main/java/command/FilterCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_FILTER_COMMAND_MISSING_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027Filter\u0027 functionality of a command. A FilterCommand contains"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * a date that will be pass onto Duke to filter tasks based on the given date.  "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class FilterCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A String representation of a date that serves as a predicate. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor for a FilterCommand."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param date A date to be used as a predicate for filtering tasks."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidCommandException If the given date is a blank entry."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public FilterCommand(Optional\u003cString\u003e date) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasDate \u003d date.get().isBlank();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasDate) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.date \u003d date.get();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidCommandException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_FILTER_COMMAND_MISSING_DATE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duke.executeFilterCommand(date);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 42
    }
  },
  {
    "path": "src/main/java/command/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_FIND_COMMAND_MISSING_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027Find\u0027 functionality of a command. A FindCommand contains"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * a keyword that will be pass onto Duke to find tasks that contains this"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * keyword.  "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a FindCommand."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param keyword A keyword that is used to find tasks that contains this word. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidCommandException If the given keyword is a blank entry."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public FindCommand(Optional\u003cString\u003e keyword) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean hasKeyword \u003d keyword.get().isBlank();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!hasKeyword) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.keyword \u003d keyword.get();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidCommandException(MESSAGE_FIND_COMMAND_MISSING_KEYWORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duke.executeFindCommand(keyword);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_SUCCESS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 42
    }
  },
  {
    "path": "src/main/java/command/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an exception of an invalid command. This serves to "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * inform the user that the command word entered in the launch arguments"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class InvalidCommandException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public InvalidCommandException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 14
    }
  },
  {
    "path": "src/main/java/command/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package command;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_SUCCESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.Duke;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the \u0027List\u0027 functionality of a command. A ListCommand does"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * not take in any parameter. It\u0027s function is to instruct duke to"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * list all current outstanding tasks that are stored in the storage file.  "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * An empty constructor for a ListCommand that is needed for the "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * parseCommand() in the Parser class.  "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */ "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public ListCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public CommandResult execute(Duke duke) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        duke.executeListCommand();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new CommandResult(MESSAGE_COMMAND_RESULT_SUCCESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 27
    }
  },
  {
    "path": "src/main/java/data/storage.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 0 | cry"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 0 | qwrqwf | wqrwqr"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 1 | sleep"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 7
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the main processor of the program. Duke executes a given"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * command and perform operations such as adding or deleting tasks "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * on its internal TaskList."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Note that Duke has only one final TaskList. Any command executed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * that causes a state change in this TaskList will have to clear the"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * current TaskList and perform a deep copy of the manipulated "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * TaskList derived into its current TaskList."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The internal TaskList stored in Duke\u0027s object. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of Duke, if given a new TaskList."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param newTaskList A new TaskList that is to be deep copied "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                    into Duke\u0027s current taskList."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Duke(TaskList newTaskList) {         "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList \u003d new TaskList(newTaskList);       "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructor of Duke when the program initializes. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList \u003d new TaskList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void executeFindCommand(String keyword) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList.findTask(keyword);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void executeFilterCommand(String date) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList.filterTask(date);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void executeDeleteCommand(int taskId) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList.deleteTask(taskId);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void executeListCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList.listTask();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void executeDoneCommand(int taskId) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList.completeTask(taskId);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void executeAddCommand(Task task) {   "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList.addTask(task);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public TaskList getTaskList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskList;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 63,
      "-": 1
    }
  },
  {
    "path": "src/main/java/duke/task/Deadlines.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates the information of a deadline. A Deadline task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * contains a description, a TaskID, a deadline requirement represented "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * using taskDeadline and a boolean status to denote if it is completed or not."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Deadlines extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A taskDeadline to represent a deadline requirement for a task. */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final LocalDateTime taskDeadline;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a Deadlines task. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of the task to be constructed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskDecription The description of the task to be constructed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskDeadline The deadline of the task to be constructed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param isDone The completion status of the task to be constructed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Deadlines(int taskId, String taskDescription, "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime taskDeadline, boolean isDone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(taskId, taskDescription, isDone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**  Constructs a Deadlines task. This is used for makeTask() in the AddCommand. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Deadlines(int taskId, String taskDescription, LocalDateTime taskDeadline) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(taskId, taskDescription);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getDate() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .ofNullable(this.taskDeadline"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toLocalDate()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getTime() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .ofNullable(this.taskDeadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toLocalTime()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Set the ID of the task."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param newTaskId The new task ID to be set."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable Deadline task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Task setNewTaskId(int newTaskId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Deadlines(newTaskId, this.taskDescription, "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                this.taskDeadline, this.isDone);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a deadline task completion status using tick and cross symbols. */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String taskWithSymbol() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return \"[D]\" "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((this.isDone) ? Task.tickSymbol : Task.crossSymbol)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" \" "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskDescription;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Completes the task by changing completion status to be true."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable completed deadline task."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Deadlines makeDone() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Deadlines(this.taskId, this.taskDescription, "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                this.taskDeadline, true);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a deadline task. */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskId "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \".\" "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskWithSymbol()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" (by: \" "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskDeadline.format("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 97
    }
  },
  {
    "path": "src/main/java/duke/task/Events.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates the information of an Event. An Events task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * contains a description, a TaskID, a duration represented using"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * taskStartDateTime and taskEndDateTime and a boolean status to denote "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * if it is completed or not."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Events extends Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final LocalDateTime taskStartDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final LocalDateTime taskEndDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of an Events task."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of the task to be constructed."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskDecription The description of the task to be constructed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskStartDateTime The starting date and time of the event."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskEndDateTime The ending date and time of the event."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param isDone The completion status of the task to be constructed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Events(int taskId, String taskDescription, "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime taskStartDateTime, LocalDateTime taskEndDateTime,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            boolean isDone) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(taskId, taskDescription, isDone);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d taskStartDateTime;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d taskEndDateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**  Constructs an Events task. This is used for makeTask() in the AddCommand. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Events(int taskId, String taskDescription, LocalDateTime taskStartDateTime,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime taskEndDateTime) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(taskId, taskDescription);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d taskStartDateTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d taskEndDateTime;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getStartDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .ofNullable(this.taskStartDateTime"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toLocalDate()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getStartTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .ofNullable(this.taskStartDateTime"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toLocalTime()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "   "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getEndDate() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .ofNullable(this.taskEndDateTime"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toLocalDate()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getEndTime() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .ofNullable(this.taskEndDateTime"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toLocalTime()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .toString());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Set the ID of the task."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param newTaskId The new task ID to be set."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable task."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Task setNewTaskId(int newTaskId) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Events(newTaskId, this.taskDescription, "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                this.taskStartDateTime, this.taskEndDateTime, this.isDone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a deadline task with tick and cross symbols. */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String taskWithSymbol() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return \"[E]\" "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((this.isDone) ? Task.tickSymbol : Task.crossSymbol)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" \" "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskDescription;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Completes the task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable completed task."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Events makeDone() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Events(this.taskId, this.taskDescription, "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                this.taskStartDateTime, this.taskEndDateTime, true);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of an event task. */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskId "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \".\"  "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskWithSymbol()"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" (on: \" "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskStartDateTime.format("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskEndDateTime.format("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        DateTimeFormatter.ofPattern(\"MMM d yyyy HH:mm\"))"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \")\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 122
    }
  },
  {
    "path": "src/main/java/duke/task/InvalidTaskArgumentException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an exception pertaining to invalid task arguments."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This exception is thrown when arguments of a task are not in the correct "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * format specified by the Task constructor."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class InvalidTaskArgumentException extends IllegalArgumentException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public InvalidTaskArgumentException(String message) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 14
    }
  },
  {
    "path": "src/main/java/duke/task/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates the information of a task. A task contains"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * a description, a TaskID and a boolean status to denote "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * if it is completed or not."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The description of a task. */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected final String taskDescription;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The unique ID of a task. */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected final int taskId;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Represents whether a task is done or not. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A tick symbol to represent a completed task. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected static final String tickSymbol \u003d \"[/]\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A cross symbol to represent an incomplete task. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected static final String crossSymbol \u003d \"[X]\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a immutable task."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of the task to be created."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskDescription The description of the task to be created."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param isDone The status of the task to be created."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected Task(int taskId, String taskDescription, boolean isDone) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructs an immutable incomplete task."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of the task to be created."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskDescription The description of the task to be created."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    protected Task(int taskId, String taskDescription) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskId \u003d taskId;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public int getTaskId() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskId;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getTaskName() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskDescription;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean getDoneStatus() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Set the ID of the task."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param newTaskId The new task ID to be set."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable task."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Task setNewTaskId(int newTaskId) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Task(newTaskId, this.taskDescription, this.isDone);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a task completion status using tick and cross symbols. */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String taskWithSymbol() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return ((this.isDone) ? tickSymbol : crossSymbol)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"   \" "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskDescription;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Completes the task."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable completed task."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Optional\u003cString\u003e getDate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional.empty();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Task makeDone() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Task(this.taskId, this.taskDescription, true);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if both tasks has the same taskId. */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (obj instanceof Task) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Task task \u003d (Task) obj;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return task.taskId \u003d\u003d this.taskId;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a task object. */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskId + \".\" + this.taskWithSymbol();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 113
    }
  },
  {
    "path": "src/main/java/duke/task/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_LIST_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_DONE_COMMNAND_INDEX_OUT_OF_BOUNDS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_FIND_COMMAND_TASK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_FILTER_TASK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INCORRECT_DATE_FORMAT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates the information of a TaskList. "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Stores an internal List\u003cTask\u003e that is manipulated based on"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Duke\u0027s command execution. "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Represents the first element index of the List\u003cTask\u003e. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public final int FIRST_ELEMENT_INDEX \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A counter that represents the number of tasks in List\u003cTask\u003e. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int taskIdCounter \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An internal storage of List of Task. */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final List\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor for a new TaskList."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Takes in a previous TaskList that is already manipulated and updates "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the current TaskList by deep-copying the previous one."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param previousTaskList The previous TaskList to be deep copied over."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return An updated TaskList after a deep copy of previous TaskList."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public TaskList(TaskList previousTaskList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks \u003d previousTaskList.getTasks()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Initializes the List\u003cTask\u003e. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public List\u003cTask\u003e getTasks() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Find all tasks in the List\u003cTask\u003e containing a given keyword and display to user. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void findTask(String keyword) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(MESSAGE_FIND_COMMAND_TASK);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            .filter(task -\u003e task.getTaskName()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .contains(keyword))"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            .forEachOrdered(System.out::println);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Filter tasks based on a given date. As each type of task contains optional"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * parameters, there are 2 rounds of filter. The first round of filter filters"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * away tasks that contains empty parameters. The second round of filter filters"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * away tasks whose date does not match the required given date. Then, display"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the results to the user. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param date The date to be filtered against the List\u003cTask\u003e."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws DateTimeParseException If the given date cannot be parsed into a"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                LocalDateTime object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void filterTask(String date) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDate.parse(date);            "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(MESSAGE_COMMAND_FILTER_TASK);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            this.tasks.stream()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .filter(task -\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    if (task instanceof ToDos || task instanceof Deadlines) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        return task.getDate().isPresent();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    } else if (task instanceof Events) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        return ((Events) task).getStartDate().isPresent() "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                                || ((Events) task).getEndDate().isPresent();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                })"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .filter(task -\u003e {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    if (task instanceof Deadlines) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        String deadlineDate \u003d ((Deadlines) task).getDate().get();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        return deadlineDate.equals(date);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    } else if (task instanceof Events) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        String eventStartDate \u003d ((Events) task).getStartDate().get();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        String eventEndDate \u003d ((Events) task).getEndDate().get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        return (eventStartDate.equals(date) || eventEndDate.equals(date));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                })"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .forEachOrdered(System.out::println);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_INCORRECT_DATE_FORMAT);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }       "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** List all tasks currently in the List\u003cTask\u003e and display to the user. */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void listTask() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(MESSAGE_COMMAND_LIST_TASK);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.stream()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .forEachOrdered(System.out::println);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(\"\\n\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Deletes a task within List\u003cTask\u003e based on a given task ID."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Throws an IndexOutOfBoundsexception if the List\u003cTask\u003e does "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * not contain that ID."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index given by the user exceeds"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                   size of List\u003cTask\u003e."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void deleteTask(int taskId) throws IndexOutOfBoundsException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (taskId \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new IndexOutOfBoundsException("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_DONE_COMMNAND_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Task deleteTask \u003d getDeletedTask(taskId);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        TaskList.taskIdCounter--;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        createDeleteTaskMessage(deleteTask);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.remove(taskId - 1); "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        reorderTask();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Reorder the tasks within List\u003cTask\u003e according to ascending task IDs. */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void reorderTask() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int newIndex \u003d 1;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Task currentTask \u003d this.tasks.get(i);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Task newTask \u003d currentTask.setNewTaskId(newIndex);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            newTasks.add(newTask);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            newIndex++;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.addAll(newTasks);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Completes a task based on a given task ID."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Throws an IndexOutOfBoundsException if the List\u003cTask\u003e does not "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * contain that ID."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of the task to be completed."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws IndexOutOfBoundsException If the index given by the user exceeds"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                   size of List\u003cTask\u003e."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void completeTask(int taskId) throws IndexOutOfBoundsException {  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (taskId \u003e this.tasks.size()) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new IndexOutOfBoundsException("
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_DONE_COMMNAND_INDEX_OUT_OF_BOUNDS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cTask\u003e newTasks \u003d this.tasks.stream()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(task -\u003e {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    return ((task.getTaskId() \u003d\u003d taskId) ? task.makeDone() : task);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                })"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        createCompleteTaskMessage(taskId);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.clear();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.addAll(newTasks);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Adds a task into the List\u003cTask\u003e. */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void addTask(Task task) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        createAddTaskMessage(task);     "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        TaskList.taskIdCounter++;       "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Silent loads a task from the storage file into the List\u003cTask\u003e. */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void loadTask(Task task) {    "
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.tasks.add(task);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        TaskList.taskIdCounter++;       "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Task getDeletedTask(int taskId) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Task task \u003d this.tasks"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .filter(x -\u003e x.getTaskId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(x -\u003e x)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(FIRST_ELEMENT_INDEX);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Task getCompletedTask(int taskId) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Task task \u003d this.tasks"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .filter(x -\u003e x.getTaskId() \u003d\u003d taskId)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .map(x -\u003e x.makeDone())"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .collect(Collectors.toList())"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(FIRST_ELEMENT_INDEX);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Generates a delete task message after deleting a task. */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void createDeleteTaskMessage(Task task) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String output \u003d (\"Nice! I\u0027ve removed this task:\\n\""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"  \" "
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + task"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\\nNow you have \" "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (this.tasks.size() - 1)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Generates a complete task message after completing a task. */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void createCompleteTaskMessage(int taskId) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String output \u003d (\"Nice! I\u0027ve marked this task as done:\\n\""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"  \" "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + getCompletedTask(taskId).taskWithSymbol()"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (\"\\n\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(output);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Generates an add task message after adding a task. */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private void createAddTaskMessage(Task task) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String message \u003d \"\";"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        message +\u003d (\"Got it. I\u0027ve added this task:\\n\""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"  \" "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + task"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\\nNow you have \" "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + TaskList.taskIdCounter"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" tasks in the list.\\n\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 254
    }
  },
  {
    "path": "src/main/java/duke/task/ToDos.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package duke.task;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates the information of a To-Do task. A ToDos task "
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * contains a description, a TaskID and a boolean status to denote "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * if it is completed or not."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class ToDos extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a ToDos task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskId The ID of the task to be constructed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskDecription The description of the task to be constructed."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param isDone The completion status of the task to be constructed."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public ToDos(int taskId, String taskDescription, boolean isDone) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(taskId, taskDescription, isDone);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**  Constructs a ToDos task. This is used for makeTask() in the AddCommand. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public ToDos(int taskId, String taskDescription) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(taskId, taskDescription);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Set the ID of the task."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param newTaskId The new task ID to be set."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable To-Do task."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Task setNewTaskId(int newTaskId) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new ToDos(newTaskId, this.taskDescription, this.isDone);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a ToDos task completion status using tick and cross symbols. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String taskWithSymbol() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return \"[T]\" "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((this.isDone) ? Task.tickSymbol : Task.crossSymbol)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" \" "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskDescription;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Completes the task by changing completion status to be true."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new immutable completed task."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public ToDos makeDone() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new ToDos(this.taskId, this.taskDescription, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a ToDos task. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.taskId "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \".\" "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + this.taskWithSymbol();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 64
    }
  },
  {
    "path": "src/main/java/misc/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package misc;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates all string representation of messages used by the program."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_WELCOME \u003d "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            \" ____        _        \\n\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"|____/ \\\\__,_|_|\\\\_\\\\___| v0.2.0 \\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"\\nHello! I\u0027m Duke!\" "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"\\nWhat can I do for you today?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_EXIT \u003d \"Duke has been closed successfully.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_RESULT \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! It seems like that is not a valid command...\\n\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_COMMAND_LIST_TASK \u003d \"Here are the tasks in your list:\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_COMMAND_RESULT_SUCCESS \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_COMMAND_RESULT_FAILURE \u003d \"Oops! Something went wrong. Let me find out why..........\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_COMMAND_RESULT_EXIT \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Bye! Hope to see you again soon!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_ADD_COMMAND_INVALID_TASK_DESCRIPTION \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a description to your task.\"; "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_ADD_COMMAND_INVALID_TASK_REQUIREMENT_DEADLINES \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a date to your deadline\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_ADD_COMMAND_INVALID_TASK_REQUIREMENT_EVENTS \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a start date or an end date to your event?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_DONE_COMMNAND_INDEX_OUT_OF_BOUNDS \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! There is no current task with that index...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_FIND_COMMAND_TASK \u003d \"Here are the matching tasks in your list:\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_COMMAND_FILTER_TASK \u003d \"Here are the tasks occuring on this date:\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_INVALID_TASK_TYPE \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! I cannot understand the type of the task given.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_READ_WRITE_FAILURE \u003d \"Make sure you have a \u0027data\u0027 folder containing a storage.txt file.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_CANNOT_WRITE_TASK \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! The current task cannot be written to file.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DATE_FORMAT \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the date in the following format: YYYY-MM-DD\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_INCORRECT_TASK_INPUT \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the information of a task in the correct format. \\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: todo return book \\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: deadline finish essay /by 2020-12-01T10:00 \\\\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: event Midnight Party /on 2020-12-01T10:00 to 2020-12-01T12:00\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_INCORRECT_DEADLINE_INPUT \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the deadline date and time in the following format: YYYY-MM-DDTHH:mm. \\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: 2020-12-01T10:00\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_INCORRECT_EVENT_INPUT \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the starting event date and time followed by the event ending date and time in the following format: YYYY-MM-DDTHH:mm to YYYY-MM-DDTHH:mm. \\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: 2020-12-01T10:00 to 2020-12-01T12:00\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_EVENT_MISSING_START_DATE_TIME \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter your event starting date and time.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_EVENT_MISSING_END_DATE_TIME \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter your event ending date and time.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_EVENT_MISSING_WORD_TO \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! You forgot to enter a \u0027to\u0027 between your event starting and ending date and time.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_CORRUPTED_STORAGE_FILE \u003d \"The storage.txt file in the current directory is corrupted, You may wish to delete the current storage.txt file and run the program again. \\nIf the current storage.txt file was transferred from another computer, you may want to re-transfer a copy of your storage.txt file from your previous computer. \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_END_OF_INPUT_FILE \u003d \"You have reached the end of input file in your testing.\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_FIND_COMMAND_MISSING_KEYWORD \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a keyword so that I can search the current list of tasks.\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_FILTER_COMMAND_MISSING_DATE \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a date so that I can search the current list of tasks.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_DONE_COMMAND_MISSING_TASKID \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a task index so that I can mark that as done.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String MESSAGE_DELETE_COMMAND_MISSING_TASKID \u003d \"\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a task index so that I can delete that.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 73
    }
  },
  {
    "path": "src/main/java/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INCORRECT_DEADLINE_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INCORRECT_TASK_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INVALID_COMMAND_RESULT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INCORRECT_EVENT_INPUT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_EVENT_MISSING_START_DATE_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_EVENT_MISSING_END_DATE_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_EVENT_MISSING_WORD_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.stream.IntStream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.Command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.DoneCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.FilterCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.InvalidCommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.ListCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.InvalidTaskArgumentException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/** "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents a Parser used by the program to parse user inputs."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * A user input is broken down into a commandWord to create a command pertaining"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * to the command word used. The rest of the inputs given by the user will then be "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * parsed into optional arguments to construct a task."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Each string will be split into a word array to carry different arguments."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * For example: todo return book will be split into wordArray \u003d {[todo], [return book]}. "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This explains the relative position index that indicates the specific commandWord"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * and the following optional task arguments."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the commandWord. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int COMMAND_INDEX \u003d 0;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string array that stores all possible preposition used by the user. */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String[] prepositionArray \u003d {\"/by\", \"/on\"};"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Refers to possible command keywords such as \u0027list\u0027, \u0027delete\u0027, \u0027todo\u0027 etc. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An optional string to represent the description given for a task. */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cString\u003e taskDescription;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An optional string to represent the deadline via date and time stated for a deadline. */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e taskDeadline;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An optional string to represent the starting date and time for an event. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e taskStartDateTime;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** An optional string to represent the ending date and time for an event. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Optional\u003cLocalDateTime\u003e taskEndDateTime;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * An event phrase can be split further into eventWordArray."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: \u0027E | 1 | homework | 1200-12-12T10:00 to 1200-12-12T11:00\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * will be split into wordArray \u003d {[E], [1], [homework],"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * [1200-12-12T10:00 to 1200-12-12T11:00]}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * The wordArray can be split further into an eventWordArray."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: \u00271200-12-12T10:00 to 1200-12-12T11:00\u0027 will be"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * split into eventWordArray \u003d {[1200-12-12T10:00], [to], "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * [1200-12-12T11:00]}. Hence, the default size of this eventWordArray"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * is 3."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int EVENT_START_DATE_TIME_INDEX \u003d 0;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int EVENT_WORD_TO_INDEX \u003d 1;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int EVENT_END_DATE_TIME_INDEX \u003d 2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final int DEFAULT_EVENT_WORD_ARRAY_SIZE \u003d 3;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A constructor of a Parser object to encapsulate task arguments. */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Parser(String commandWord, Optional\u003cString\u003e taskDescription, "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskDeadline, "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskStartDateTime,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Optional\u003cLocalDateTime\u003e taskEndDateTime) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.commandWord \u003d commandWord;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d taskDescription;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d taskDeadline;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d taskStartDateTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d taskEndDateTime;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Initializes the Parser when the program starts. */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Parser() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.commandWord \u003d \"\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDescription \u003d Optional.empty();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskDeadline \u003d Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskStartDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskEndDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses the input from the user into commands that can be executed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Throws an InvalidCommandException if a command cannot be created "
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * based on the user\u0027s input."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInput The string text of input from the user."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A Command that is to be executed."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidCommandException An invalid command due to an invalid"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                 function of the program."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Command parseCommand(String userInput) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Parser parser \u003d parseUserInputIntoCommandArguments(userInput);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String commandWord \u003d parser.commandWord;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        switch(commandWord) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"find\":"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new FindCommand(parser.taskDescription);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"filter\":"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new FilterCommand(parser.taskDescription);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"list\": "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new ListCommand();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"done\":"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new DoneCommand(parser.taskDescription);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"bye\":"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new ExitCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"todo\":"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new AddCommand(commandWord, parser.taskDescription);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"deadline\":"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new AddCommand(commandWord, parser.taskDescription, "
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parser.taskDeadline);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"event\":"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new AddCommand(commandWord, parser.taskDescription, "
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parser.taskStartDateTime, parser.taskEndDateTime);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"delete\":"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            command \u003d new DeleteCommand(parser.taskDescription);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        default: "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidCommandException(MESSAGE_INVALID_COMMAND_RESULT);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if a user input contains a preposition. */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private boolean hasPreposition(String[] argsArray) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return IntStream.range(0, argsArray.length)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .anyMatch(wordIndex -\u003e {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    String word \u003d argsArray[wordIndex];"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    return Arrays.stream(prepositionArray)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            .anyMatch(preposition -\u003e preposition.equals(word));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                });"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns the preposition index of the user\u0027s input. */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private int getPrepositionIndex(String[] argsArray) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return IntStream.range(0, argsArray.length)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .filter(wordIndex -\u003e {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    String word \u003d argsArray[wordIndex];"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    return Arrays.stream(prepositionArray)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            .anyMatch(preposition -\u003e preposition.equals(word));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                })"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .reduce(0, (x, y) -\u003e x + y);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses user\u0027s input into a string of task\u0027s description to be used as a parameter"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * for creating a task, if the user\u0027s input does not contain a preposition. "
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Optional\u003cString\u003e parsePhraseWithoutPrepositionIntoTaskDescription("
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray) {      "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String phrase \u003d \"\";"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int i \u003d 1; i \u003c userInputArray.length; i++) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (i !\u003d 1) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                phrase +\u003d (\" \" + userInputArray[i]);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                phrase +\u003d (userInputArray[i]);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return Optional.of(phrase);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses user\u0027s input into a string of task\u0027s description to be used as a parameter"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * for creating a task, if the user\u0027s input contains a preposition."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A string to be recognized as a task description phrase."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Optional\u003cString\u003e parsePhraseWithPrepositionIntoTaskDescription("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String phrase \u003d \"\";        "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int i \u003d 1; i \u003c prepositionIndex; i++) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (i !\u003d 1) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                phrase +\u003d (\" \" + userInputArray[i]);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                phrase +\u003d (userInputArray[i]);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        // Wrap an optional on the phrase."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e optionalPhrase;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (phrase.equals(\"\")) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            optionalPhrase \u003d Optional.empty();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            optionalPhrase \u003d Optional.ofNullable(phrase);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return optionalPhrase;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses user\u0027s input into a string of task\u0027s deadline to be used as a parameter"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * for creating a deadline task."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A string to be recognized as a task deadline phrase."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e parseTaskDeadline("
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int deadlineIndex \u003d prepositionIndex + 1;       "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String deadline \u003d \"\";"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        deadline +\u003d (userInputArray[deadlineIndex]);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime taskDeadline \u003d LocalDateTime"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .parse(deadline);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return Optional.of(taskDeadline);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_INCORRECT_DEADLINE_INPUT);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses user\u0027s input into a string of task\u0027s start date and time to be used as a parameter"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * for creating an event task."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A formatted starting dateTime for the event."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidTaskArgument If a dateTime object cannot be created. "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e parseTaskStartDateTime("
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String startDateTime \u003d getStartDateTimeFromEventPhrase("
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                userInputArray, prepositionIndex);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime taskStartDateTime \u003d LocalDateTime"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .parse(startDateTime);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return Optional.of(taskStartDateTime);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_INCORRECT_EVENT_INPUT);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses user\u0027s input into a string of task\u0027s end date and time to be used as a parameter"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * for creating an event task."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A formatted ending dateTime for the event."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidTaskArgument If a dateTime object cannot be created. "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Optional\u003cLocalDateTime\u003e parseTaskEndDateTime("
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "      "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String endDateTime \u003d getEndDateTimeFromEventPhrase("
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                userInputArray, prepositionIndex);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime taskEndDateTime \u003d LocalDateTime"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .parse(endDateTime);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return Optional.of(taskEndDateTime);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_INCORRECT_EVENT_INPUT);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    } "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " "
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses a new phrase from the user\u0027s input starting after the preposition word to "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the end of sentence. "
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example, the phrase \u0027event party /on 1200-12-12T10:00 to 1200-12-12T11:11\u0027 will"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * return 1200-12-12T10:00 to 1200-12-12T11:11\u0027."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new phrase starting after the preposition word to the end of sentence. "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String parseEventPhraseAfterPreposition("
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String phrase \u003d \"\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int k \u003d prepositionIndex + 1; k \u003c userInputArray.length; k++) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            if (k \u003e prepositionIndex + 1) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                phrase +\u003d (\" \" + userInputArray[k]);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                phrase +\u003d (userInputArray[k]);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return phrase;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses a new phrase from the user\u0027s event phrase derived from parseEventPhraseAfterPreposition() "
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example, the phrase \u00271200-12-12T10:00 to 1200-12-12T11:11\u0027 will"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * return \u00271200-12-12T10:00\u0027."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new phrase representing the event starting date and time."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidTaskArgument If a starting date and time is empty or not in"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                             a correct format of \u0027YYYY-MM-DDTHH:mm\u0027."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String getStartDateTimeFromEventPhrase("
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String eventPhraseAfterPreposition \u003d "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseEventPhraseAfterPreposition("
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        userInputArray, prepositionIndex);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] eventPhraseArray \u003d eventPhraseAfterPreposition.split(\" \");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (eventPhraseArray[EVENT_START_DATE_TIME_INDEX].equals(\"to\")) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_EVENT_MISSING_START_DATE_TIME);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!eventPhraseArray[EVENT_WORD_TO_INDEX].equals(\"to\")) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_EVENT_MISSING_WORD_TO);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (eventPhraseArray.length !\u003d "
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                DEFAULT_EVENT_WORD_ARRAY_SIZE) {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_EVENT_MISSING_END_DATE_TIME);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return eventPhraseArray[EVENT_START_DATE_TIME_INDEX];"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses a new phrase from the user\u0027s event phrase derived from parseEventPhraseAfterPreposition() "
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example, the phrase \u00271200-12-12T10:00 to 1200-12-12T11:11\u0027 will"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * return \u00271200-12-12T11:11\u0027."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInputArray An array of words split from the user\u0027s input using the regex (\" \")."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param prepositionIndex The index of the preposition in the userInputArray."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A new phrase representing the event ending date and time."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidTaskArgument If a ending date and time is empty or not in"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                             a correct format of \u0027YYYY-MM-DDTHH:mm\u0027."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private String getEndDateTimeFromEventPhrase("
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String[] userInputArray, int prepositionIndex) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String eventPhraseAfterPreposition \u003d "
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                parseEventPhraseAfterPreposition("
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        userInputArray, prepositionIndex);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] eventPhraseArray \u003d eventPhraseAfterPreposition.split(\" \");"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "         "
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return eventPhraseArray[EVENT_END_DATE_TIME_INDEX];"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Parses a user\u0027s input into a format specified by the constructor of a command."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * If the user\u0027s input contains a preposition, it can be parsed into command arguments"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * for both Deadlines task and Events task. Else, it can only be parsed into command"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * arguments for ToDos task only."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param userInput A string of text from the user\u0027s input."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A parser object that can create a command."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private Parser parseUserInputIntoCommandArguments(String userInput) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] argsArray \u003d userInput.trim().split(\" \");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        int prepositionIndex \u003d 0;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cString\u003e taskDescription \u003d Optional.empty();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cLocalDateTime\u003e taskDeadline \u003d Optional.empty();"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cLocalDateTime\u003e taskStartDateTime \u003d Optional.empty();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Optional\u003cLocalDateTime\u003e taskEndDateTime \u003d Optional.empty();        "
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String commandWord \u003d argsArray[COMMAND_INDEX];"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (hasPreposition(argsArray)) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            prepositionIndex \u003d getPrepositionIndex(argsArray);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String preposition \u003d argsArray[prepositionIndex];"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            taskDescription \u003d "
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parsePhraseWithPrepositionIntoTaskDescription("
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            argsArray, prepositionIndex);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            switch (preposition) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            case \"/by\" : "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskDeadline \u003d parseTaskDeadline("
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        argsArray, prepositionIndex);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            case \"/on\" :"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskStartDateTime \u003d parseTaskStartDateTime("
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        argsArray, prepositionIndex);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskEndDateTime \u003d parseTaskEndDateTime("
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        argsArray, prepositionIndex);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                        MESSAGE_INCORRECT_TASK_INPUT);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (!hasPreposition(argsArray)) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            taskDescription \u003d "
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    parsePhraseWithoutPrepositionIntoTaskDescription("
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                            argsArray);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                  "
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new Parser(commandWord, taskDescription, taskDeadline,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                taskStartDateTime, taskEndDateTime); "
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 443
    }
  },
  {
    "path": "src/main/java/storage/InvalidStorageFilePathException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an exception thrown when the storage file path is invalid."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class InvalidStorageFilePathException extends InvalidPathException {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor for an InvalidStorageFilePathException."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param input The string representation of the file path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param reason The message of the error."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public InvalidStorageFilePathException(String input, String reason) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(input, reason);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 21
    }
  },
  {
    "path": "src/main/java/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_READ_WRITE_FAILURE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.BufferedOutputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import storage.InvalidStorageFilePathException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents the storage that stores all information pertaining"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * to tasks in a storage.txt file."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The default file name that is to be read or written by the program. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static final String DEFAULT_STORAGE_FILEPATH \u003d \"storage.txt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public final Path path;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructor of a Storage using the default file path. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Storage() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this(DEFAULT_STORAGE_FILEPATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Constructor of a Storage retrieved from Path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws InvalidStorageFilePathException If the storage file does not match"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                         a .txt extension."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.path \u003d Paths.get(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (!isValidPath(this.path)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidStorageFilePathException(this.path.toString(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                     \"The current file does not end with a .txt\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Silently loads all data from the storage text file. This method first"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * tries to read from a storage.txt file. If this file is not present in"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the same directory as the program, it will create a new file that is"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * named after \u0027storage.txt\u0027 as well."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A TaskList with all the data of tasks stored in it."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StorageReadWriteException If the current storage file cannot be"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                   loaded.  "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public TaskList load() throws StorageReadWriteException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();        "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        File f \u003d new File(this.path.toString());        "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            f.createNewFile(); "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            FileOutputStream outputFile \u003d new FileOutputStream(f, true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            BufferedOutputStream bufferedOutputFile \u003d "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new BufferedOutputStream(outputFile, 1024);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            bufferedOutputFile.close();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StorageReadWriteException("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_READ_WRITE_FAILURE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line;                       "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            BufferedReader br \u003d new BufferedReader("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    new FileReader(this.path.toString()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            while ((line \u003d br.readLine()) !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                lines.add(line);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StorageReadWriteException("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_READ_WRITE_FAILURE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return StorageDecoder.decodeStorageFile(lines);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Writes data into the storage text file. Throws an exception if the file "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * cannot be read or written."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StorageReadWriteException If the current storage file cannot be"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                   overwritten.  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void save(String filePath, TaskList taskList) "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StorageReadWriteException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            BufferedWriter bw \u003d new BufferedWriter(fw);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String encodedTaskList \u003d StorageEncoder."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    encodeTaskList(taskList); "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            bw.write(encodedTaskList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            bw.close();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StorageReadWriteException("
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_READ_WRITE_FAILURE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getFilePath() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return this.path.toString();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Returns true if a given file has a .txt extension. */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public boolean isValidPath(Path filePath) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return filePath.toString().endsWith(\".txt\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }   "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 128
    }
  },
  {
    "path": "src/main/java/storage/StorageDecoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INCORRECT_EVENT_INPUT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_INCORRECT_TASK_INPUT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_CORRUPTED_STORAGE_FILE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Events;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.InvalidTaskArgumentException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.ToDos;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents a decoder that decodes data from the storage text file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * into Duke\u0027s TaskList. The decoder decodes a list of strings derived"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * from the load() in Storage.java. It will then parse each string into"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * an acceptable task arguments format so that a task can be constructed "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * and be added into the TaskList. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Each string will be split into a word array to carry different task arguments."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * For example: E | 1 | homework | 1200-12-12T10:00 to 1200-12-12T11:00\u0027"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * will be split into wordArray \u003d {[E], [1], [homework],"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * [1200-12-12T10:00 to 1200-12-12T11:00]}. This explains the relative "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * position index that indicates the specific task argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * An InvalidTaskArgumentException is thrown whenever a line of string "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * text cannot be parsed correctly into a task arguments format."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class StorageDecoder {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the type of a task. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int TASK_TYPE_INDEX \u003d 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the status of a task. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int TASK_STATUS_INDEX \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the description of a task. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int TASK_DESCRIPTION_INDEX \u003d 2;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the deadlines of a task. */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int TASK_DEADLINE_INDEX \u003d 3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the starting date and time of a task. */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int TASK_START_DATE_TIME_INDEX \u003d 3;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** The relative position index that indicates the ending date and time of a task. */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int TASK_END_DATE_TIME_INDEX \u003d 5;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A counter that tracks the number of tasks in the storage text file. */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static int decoderTaskCounter \u003d 1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Decodes a list of string texts into an acceptable task arguments format"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * and appends it to the TaskList. Throws an exception whenever a task "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * cannot be decoded."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param lines A list of string texts derived from Storage\u0027s load()."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A TaskList ready to be loaded onto Duke\u0027s TaskList."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StorageReadWriteException If any of the lines cannot be decoded."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static TaskList decodeStorageFile(List\u003cString\u003e lines) "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StorageReadWriteException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        TaskList decodedTaskList \u003d new TaskList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (String line : lines) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, String\u003e mapOfTaskArguments \u003d "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    decodeLineIntoTaskArguments(line); "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Task decodedTask \u003d makeTaskFromTaskArguments("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    mapOfTaskArguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            decodedTaskList.loadTask(decodedTask);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            decoderTaskCounter++;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return decodedTaskList;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructs a Task object based on the decoded task arguments format. */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Task makeTaskFromTaskArguments("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, String\u003e mapOfTaskArguments) "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    throws StorageReadWriteException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskType \u003d mapOfTaskArguments.get(\"taskType\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "             "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Task task;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            task \u003d makeToDosTask(mapOfTaskArguments);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            task \u003d makeDeadlinesTask(mapOfTaskArguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            task \u003d makeEventsTask(mapOfTaskArguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break; "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        default: "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_INCORRECT_TASK_INPUT);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return task;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructs a ToDos task given a formatted ToDos task arguments. */   "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static ToDos makeToDosTask("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, String\u003e mapOfTaskArguments) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskType \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskType\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskStatus \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskStatus\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskDescription \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskDescription\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean isDone \u003d (taskStatus.equals(\"1\") ? true : false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return new ToDos(decoderTaskCounter, taskDescription, isDone);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructs a Deadlines task given a formatted Deadlines task arguments. */   "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Deadlines makeDeadlinesTask("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, String\u003e mapOfTaskArguments) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskType \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskType\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskStatus \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskStatus\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskDescription \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskDescription\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskDeadline \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskDeadline\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean isDone \u003d (taskStatus.equals(\"1\") ? true : false);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime deadline \u003d LocalDateTime"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .parse(taskDeadline);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return new Deadlines(decoderTaskCounter, taskDescription,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    deadline, isDone);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_INCORRECT_EVENT_INPUT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructs an Events task given a formatted Events task arguments. */   "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Events makeEventsTask("
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            Map\u003cString, String\u003e mapOfTaskArguments) "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws InvalidTaskArgumentException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskType \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskType\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskStatus \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskStatus\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskDescription \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskDescription\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskStartDate \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskStartDate\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskEndDate \u003d mapOfTaskArguments"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                .get(\"taskEndDate\");        "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        boolean isDone \u003d (taskStatus.equals(\"1\") ? true : false);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime startDate \u003d LocalDateTime"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .parse(taskStartDate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            LocalDateTime endDate \u003d LocalDateTime"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    .parse(taskEndDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            return new Events(decoderTaskCounter, taskDescription,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    startDate, endDate, isDone);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new InvalidTaskArgumentException("
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_INCORRECT_EVENT_INPUT);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Decodes each line of string text into acceptable task arguments format. "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param line The line of string text to be decoded."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A HashMap of task arguments to its specific decoded strings."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StorageReadWriteException If the storage text file is a blank file"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                   or does not conform to the encoding "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     *                                   standard.  "
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Map\u003cString, String\u003e decodeLineIntoTaskArguments("
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line) "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StorageReadWriteException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, String\u003e mapOfTaskArguments \u003d new HashMap\u003c\u003e();        "
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArray \u003d line.split(\" | \");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String taskType \u003d wordArray[TASK_TYPE_INDEX];"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        switch (taskType) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            mapOfTaskArguments \u003d decodeToDosIntoTaskArguments(line);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            mapOfTaskArguments \u003d decodeDeadlinesIntoTaskArguments(line);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            mapOfTaskArguments \u003d decodeEventsIntoTaskArguments(line);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            break; "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StorageReadWriteException("
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_CORRUPTED_STORAGE_FILE);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return mapOfTaskArguments;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Decodes each line of string text into acceptable Events task arguments format. */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Map\u003cString, String\u003e decodeEventsIntoTaskArguments("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, String\u003e eventArguments \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArray \u003d splitLineIntoReadableEventDateTime(line);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        eventArguments.put("
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskType\", wordArray[TASK_TYPE_INDEX]);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        eventArguments.put("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskStatus\", wordArray[TASK_STATUS_INDEX]);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        eventArguments.put("
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskDescription\", wordArray[TASK_DESCRIPTION_INDEX]);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        eventArguments.put("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskStartDate\", wordArray[TASK_START_DATE_TIME_INDEX]);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        eventArguments.put("
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskEndDate\", wordArray[TASK_END_DATE_TIME_INDEX]);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return eventArguments;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Decodes each line of string text into acceptable Deadlines task arguments format. */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Map\u003cString, String\u003e decodeDeadlinesIntoTaskArguments("
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, String\u003e deadlineArguments \u003d new HashMap\u003c\u003e();        "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArray \u003d splitLineIntoWords(line);       "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        deadlineArguments.put("
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskType\", wordArray[TASK_TYPE_INDEX]);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        deadlineArguments.put("
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskStatus\", wordArray[TASK_STATUS_INDEX]);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        deadlineArguments.put("
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskDescription\", wordArray[TASK_DESCRIPTION_INDEX]);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        deadlineArguments.put("
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskDeadline\", wordArray[TASK_DEADLINE_INDEX]);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return deadlineArguments;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Decodes each line of string text into acceptable ToDos task arguments format. */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static Map\u003cString, String\u003e decodeToDosIntoTaskArguments("
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        Map\u003cString, String\u003e todosArguments \u003d new HashMap\u003c\u003e();       "
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArray \u003d splitLineIntoWords(line);  "
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        todosArguments.put("
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskType\", wordArray[TASK_TYPE_INDEX]);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        todosArguments.put("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskStatus\", wordArray[TASK_STATUS_INDEX]);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        todosArguments.put("
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                \"taskDescription\", wordArray[TASK_DESCRIPTION_INDEX]);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return todosArguments;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Splits a line of string text using the regex (\"|to\"). This is used only "
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * to decode a string text that into an Event task argument format."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: E | 1 | homework | 1200-12-12T10:00 to 1200-12-12T11:00\u0027"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * will be split into wordArray \u003d {[E], [1], [homework],"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * [1200-12-12T10:00 to 1200-12-12T11:00]}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param line The line of text that is to be split on."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A String array containing the task arguments in the format specified. "
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static String[] splitLineIntoReadableEventDateTime("
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            String line) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArray \u003d line.split(\"[|to]\");        "
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int i \u003d 0; i \u003c wordArray.length; i++) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                wordArray[i] \u003d wordArray[i].trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            "
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return wordArray;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }       "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Split a line of string text using the regex (\"|\"). This is used mainly to "
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * decode a string text that into a ToDos or a Deadlines task argument format."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: D | 1 | homework | 1200-12-12T10:00\u0027"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * will be split into wordArray \u003d {[D], [1], [homework], [1200-12-12T10:00]}."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param line The line of text that is to be split on."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return A String array containing the task arguments in the format specified."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */   "
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static String[] splitLineIntoWords(String line) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String[] wordArray \u003d line.split(\"[|]\");        "
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (int i \u003d 0; i \u003c wordArray.length; i++) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            wordArray[i] \u003d wordArray[i].trim();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return wordArray;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 318
    }
  },
  {
    "path": "src/main/java/storage/StorageEncoder.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_CANNOT_WRITE_TASK;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Deadlines;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Events;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.TaskList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import duke.task.ToDos;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an encoder that encodes data from the TaskList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * into the storage text file."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class StorageEncoder {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A TaskList that is to be encoded into a storage file. */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final TaskList taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructor of a TaskListEncoder. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public StorageEncoder(TaskList taskList) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Encodes the taskList into a text format that is stored in the storage file."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @param taskList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @return String A string representation of tasks in the TaskList into text format."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StorageReadWriteException If the storage file is missing or cannot be overwritten."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public static String encodeTaskList(TaskList taskList) "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StorageReadWriteException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StringBuilder encodedTaskList \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        for (Task task : taskList.getTasks()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            encodedTaskList.append(encodeTask(task) + \"\\n\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return encodedTaskList.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Encodes a Task object into a text format and appends to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * the encodedTaskList so that it can be written collectively"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * into the storage text file. Throws an exception if the task "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * cannot be written in a text format."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * @throws StorageReadWriteException If a task cannot be cannot be encoded into a text format."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static String encodeTask(Task task) "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throws StorageReadWriteException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        StringBuilder encodedTask \u003d new StringBuilder(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        if (task instanceof ToDos) {            "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            encodedTask.append(encodeToDos(task));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (task instanceof Deadlines) {           "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            encodedTask.append(encodeDeadlines(task));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else if (task instanceof Events) {           "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            encodedTask.append(encodeEvents(task));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            throw new StorageReadWriteException("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                    MESSAGE_CANNOT_WRITE_TASK);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return encodedTask.toString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Encodes a ToDos object into a text format."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: \u0027T | 1 | return book\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static String encodeToDos(Task task) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String encodedToDos \u003d \"\"; "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        encodedToDos +\u003d (\"T\""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (task.getDoneStatus() ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((ToDos) task).getTaskName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return encodedToDos;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Encodes a Deadlines object into a text format."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: \u0027D | 1 | homework | 1200-12-12T10:00\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static String encodeDeadlines(Task task) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String encodedDeadlines \u003d \"\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        encodedDeadlines +\u003d (\"D\""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (task.getDoneStatus() ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + task.getTaskName())"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((Deadlines) task).getDate().get()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"T\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((Deadlines) task).getTime().get();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return encodedDeadlines;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * Encodes an Events object into a text format."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     * For example: \u0027E | 1 | homework | 1200-12-12T10:00 to 1200-12-12T11:00\u0027"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static String encodeEvents(Task task) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String encodedEvents \u003d \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        encodedEvents +\u003d (\"E\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + (task.getDoneStatus() ? \"1\" : \"0\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + task.getTaskName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" | \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((Events) task).getStartDate().get()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"T\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((Events) task).getStartTime().get()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((Events) task).getEndDate().get()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"T\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + ((Events) task).getStartTime().get();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return encodedEvents;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 131
    }
  },
  {
    "path": "src/main/java/storage/StorageReadWriteException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Represents an exception that is thrown whenever read or write"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * operation fails."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class StorageReadWriteException extends IOException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public StorageReadWriteException(String msg) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        super(msg);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 15
    }
  },
  {
    "path": "src/main/java/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "package ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_WELCOME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_COMMAND_RESULT_FAILURE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import static misc.Messages.MESSAGE_EXIT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "import command.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * Encapsulates the user interface of the program."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * This class is responsible for displaying messages to the user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " * "
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A string representation of a border. */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private static final String BORDER \u003d \"\\n_____________________\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"__________________________________________________\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "            + \"____________________________________\\n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** A scanner object to read user input. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    private final Scanner sc;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Constructor of a Ui that initializes an internal scanner. */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.sc \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Uses the scanner to read the input from the user. */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public String getCommand() throws NoSuchElementException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String readLine \u003d sc.nextLine();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        return readLine;  "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Displays the result of a command to the user. */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void displayOutputMessage(CommandResult commandResult) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String output \u003d commandResult.getCommandResult();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        displayMessage(output);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Displays a welcome message when program initialized. */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void displayWelcomeMessage() {       "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        displayMessage(MESSAGE_WELCOME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Displays an exit message when program exits. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void displayExitMessage() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        this.sc.close();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        displayMessage(MESSAGE_EXIT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Displays a border to surround the output text shown to the user. */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void displayBorder() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(BORDER);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Displays a message to the user. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void displayMessage(String message) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    /** Displays an error message to the user. */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    public void displayErrorMessage(String message) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        String output \u003d \"\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        output +\u003d (MESSAGE_COMMAND_RESULT_FAILURE  "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\\n.\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\\n.\""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "                + message);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "        System.out.println(output);              "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 76
    }
  },
  {
    "path": "storage.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "T | 0 | adawda"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "D | 0 | ascas | 2.[D][✗] ascas (by: Dec 12 1200 10:10)"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 2
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": " ____        _        "
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|  _ \\ _   _| | _____ "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "| | | | | | | |/ / _ \\"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "| |_| | |_| |   \u003c  __/"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "|____/ \\__,_|_|\\_\\___| v0.2.0 "
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Hello! I\u0027m Duke!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "What can I do for you today?"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a description to your task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  1.[T][X] return book"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  2.[T][X] Bring dog to the vet to check-up"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  3.[T][X] sleeeeeeeeeeep!!!"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a description to your task."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a date to your deadline"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Index 3 out of bounds for length 3"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the deadline date and time in the following format: YYYY-MM-DDTHH:mm. "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: 2020-12-01T10:00"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the deadline date and time in the following format: YYYY-MM-DDTHH:mm. "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: 2020-12-01T10:00"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the deadline date and time in the following format: YYYY-MM-DDTHH:mm. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: 2020-12-01T10:00"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  4.[D][X] homework (by: Dec 12 1200 12:00)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1.[T][X] return book"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2.[T][X] Bring dog to the vet to check-up"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3.[T][X] sleeeeeeeeeeep!!!"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4.[D][X] homework (by: Dec 12 1200 12:00)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  [T][/] return book"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  [T][/] Bring dog to the vet to check-up"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Nice! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  [T][/] sleeeeeeeeeeep!!!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Nice! I\u0027ve removed this task:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  1.[T][/] return book"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! There is no current task with that index..."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! There is no current task with that index..."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a description to your task."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e It seems like you have forgotten to add a start date or an end date to your event?"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Index 1 out of bounds for length 1"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Index 1 out of bounds for length 1"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Index 1 out of bounds for length 1"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Index 1 out of bounds for length 1"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Index 1 out of bounds for length 1"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter your event ending date and time."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! You forgot to enter a \u0027to\u0027 between your event starting and ending date and time."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the starting event date and time followed by the event ending date and time in the following format: YYYY-MM-DDTHH:mm to YYYY-MM-DDTHH:mm. "
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e For example: 2020-12-01T10:00 to 2020-12-01T12:00"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  4.[E][X] attend party (on: Dec 12 1200 10:00 to Dec 12 1200 11:00)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 4 tasks in the list."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Here are the tasks in your list:"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "1.[T][/] Bring dog to the vet to check-up"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "2.[T][/] sleeeeeeeeeeep!!!"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3.[D][X] homework (by: Dec 12 1200 12:00)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4.[E][X] attend party (on: Dec 12 1200 10:00 to Dec 12 1200 11:00)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  5.[T][X] homework1"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 5 tasks in the list."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  6.[D][X] homework1 (by: Dec 12 1200 10:00)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 6 tasks in the list."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "  7.[E][X] homework1 group meeting (on: Dec 12 1200 10:00 to Dec 12 1200 11:11)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Now you have 7 tasks in the list."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Here are the matching tasks in your list:"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "5.[T][X] homework1"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "6.[D][X] homework1 (by: Dec 12 1200 10:00)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "7.[E][X] homework1 group meeting (on: Dec 12 1200 10:00 to Dec 12 1200 11:11)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Here are the tasks occuring on this date:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "3.[D][X] homework (by: Dec 12 1200 12:00)"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "4.[E][X] attend party (on: Dec 12 1200 10:00 to Dec 12 1200 11:00)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "6.[D][X] homework1 (by: Dec 12 1200 10:00)"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "7.[E][X] homework1 group meeting (on: Dec 12 1200 10:00 to Dec 12 1200 11:11)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e Alright! What can I do for you next?"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter the date in the following format: YYYY-MM-DD"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a task index so that I can mark that as done."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a task index so that I can delete that."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a keyword so that I can search the current list of tasks."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Oops! Something went wrong. Let me find out why.........."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "\u003e\u003e\u003e\u003e\u003e\u003e\u003e\u003e I\u0027m sorry! Please enter a date so that I can search the current list of tasks."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "___________________________________________________________________________________________________________"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "Duke has been closed successfully."
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 443
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "todo"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "todo return book"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "todo Bring dog to the vet to check-up"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "todo sleeeeeeeeeeep!!!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework /by"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework /by tuesday"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework /by 1200T10000"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework /by 1200T10:00"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework /by 1200-12-12T12:00"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "done 3"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete 10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "done 10"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on tuesday"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200T10000"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200000L:00"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200-12-12Txcsac"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200-12-12T10:00"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200-12-12T10:00 to "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200-12-12T10:00 1200-12-12T11:00"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200-12-12T1aaaa to 1200-12-12Tnnn"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event attend party /on 1200-12-12T10:00 to 1200-12-12T11:00"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "list"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "todo homework1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "deadline homework1 /by 1200-12-12T10:00"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "event homework1 group meeting /on 1200-12-12T10:00 to 1200-12-12T11:11"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "find homework1"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "filter 1200-12-12"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "filter 12-12-12"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "done"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "delete"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "find"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "filter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 41
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\misc\\Messages.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "..\\src\\main\\java\\command\\*.java ..\\src\\main\\java\\duke\\Duke.java"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "..\\src\\main\\java\\duke\\task\\*.java ..\\src\\main\\java\\parser\\Parser.java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "..\\src\\main\\java\\storage\\*.java ..\\src\\main\\java\\ui\\Ui.java"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "..\\src\\main\\java\\Main.java ..\\storage.txt"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "java -classpath ..\\bin Main \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "REM delete storage.txt file after checking for differences. This is to prevent side effect of duke reading from an existing storage file which affects the expected output (based on no storage file existing at first)."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JosephLimWeiJie"
        },
        "content": "del storage.txt"
      }
    ],
    "authorContributionMap": {
      "JosephLimWeiJie": 28
    }
  }
]
