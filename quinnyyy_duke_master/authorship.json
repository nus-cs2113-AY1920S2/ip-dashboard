[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String END_STRING \u003d \"bye\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.sayGoodbye();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static void initialize() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.initialize();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList \u003d new TaskList(FILE_PATH);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static void runLoop() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String userInput \u003d Ui.getNextLine();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        while (!userInput.toLowerCase().equals(END_STRING)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                command \u003d Parser.parseLine(userInput, taskList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                if (command.getIsPersistentCommand()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    taskList.writeTasksToFile();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (BadLineFormatException | BadTaskChoiceFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                Ui.printPretty(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            userInput \u003d Ui.getNextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 45
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String[] tokens;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected boolean isPersistentCommand \u003d true;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Command(String keyword, String[] tokens, TaskList taskList) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.tokens \u003d tokens;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsPersistentCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return isPersistentCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract void execute() throws BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"deadline finish math homework /by Monday\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public DeadlineCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!Arrays.asList(tokens).contains(\"/by\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain \\\" /by \\\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int byIndex \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (tokens[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                byIndex \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (byIndex \u003d\u003d tokens.length - 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a due date\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (byIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, byIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String dueDateTime \u003d String.join(\" \", Arrays.copyOfRange(tokens, byIndex + 1, tokens.length));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        deadline \u003d new Deadline(description, dueDateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DeleteCommand extends TaskSelectionCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"delete \u003cTask Number\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"delete\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public DeleteCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int taskIndex \u003d getTaskIndex();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DoneCommand extends TaskSelectionCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"done \u003cTask Number\u003e\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"done\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public DoneCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int taskIndex \u003d getTaskIndex();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.markAsDone(taskIndex);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 19
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"event math class /at Monday 8am-10am\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"event\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public EventCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!Arrays.asList(tokens).contains(\"/at\")) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain \\\" /at \\\"\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int atIndex \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (tokens[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                atIndex \u003d i;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (atIndex \u003d\u003d tokens.length - 1) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a date/time\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (atIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a description\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, atIndex));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String startEndDateTime \u003d String.join(\" \", Arrays.copyOfRange(tokens, atIndex + 1, tokens.length));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        event \u003d new Event(description, startEndDateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 42
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"list\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"list\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ListCommand(String keyword, String[] tokens, TaskList taskList) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        isPersistentCommand \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.listTasks();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 17
    }
  },
  {
    "path": "src/main/java/duke/commands/TaskSelectionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class TaskSelectionCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TaskSelectionCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Specify a task by entering a task number\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Too many tokens\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected int getTaskIndex() throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return Integer.parseInt(tokens[1]) - 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadTaskChoiceFormatException(\"Task number is not parsable\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 24
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"todo math homework\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"todo\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDo toDo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDoCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a description\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, tokens.length));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        toDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.addTask(toDo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 28
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BadFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class BadFileFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public BadFileFormatException(String errorMessage){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(\"Bad file format:\" + System.lineSeparator() + errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BadLineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class BadLineFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public BadLineFormatException(String errorMessage){"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BadTaskChoiceFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class BadTaskChoiceFormatException extends Exception {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public BadTaskChoiceFormatException(String errorMessage) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 7
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String whiteSpaceRegex \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static Command parseLine(String userInput, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (userInput.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Empty line\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] tokens \u003d userInput.split(whiteSpaceRegex);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String keyword \u003d tokens[0];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return getCommandFromKeyword(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Command getCommandFromKeyword(String keyword, String[] tokens, TaskList taskList)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throws BadLineFormatException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        switch(keyword.toLowerCase()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case DeadlineCommand.KEYWORD:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new DeadlineCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case DeleteCommand.KEYWORD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new DeleteCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case DoneCommand.KEYWORD:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new DoneCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case EventCommand.KEYWORD:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new EventCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case ListCommand.KEYWORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ListCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case ToDoCommand.KEYWORD:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ToDoCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Unrecognized keyword\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 45
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void saveToFile(String filePath, String message) throws IOException {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.indexOf(\"/\")));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fw.write(message);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static ArrayList\u003cString\u003e loadFromFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ArrayList\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            fileContents.add(s.nextLine());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return fileContents;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 38
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadFileFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TaskList(String filePath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ArrayList\u003cString\u003e fileContents \u003d Storage.loadFromFile(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            readFileToTasks(fileContents);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(\"Couldn\u0027t locate a save file. Starting with an empty list of tasks\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (BadFileFormatException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(e.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            listTasks();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String message \u003d \"Added this task:\" + System.lineSeparator() + newTask.toString() + System.lineSeparator() +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                \"Now you have \" + tasks.size() + \" tasks in the list\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void listTasks() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String message \u003d \"These are your tasks:\" + System.lineSeparator();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String lineEnd \u003d i \u003d\u003d tasks.size() - 1 ? \"\" : System.lineSeparator(); // Do this so no extra newline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            message +\u003d (String.format(\"%d. %s\", i + 1, tasks.get(i).toString()) + lineEnd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(message);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void deleteTask(int taskIndex) throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (taskIndex \u003e tasks.size() - 1 || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadTaskChoiceFormatException(\"Task number is invalid\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Task deletedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(\"Deleted task \" + (taskIndex + 1) + \":\\n\" + deletedTask.toString() + \"\\nNow you have \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                + tasks.size() + \" tasks left in your list\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void markAsDone(int taskIndex) throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (taskIndex \u003e tasks.size() - 1 || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadTaskChoiceFormatException(\"Task number is invalid\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Task task \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        task.setIsDone(true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(\"Task \" + (taskIndex + 1) + \" has been marked as done\\n\" + task.toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void writeTasksToFile() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Storage.saveToFile(filePath, getFormattedTasks());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(e.getMessage() + System.lineSeparator() +"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    \"*** Writing to file failed. Your task list may not have been saved. ***\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String getFormattedTasks() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String formattedTasks \u003d \"\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            formattedTasks +\u003d t.toFormattedString() + System.lineSeparator();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return formattedTasks;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected void readFileToTasks(ArrayList\u003cString\u003e fileContents) throws BadFileFormatException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int lineCounter \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String errors \u003d \"\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (String s : fileContents) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                tasks.add(Task.getTaskFromFormattedLine(s));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (BadLineFormatException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                errors +\u003d e.getMessage() + \" on line \" + lineCounter + \" of \" + filePath + System.lineSeparator();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            lineCounter++;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!errors.equals(\"\")) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadFileFormatException(errors.substring(0, errors.length() - 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 112
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String dueDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Deadline(String description, String dueDateTime) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.dueDateTime \u003d dueDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Deadline(String description, String dueDateTime, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this(description, dueDateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" + dueDateTime + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toFormattedString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String done \u003d isDone ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"D,\" + done + \",\" + description + \",\" + dueDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String startEndDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Event(String description, String startEndDateTime) {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.startEndDateTime \u003d startEndDateTime;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Event(String description, String startEndDateTime, boolean isDone) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this(description, startEndDateTime);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \" + startEndDateTime + \")\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toFormattedString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String done \u003d isDone ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"E,\" + done + \",\" + description + \",\" + startEndDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        setIsDone(false);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    // getStatusIcon() is from the website"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract String toFormattedString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static Task getTaskFromFormattedLine(String line) throws BadLineFormatException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] tokens \u003d line.split(\",\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Empty line\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (tokens.length \u003c 3) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Not enough tokens\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if ((tokens[0].equals(\"D\") || tokens[0].equals(\"E\")) \u0026\u0026 tokens.length \u003c 4) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Not enough tokens\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (!(tokens[1].equals(\"y\") || tokens[1].equals(\"n\"))) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Second token must be y or n\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        boolean isDone \u003d tokens[1].equals(\"y\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        switch(tokens[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ToDo(tokens[2], isDone);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new Deadline(tokens[2], tokens[3], isDone);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new Event(tokens[2], tokens[3], isDone);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"First token must be T, D, or E\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 53
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toFormattedString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String done \u003d isDone ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"T,\" + done + \",\" + description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 22
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Scanner scannerObject;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String GOODBYE_MESSAGE \u003d \"Leaving so soon? :(\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String GREETING \u003d \"Hello! This is Quinn\u0027s chat bot\" + NEWLINE +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"Currently supported commands: todo, deadline, event, list, done, delete\" + NEWLINE +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"Example usage:\" + NEWLINE +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ToDoCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DeadlineCommand.EXAMPLE_USAGE+ NEWLINE +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ListCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DoneCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DeleteCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"Type \\\"\" + duke.Main.END_STRING + \"\\\" to exit\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        scannerObject \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        printPretty(GREETING);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void sayGoodbye() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        printPretty(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void printPretty(String message) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static String getNextLine() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return scannerObject.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 52
    }
  }
]
