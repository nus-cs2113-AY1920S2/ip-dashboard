[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 2,
      "-": 37
    }
  },
  {
    "path": "src/main/java/duke/Main.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * The main class. Initialized the system, lets the user enter commands and executes them, then exits."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String END_STRING \u003d \"bye\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final DateTimeFormatter DTF \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy H:mm\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final DateTimeFormatter DF \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String FILE_PATH \u003d \"data/tasks.txt\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static TaskList taskList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * The main method. Initialize everything, run the main command read/execution loop, exit"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        initialize();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        runLoop();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.sayGoodbye();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static void initialize() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.initialize();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.greet();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList \u003d new TaskList(FILE_PATH);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Read a line from the user. Parse the line to a \u003ccode\u003eCommand\u003c/code\u003e. Execute the \u003ccode\u003eCommand\u003c/code\u003e."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Save the new list of tasks if necessary. Repeat."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static void runLoop() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String userInput \u003d Ui.getNextLine();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Command command;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        while (!userInput.toLowerCase().equals(END_STRING)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                command \u003d Parser.parseUserInput(userInput, taskList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                command.execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                if (command.getIsPersistentCommand()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    taskList.writeTasksToFile();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (BadLineFormatException | BadTaskChoiceFormatException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                Ui.printPretty(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            userInput \u003d Ui.getNextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 59
    }
  },
  {
    "path": "src/main/java/duke/commands/ByCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class to represent by command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ByCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"by\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"by 24/6/2022 16:30\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDateTime dateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ByCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length !\u003d 3) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Command needs to be in form: by d/M/yyyy H:mm\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.dateTime \u003d LocalDateTime.parse(tokens[1] + \" \" + tokens[2], Main.DTF);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.message \u003d \"These are your tasks by \" + this.dateTime + \":\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isPersistentCommand \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * List all tasks that occur before target dateTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String tasks \u003d taskList.getTasksByFilter((Task t) -\u003e t.getIsBy(dateTime));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(message + tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 37
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Abstract class that represents a command, parsed from the user\u0027s input. The command stores the tokens from the"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * user\u0027s input and keeps a reference to a \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String keyword;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String[] tokens;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected TaskList taskList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected boolean isPersistentCommand \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Command(String keyword, String[] tokens, TaskList taskList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.tokens \u003d tokens;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.taskList \u003d taskList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not to save to file after this command is executed"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsPersistentCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return isPersistentCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Abstract method that is called to execute a command instance."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadTaskChoiceFormatException if a \u003ccode\u003eTaskSelectionCommand\u003c/code\u003e gets a bad task number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract void execute() throws BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 34
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for a deadline command that error checks user\u0027s input and can be executed to add the task to the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DeadlineCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"deadline finish math homework /by 5/10/2021 16:30\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"deadline\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Deadline deadline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public DeadlineCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!Arrays.asList(tokens).contains(\"/by\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain \\\" /by \\\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int byIndex \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (tokens[i].equals(\"/by\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                byIndex \u003d i;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (byIndex \u003d\u003d tokens.length - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a due date\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (byIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, byIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String dueDateTime \u003d String.join(\" \", Arrays.copyOfRange(tokens, byIndex + 1, tokens.length));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            deadline \u003d new Deadline(description, dueDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Adds the deadline task to the referenced \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.addTask(deadline);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 55
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for a delete command that can be executed to delete the task from the \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DeleteCommand extends TaskSelectionCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"delete \u003cTask Number\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"delete\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public DeleteCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Deletes the specified \u003ccode\u003eTask\u003c/code\u003e from the \u003cCode\u003eTaskList\u003c/Code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadTaskChoiceFormatException if task number does not exist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int taskIndex \u003d getTaskIndex();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.deleteTask(taskIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for a done command that can be executed to mark a task as done"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class DoneCommand extends TaskSelectionCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"done \u003cTask Number\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"done\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public DoneCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Mark the specified \u003ccode\u003eTask\u003c/code\u003e as done in the \u003cCode\u003eTaskList\u003c/Code\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadTaskChoiceFormatException if task number does not exist"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int taskIndex \u003d getTaskIndex();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.markAsDone(taskIndex);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 26
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for an event command that error checks user\u0027s input and can be executed to add the task to the"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class EventCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"event math class /at 31/7/2020 8:30\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"event\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private Event event;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public EventCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!Arrays.asList(tokens).contains(\"/at\")) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain \\\" /at \\\"\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int atIndex \u003d -1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c tokens.length; i++) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (tokens[i].equals(\"/at\")) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                atIndex \u003d i;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (atIndex \u003d\u003d tokens.length - 1) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a date/time\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (atIndex \u003d\u003d 1) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a description\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, atIndex));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String startEndDateTime \u003d String.join(\" \", Arrays.copyOfRange(tokens, atIndex + 1, tokens.length));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            event \u003d new Event(description, startEndDateTime);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(e.getMessage());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Adds the event task to the referenced \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.addTask(event);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 55
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for find command"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"find \u003csearch term\u003e\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"find\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String MESSAGE \u003d \"Here are your search results:\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String targetWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public FindCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Specify a word to search for\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Too many tokens. Only one word supported\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        targetWord \u003d tokens[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * List all tasks that contain target word"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String tasks \u003d taskList.getTasksByFilter((Task t) -\u003e t.containsWord(targetWord));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(MESSAGE + tasks);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 35
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for a list command that can be executed to list all tasks"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"list\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String MESSAGE \u003d \"These are your tasks:\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ListCommand(String keyword, String[] tokens, TaskList taskList) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        isPersistentCommand \u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Lists all tasks"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String tasks \u003d taskList.getTasksByFilter((Task t) -\u003e true);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(MESSAGE + tasks);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/OnCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for on command"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class OnCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"on\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"by 16/3/2021\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDate date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public OnCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length !\u003d 2) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Command needs to be in form: on d/M/yyyy\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.date \u003d LocalDate.parse(tokens[1], Main.DF);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.message \u003d \"These are your tasks on \" + date + \":\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isPersistentCommand \u003d false;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * List all tasks that occur on specified date"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String tasks \u003d taskList.getTasksByFilter((Task t) -\u003e t.getIsOn(date));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(message + tasks);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 38
    }
  },
  {
    "path": "src/main/java/duke/commands/TaskSelectionCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Abstract class that extends regular Command class. Used for commands that need to specify a task number"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * e.g. delete, done"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class TaskSelectionCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TaskSelectionCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003c\u003d 1) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Specify a task by entering a task number\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (tokens.length \u003e 2) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Too many tokens\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the index in taskList based on user input"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return index into taskList parsed from user input"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadTaskChoiceFormatException if the user inputs something NaN as a task number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected int getTaskIndex() throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return Integer.parseInt(tokens[1]) - 1;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadTaskChoiceFormatException(\"Task number is not parsable\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 33
    }
  },
  {
    "path": "src/main/java/duke/commands/ToDoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class for a todo command that error checks user\u0027s input and can be executed to add the task to the"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ToDoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String EXAMPLE_USAGE \u003d \"todo math homework\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static final String KEYWORD \u003d \"todo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDo toDo;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDoCommand(String keyword, String[] tokens, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003c 2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Input does not contain a description\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String description \u003d String.join(\" \", Arrays.copyOfRange(tokens, 1, tokens.length));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        toDo \u003d new ToDo(description);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Adds the todo task to the referenced \u003ccode\u003eTaskList\u003c/code\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        taskList.addTask(toDo);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 35
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BadFileFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Exception to represent an error that occurred when reading from file due to the file being wrongly formatted."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class BadFileFormatException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public BadFileFormatException(String errorMessage){"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(\"Bad file format:\" + System.lineSeparator() + errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 10
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BadLineFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Exception to represent a badly formatted line."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * This can be in reference to a line being read from file or a user input line."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class BadLineFormatException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public BadLineFormatException(String errorMessage){"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 11
    }
  },
  {
    "path": "src/main/java/duke/exceptions/BadTaskChoiceFormatException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Exception to represent an error when the user specifies a task number that does not currently exist."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class BadTaskChoiceFormatException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public BadTaskChoiceFormatException(String errorMessage) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(errorMessage);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 10
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ByCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.OnCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasklist.TaskList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.ToDo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * A class containing static methods used to parse user input and lines that are read from file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get a \u003ccode\u003eCommand\u003c/code\u003e from a raw user inputted line"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param userInput raw user inputted line"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param taskList taskList is needed as a reference in \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return a \u003ccode\u003eCommand\u003c/code\u003e based on the user input"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadLineFormatException if the user input was badly formatted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static Command parseUserInput(String userInput, TaskList taskList) throws BadLineFormatException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (userInput.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Empty line\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        final String WHITESPACE_REGEX \u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] tokens \u003d userInput.split(WHITESPACE_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String keyword \u003d tokens[0];"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return getCommandFromKeyword(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get the correct \u003ccode\u003eCommand\u003c/code\u003e based on keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param keyword first token in user input"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param tokens tokens from user input split by whitespace"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param taskList taskList is needed as a reference in \u003ccode\u003eCommand\u003c/code\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return a \u003ccode\u003eCommand\u003c/code\u003e based on keyword and tokens"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadLineFormatException if the user input is badly formatted and \u003ccode\u003eCommand\u003c/code\u003e can\u0027t be constructed"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Command getCommandFromKeyword(String keyword, String[] tokens, TaskList taskList)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throws BadLineFormatException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        switch(keyword.toLowerCase()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case ByCommand.KEYWORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ByCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case OnCommand.KEYWORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new OnCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case DeadlineCommand.KEYWORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new DeadlineCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case DeleteCommand.KEYWORD:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new DeleteCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case DoneCommand.KEYWORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new DoneCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case EventCommand.KEYWORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new EventCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case FindCommand.KEYWORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new FindCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case ListCommand.KEYWORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ListCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case ToDoCommand.KEYWORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ToDoCommand(keyword, tokens, taskList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Unrecognized keyword\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Parse a line that is read from file"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param line line that is read from file"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return \u003ccode\u003eTask\u003c/code\u003e generated based on line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadLineFormatException if the line from file is badly formatted"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static Task parseFormattedLine(String line) throws BadLineFormatException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String[] tokens \u003d line.split(\",\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tokens.length \u003d\u003d 0) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Empty line\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (tokens.length \u003c 3) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Not enough tokens\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if ((tokens[0].equals(\"D\") || tokens[0].equals(\"E\")) \u0026\u0026 tokens.length \u003c 4) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Not enough tokens\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } else if (!(tokens[1].equals(\"y\") || tokens[1].equals(\"n\"))) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"Second token must be y or n\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        boolean isDone \u003d tokens[1].equals(\"y\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        switch(tokens[0]) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"T\":"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new ToDo(tokens[2], isDone);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"D\":"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new Deadline(tokens[2], tokens[3], isDone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        case \"E\":"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            return new Event(tokens[2], tokens[3], isDone);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(\"First token must be T, D, or E\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 107
    }
  },
  {
    "path": "src/main/java/duke/storage/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * A class that deals with File I/O operations. Can write string to file and"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * read a file in as an \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eStrings\u003c/code\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Save string to file. Creates file if it does not exist."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param filePath location of file to save to. Assumes the format directory/filename"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param message message to be saved to file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws IOException if saving to file fails or is interrupted"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void saveToFile(String filePath, String message) throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File d \u003d new File(filePath.substring(0, filePath.indexOf(\"/\")));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!d.exists()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            d.mkdir();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            f.createNewFile();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        FileWriter fw \u003d new FileWriter(filePath);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fw.write(message);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Read in file as an \u003ccode\u003eArrayList\u003c/code\u003e of \u003ccode\u003eStrings\u003c/code\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param filePath location of file to read from"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return \u003ccode\u003eArrayList\u003c/code\u003e of each line read from the file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws FileNotFoundException if the file specified by \u003ccode\u003efilePath\u003c/code\u003e does not exist"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static ArrayList\u003cString\u003e loadFromFile(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        File f \u003d new File(filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        ArrayList\u003cString\u003e fileContents \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            fileContents.add(s.nextLine());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return fileContents;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 54
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskFilter.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "@FunctionalInterface"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public interface TaskFilter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    boolean filter(Task task);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 8
    }
  },
  {
    "path": "src/main/java/duke/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.ui.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadFileFormatException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadTaskChoiceFormatException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.storage.Storage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * A class to store all the tasks and perform operations to/on the list of tasks."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public TaskList(String filePath) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ArrayList\u003cString\u003e fileContents \u003d Storage.loadFromFile(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            readFileToTasks(fileContents);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(\"Couldn\u0027t locate a save file. Starting with an empty list of tasks\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (BadFileFormatException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(e.getMessage());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (tasks.size() !\u003d 0) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            String tasks \u003d getTasksByFilter((Task t) -\u003e true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(ListCommand.MESSAGE + tasks);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Add a task to the list of tasks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param newTask the task to be added"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void addTask(Task newTask) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        tasks.add(newTask);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String message \u003d \"Added this task:\" + System.lineSeparator() + newTask.toString() + System.lineSeparator() +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                \"Now you have \" + tasks.size() + \" tasks in the list\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(message);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get a string of the formatted list of tasks based on a filter specified in TaskFilter object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param tf functional interface representing the condition to filter tasks on"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string of formatted list of tasks. Newline is prepended."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String getTasksByFilter(TaskFilter tf) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String filteredTasks \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (int i \u003d 0; i \u003c tasks.size(); i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            if (tf.filter(tasks.get(i))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                filteredTasks +\u003d (System.lineSeparator() + String.format(\"%d. %s\", i + 1, tasks.get(i).toString()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Delete a task specified by \u003ccode\u003etaskIndex\u003c/code\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param taskIndex the index of the task to be deleted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadTaskChoiceFormatException if \u003ccode\u003etaskIndex\u003c/code\u003e is out of bounds of the list of tasks"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void deleteTask(int taskIndex) throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (taskIndex \u003e tasks.size() - 1 || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadTaskChoiceFormatException(\"Task number is invalid\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Task deletedTask \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        tasks.remove(taskIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(\"Deleted task \" + (taskIndex + 1) + \":\\n\" + deletedTask.toString() + \"\\nNow you have \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                + tasks.size() + \" tasks left in your list\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Mark a task specified by \u003ccode\u003etaskIndex\u003c/code\u003e as done"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param taskIndex the index of the task to be marked as done"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadTaskChoiceFormatException if \u003ccode\u003etaskIndex\u003c/code\u003e is out of bounds of the list of tasks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void markAsDone(int taskIndex) throws BadTaskChoiceFormatException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (taskIndex \u003e tasks.size() - 1 || taskIndex \u003c 0) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadTaskChoiceFormatException(\"Task number is invalid\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Task task \u003d tasks.get(taskIndex);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        task.setIsDone(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        Ui.printPretty(\"Task \" + (taskIndex + 1) + \" has been marked as done\\n\" + task.toString());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Save the list of tasks to file"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void writeTasksToFile() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Storage.saveToFile(filePath, getFormattedTasks());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            Ui.printPretty(e.getMessage() + System.lineSeparator() +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                    \"*** Writing to file failed. Your task list may not have been saved. ***\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Convert the list of tasks as a formatted string so that it can be saved"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return a string compliant with the format for saving to file"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private String getFormattedTasks() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String formattedTasks \u003d \"\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (Task t : tasks) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            formattedTasks +\u003d t.toFormattedString() + System.lineSeparator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return formattedTasks;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Populate the tasks list with contents from file"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param fileContents file contents split line by line"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @throws BadFileFormatException if the file was not formatted correctly"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private void readFileToTasks(ArrayList\u003cString\u003e fileContents) throws BadFileFormatException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        int lineCounter \u003d 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String errors \u003d \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        for (String s : fileContents) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                tasks.add(Parser.parseFormattedLine(s));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            } catch (BadLineFormatException e) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "                errors +\u003d e.getMessage() + \" on line \" + lineCounter + \" of \" + filePath + System.lineSeparator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            lineCounter++;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        if (!errors.equals(\"\")) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadFileFormatException(errors.substring(0, errors.length() - 1));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 152
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class to represent a deadline task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDateTime dueDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Deadline(String description, String dueDateTime) throws BadLineFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            this.dueDateTime \u003d LocalDateTime.parse(dueDateTime, Main.DTF);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Deadline(String description, String dueDateTime, boolean isDone) throws BadLineFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this(description, dueDateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the deadline\u0027s associated dateTime is before the target dateTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param dateTime target dateTime"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return if the deadline\u0027s associated dateTime is before the target dateTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsBy(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return dueDateTime.isBefore(dateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the deadline\u0027s associated dateTime is on the same day as the target date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param date target date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return if the deadline\u0027s associated dateTime is on the same day as the target date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsOn(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return dueDateTime.toLocalDate().equals(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this deadline"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation of this deadline"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"[D][\" + getStatusIcon() + \"] \" + description + \" (by: \" + dueDateTime + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this deadline formatted for saving to file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the string representation of this deadline formatted for saving to file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toFormattedString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String done \u003d isDone ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"D,\" + done + \",\" + description + \",\" + Main.DTF.format(dueDateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.Main;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.exceptions.BadLineFormatException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class to represent an event task"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private LocalDateTime startDateTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Event(String description, String startDateTime) throws BadLineFormatException {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            this.startDateTime \u003d LocalDateTime.parse(startDateTime, Main.DTF);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            throw new BadLineFormatException(e.getMessage());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Event(String description, String startDateTime, boolean isDone) throws BadLineFormatException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this(description, startDateTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the event\u0027s associated dateTime is before the target dateTime"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param dateTime target dateTime"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return if the event\u0027s associated dateTime is before the target dateTime"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsBy(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return startDateTime.isBefore(dateTime);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the event\u0027s associated dateTime is on the same day as the target date"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param date target date"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return if the event\u0027s associated dateTime is on the same day as the target date"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsOn(LocalDate date) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return startDateTime.toLocalDate().equals(date);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this event"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation of this event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"[E][\" + getStatusIcon() + \"] \" + description + \" (at: \" + startDateTime + \")\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this event formatted for saving to file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the string representation of this event formatted for saving to file"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toFormattedString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String done \u003d isDone ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"E,\" + done + \",\" + description + \",\" + Main.DTF.format(startDateTime);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 65
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Abstract class to represent a task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        setDescription(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        setIsDone(false);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return Tick mark or X based on completion status of this task"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    protected String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set the description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param description new description"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void setDescription(String description) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Set whether this task is done"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param isDone new done status"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public void setIsDone(boolean isDone) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the task\u0027s associated dateTime is before the target dateTime"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param dateTime target dateTime"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return if the task\u0027s associated dateTime is before the target dateTime"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract boolean getIsBy(LocalDateTime dateTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the task\u0027s associated dateTime is on the same day as the target date"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param date target date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return if the task\u0027s associated dateTime is on the same day as the target date"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract boolean getIsOn(LocalDate date);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Check if the description contains a word"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param word target word"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return whether or not description contains target word"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean containsWord(String word) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return description.contains(word);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this task"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation of this task"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public abstract String toFormattedString();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 69
    }
  },
  {
    "path": "src/main/java/duke/tasks/ToDo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * Class to represent a todo task"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class ToDo extends Task {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDo(String description) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public ToDo(String description, boolean isDone) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        this.isDone \u003d isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the ToDo is on a specified date. ToDo doesn\u0027t have a date so always return false"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param date the target date"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsOn(LocalDate date) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Get if the ToDo is due by/on a specified date. ToDo doesn\u0027t have a date so always return false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param dateTime the target date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public boolean getIsBy(LocalDateTime dateTime) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this todo"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return string representation of this todo"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"[T][\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * get the string representation of this todo formatted for saving to file"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return the string representation of this todo formatted for saving to file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public String toFormattedString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        String done \u003d isDone ? \"y\" : \"n\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return \"T,\" + done + \",\" + description;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 54
    }
  },
  {
    "path": "src/main/java/duke/ui/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "package duke.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ByCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeadlineCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DeleteCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.DoneCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.EventCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ListCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.OnCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import duke.commands.ToDoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " * A class to handle user interactions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static Scanner scannerObject;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String LINE_SEPARATOR \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String GOODBYE_MESSAGE \u003d \"Leaving so soon? :(\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String NEWLINE \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    private static final String GREETING \u003d \"Hello! This is Quinn\u0027s chat bot\" + NEWLINE +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"Currently supported commands: todo, deadline, event, list, done, delete, on, by, find\" + NEWLINE +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"Example usage:\" + NEWLINE +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ToDoCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DeadlineCommand.EXAMPLE_USAGE+ NEWLINE +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            EventCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ListCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DoneCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            DeleteCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            OnCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            ByCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            FindCommand.EXAMPLE_USAGE + NEWLINE +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "            \"Type \\\"\" + duke.Main.END_STRING + \"\\\" to exit\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Must be called before reading in user input"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        scannerObject \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Greet the user"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void greet() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        printPretty(GREETING);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Say goodbye to the user"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void sayGoodbye() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        printPretty(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Print a nicely formatted message to the user"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @param message the message to be printed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static void printPretty(String message) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(message);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println(LINE_SEPARATOR);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        System.out.println();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * Read in the next line that the user types"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     * @return a line of user input"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    public static String getNextLine() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "        return scannerObject.nextLine();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "quinnyyy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "quinnyyy": 78
    }
  }
]
