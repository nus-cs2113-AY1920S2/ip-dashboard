[
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Display all Tasks"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "User can view all the tasks and its completion status as indicated with a tick or cross."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Addition of New Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "User can choose to add task of different types (Todo, Deadline, Event)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Marking Task as Completed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "User can indicate tasks as done."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Removal of Task"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "User can delete task that he/ she deems irrelevant."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### Searching of Task"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "User can search of Task that matches the search keyword"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `todo \u003ctask_description\u003e` - Adding a Todo task"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Adding a task with the `todo` type "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`todo read book` | Got it. I\u0027ve added this task: [T][✘] read book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `deadline \u003cdeadline_description\u003e /by \u003cdate\u003e` - Adding a Deadline Task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Adding a task with the `deadline` type"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`deadline return book /by june 6th` | Got it. I\u0027ve added this task: [D][✘] return book (by: june 6th)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `event \u003cevent_description\u003e /at \u003cdate\u003e` - Adding a Event Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Adding a task with the `event` type"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`event project meeting /at Aug 6th 2-4pm` | Got it. I\u0027ve added this task: [E][✘] project meeting (at: Aug 6th 2-4pm)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `list` - View all tasks in Duke"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Displays all task that were added, both completed and uncompleted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage: `list`"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`list` |  1. [T][✘] read book \u003cbr\u003e 2. [D][✘] return book (by: june 6th) \u003cbr\u003e 3. [E][✘] project meeting (at: Aug 6th 2-4pm) \u003cbr\u003e 4. [T][✘] join sports club \u003cbr\u003e 5. [T][✘] borrow book \u003cbr\u003e 6. [D][✘] return book (by: Sunday) \u003cbr\u003e 7. [E][✘] project meeting (at: Mon 2-4pm)`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `done (item_number)` - Mark Task as Done"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Indicate task as completed by its item number"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`done 1` |  Nice! I\u0027ve marked this task as done: [T][✓] read book"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `delete (item_number)` - Delete Specific Task"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Remove task by its item number"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`delete 2` | Item No.2 is removed from list"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `find \u003csearch_keyword\u003e` - Find Task with the Specified Keyword(s)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Search for tasks that are relevant to the search keyword"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`find book` | 1.[T][✓] read book \u003cbr\u003e 2.[D][✓] return book (by: June 6th)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "### `bye` - Exit the Program"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Stop running Duke"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "`bye` | Bye bye! Talk to me again soon!"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "alwayshuizhen": 67
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Parser.ParseCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Storage.FileOperation;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Ui.TextUi;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Exception.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import TaskList.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a Task Manager to keep track of different types of tasks"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private FileOperation storage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private TextUi ui;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private ParseCommand command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private ArrayList\u003cTask\u003e taskList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Duke(String filepath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ui \u003d new TextUi();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        storage \u003d new FileOperation(filepath);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            taskList \u003d storage.loadTaskList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            ui.showLoadingError();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Program to run the task manager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ui.printWelcomeMsg();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String fullCommand \u003d ui.readCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                command \u003d new ParseCommand(fullCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                command.execute(taskList, ui, storage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                isExit \u003d command.isExit();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printIOError();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } catch (DukeException | NullPointerException e){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printFormatError();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ui.printExitMsg();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Main method to run program with the name of file with preloaded tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public static void main(String[] args){"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        new Duke(\"tasksData.txt\").run();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 56,
      "-": 3
    }
  },
  {
    "path": "src/main/java/Exception/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package Exception;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 4
    }
  },
  {
    "path": "src/main/java/Parser/ParseCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package Parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import TaskList.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Ui.TextUi;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Storage.FileOperation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import Exception.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a parser for commands. A ParseCommand object corresponds to"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * the full command, the type of command and the status of the program"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class ParseCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private Boolean exitStatus \u003d false;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private String cmdType;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private String fullCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ParseCommand(String fullCommand) throws DukeException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.cmdType \u003d cmdTypeIdentifier(fullCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the type of command for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param cmd The command to be checked for type"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return type The action to process"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private String cmdTypeIdentifier(String cmd) throws DukeException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (cmd.equalsIgnoreCase(\"list\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"LIST\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.equalsIgnoreCase(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                exitStatus \u003d true;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"BYE\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.substring(0,4).equalsIgnoreCase(\"find\")) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"FIND\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.substring(0,4).equalsIgnoreCase(\"done\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"DONE\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.substring(0,4).equalsIgnoreCase(\"todo\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"TODO\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.substring(0,5).equalsIgnoreCase(\"event\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"EVENT\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.substring(0,6).equalsIgnoreCase(\"delete\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"DELETE\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else if (cmd.substring(0,8).equalsIgnoreCase(\"deadline\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                return \"DEADLINE\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the status of program."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the status of the program"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public boolean isExit () {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return exitStatus;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the type of command for execution."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param ui The Textui object for printing of values"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param storage The FileOperation object for the writing of the tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws IOException If there is writing error"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e taskList, TextUi ui, FileOperation storage) throws IOException, DukeException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (cmdType !\u003d null) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            switch (cmdType) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"LIST\":"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printTaskList(taskList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"DONE\":"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                markTaskAsDone(taskList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"TODO\":"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                taskList.add(createToDo(taskList));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"EVENT\":"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                taskList.add(createEvent(taskList));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"DEADLINE\":"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                taskList.add(createDeadline(taskList));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"DELETE\":"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                taskList.remove(findObjectToRemove(taskList));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            case \"FIND\":"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                ui.printTaskList(findTask(taskList));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            storage.saveTaskList(taskList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Find task using keyword specified by user"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is complete (i.e. invalid item number)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cTask\u003e findTask(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String keyword;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            keyword \u003d fullCommand.substring(5);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(keyword);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (Task item:taskList) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (item.getDescription().contains(keyword)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                filteredTasks.add(item);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return filteredTasks;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Change the Task completion to done"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is complete (i.e. invalid item number)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void markTaskAsDone(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        int lenOfCmd \u003d fullCommand.length() - 1;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int index \u003d Integer.parseInt(fullCommand.substring(lenOfCmd)) - 1;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            taskList.get(index).setDone();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Nice! I\u0027ve marked this task as done: \" + taskList.get(index).printObject());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException | NumberFormatException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the task to be added into the tasklist"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return a task of the Todo Class"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Todo createToDo(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Todo item \u003d new Todo(fullCommand.substring(5));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task: \" + item.printObject());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Now you have \" + (taskList.size() + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException  e) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the task to be added into the tasklist"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return a task of the Event Class"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Event createEvent(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int indexOfAt \u003d fullCommand.indexOf(\"/at\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String eventDescription \u003d fullCommand.substring(6, indexOfAt - 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String eventDate \u003d fullCommand.substring(indexOfAt + 4);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Event item \u003d new Event(eventDescription, eventDate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task: \" + item.printObject());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Now you have \" + (taskList.size() + 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the task to be added into the tasklist"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return a task of the Deadline Class"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Deadline createDeadline(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int indexOfBy \u003d fullCommand.indexOf(\"/by\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String deadlineDesc \u003d fullCommand.substring(9, indexOfBy-1);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String deadlineDate \u003d fullCommand.substring(indexOfBy+4);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Deadline item \u003d new Deadline(deadlineDesc, deadlineDate);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Got it. I\u0027ve added this task: \" + item.printObject());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Now you have \"+ (taskList.size()+1) +\" tasks in the list.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return item;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the index of the Task to be removed"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of the different type of tasks"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return index of object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws DukeException If the command is invalid"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int findObjectToRemove(ArrayList\u003cTask\u003e taskList) throws DukeException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            int indexOfObject \u003d Integer.parseInt(fullCommand.substring(7)) - 1;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Noted. I\u0027ve removed this task: \" + taskList.get(indexOfObject).printObject());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"Now you have \" + (taskList.size() - 1) + \" tasks in the list.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            return indexOfObject;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (StringIndexOutOfBoundsException e){"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (IndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            throw new DukeException();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 224
    }
  },
  {
    "path": "src/main/java/Storage/FileOperation.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package Storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import TaskList.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a file operation. A FileOperation object corresponds to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * the different manipulation of tasks for retrieval and storage."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class FileOperation {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public int COUNTER \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    File f;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    String PATHNAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public FileOperation(String filepath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        f \u003d new File(filepath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        PATHNAME \u003d f.getAbsolutePath();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the type of command for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the list of tasks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws FileNotFoundException when the file to load is not found"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public ArrayList\u003cTask\u003e loadTaskList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (f.exists()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            Scanner s \u003d new Scanner(f); // create a Scanner using the File as the source"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            while (s.hasNext()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String newline \u003d s.nextLine();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String[] newlineByPart \u003d newline.replaceAll(\"[\\\\s][\\\\|][\\\\s]\",\",\").split(\",\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                String typeOfTask \u003d newlineByPart[0];"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               if (typeOfTask.equalsIgnoreCase(\"t\")){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   Todo item \u003d new Todo(newlineByPart[2]);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   taskList.add(item);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               } else if (typeOfTask.equalsIgnoreCase(\"d\")) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   Deadline item \u003d new Deadline(newlineByPart[2], newlineByPart[3]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   taskList.add(item);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               } else if (typeOfTask.equalsIgnoreCase(\"e\")) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   Event item \u003d new Event(newlineByPart[2], newlineByPart[3]);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   taskList.add(item);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               if (newlineByPart[1].equalsIgnoreCase(\"1\")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                   taskList.get(COUNTER).setDone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "               COUNTER++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return taskList;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Save the tasks into a text file"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList The list of tasks"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @throws IOException If there is error while writing"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void saveTaskList (ArrayList\u003cTask\u003e taskList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        FileWriter fw \u003d new FileWriter(PATHNAME);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            String convertedTask \u003d taskList.get(i).createStrForSaving();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            if (i !\u003d taskList.size() - 1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                fw.write(convertedTask + System.lineSeparator());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                fw.write(convertedTask);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 75
    }
  },
  {
    "path": "src/main/java/TaskList/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a task with deadline"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    private LocalDate deadline;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.itemType \u003d \u0027D\u0027;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Change the deadline date from string to localdate object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param oldFormat The string type date"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void convertDeadlineFormat(String oldFormat) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            deadline \u003d LocalDate.parse(oldFormat);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            by \u003d deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            by \u003d oldFormat;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the content of the Deadline type task"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String printObject() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        convertDeadlineFormat(by);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return (\"[\" + itemType + \"][\" + getStatusIcon() + \"] \"+ description + \" (by: \" + by + \")\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Reformat Deadline task format for saving into file"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String createStrForSaving() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return itemType + \" | \" + convertBoolean() + \" | \" + description + \" | \" + by;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 49
    }
  },
  {
    "path": "src/main/java/TaskList/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a task with deadline"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    protected String eventDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Event(String description, String eventDate) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.eventDate \u003d eventDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.itemType \u003d \u0027E\u0027;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the content of the Event type task"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String printObject() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return (\"[\" + itemType + \"][\" + getStatusIcon() +\"] \"+ description + \" (at: \" + eventDate + \")\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Reformat Event task format for saving into file"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String createStrForSaving() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return itemType + \" | \" + convertBoolean() + \" | \" + description + \" | \" + eventDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 29
    }
  },
  {
    "path": "src/main/java/TaskList/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a Task with description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    protected char itemType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the completion status of task through icon"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String getDescription() {return description;}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Set task as completed"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void setDone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the content of the task"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String printObject(){"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return \"\\0\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the string for saving to file"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String createStrForSaving() { return \"\"; }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Returns the converted format for saving to file"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String convertBoolean(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return (isDone \u003d\u003d true) ? \"1\" : \"0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 50
    }
  },
  {
    "path": "src/main/java/TaskList/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package TaskList;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a task with the type Todo"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        this.itemType \u003d \u0027T\u0027;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the content of the Todo type task"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String printObject() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return (\"[\" + itemType + \"][\" + getStatusIcon() +\"] \"+ description);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Reformat Todo task format for saving into file"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String createStrForSaving() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return itemType + \" | \" + convertBoolean() + \" | \" + description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 27
    }
  },
  {
    "path": "src/main/java/Ui/TextUi.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "package Ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import TaskList.Task;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " * Represents a text formatter to print objects"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "public class TextUi {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public TextUi(){}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the opening message of the program"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printWelcomeMsg() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___| \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(logo + \" says hello :)\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"\\nWhat can i do for you?\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the exiting message of the program"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printExitMsg() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"Bye bye! Talk to me again soon!\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Reading of user input"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @return the user\u0027s input"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public String readCommand() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        Scanner myObj \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        String cmd \u003d myObj.nextLine();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        return cmd;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the error message of the program when"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * loading an invalid file into list of Tasks"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void showLoadingError() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"Duke has encountered a loading error :( Let\u0027s create one!\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the error message of the program when"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * there exist an error in loading/saving from/to file"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printIOError() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"IO saving tasklist error occured!\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the error message of the program when"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * the user has given a command that cannot be processed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printFormatError() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        System.out.println(\"I cannot understand the command, please check again.\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * Prints the content of the list of Tasks"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     * @param taskList the list of Tasks"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    public void printTaskList(ArrayList\u003cTask\u003e taskList){"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        if (taskList.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(\"There are currently nothing to do! Add something!\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        for (int i \u003d 0; i \u003c taskList.size(); i++) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "            System.out.println(i + 1 + \". \" + taskList.get(i).printObject());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 80
    }
  },
  {
    "path": "tasksData.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "T | 1 | read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "D | 0 | return book | June 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "E | 0 | project meeting | Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "T | 1 | join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "T | 0 | buy grocery"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "E | 0 | concert | sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "D | 0 | assignment | Dec 1 2020"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 7
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "todo read book"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "deadline return book /by june 6th"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "event project meeting /at Aug 6th 2-4pm"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "todo join sports club"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "todo borrow book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "deadline return book /by Sunday"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "event project meeting /at Mon 2-4pm"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "list"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "done 4"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "list"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "delete 2"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "list"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "bye"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 14
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\TaskList\\*.java ..\\src\\main\\java\\Ui\\*.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "java -Dfile.encoding\u003dUTF8 -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "alwayshuizhen"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      }
    ],
    "authorContributionMap": {
      "alwayshuizhen": 21
    }
  }
]
