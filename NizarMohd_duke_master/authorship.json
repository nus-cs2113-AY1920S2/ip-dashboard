[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.7\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    archiveVersion \u003d \"0.1.3\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "javafx {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    version \u003d \"11.0.2\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 14,
      "-": 18
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. Introduction"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. Quick Start"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. FAQ"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. Features"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. Command Summary"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Nini* is a Task Manager built upon Duke\u0027s starter "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "code that assists Users with their lists of tasks. "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can use *Nini* to manage a list of Todos or "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Events or Deadlines. For more details of how *Nini*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "manages the list of Tasks, refer to the *Features* section below."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## Quick Start"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Ensure you have at least Java 11 or above to run the Jar file."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Ensure you have downloaded the Jar file successfully."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t* (Click [here](https://github.com/NizarMohd/duke/releases/download/A-Release/Nini.Jar.Root.Folder.zip) for Jar file)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Navigate through command prompt to the directory that the Jar "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  file has been downloaded into."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Type {java -jar duke.jar} to start using *Nini*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "## FAQ "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. __The software says I have a missing duke file and it could not create one for me__ \u003cbr/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\tPlease create a text file called \u0027duke.txt\u0027 file inside a folder called \u0027data\u0027."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\tEnsure that the data folder is under the same directory as the Jar file. \u003cbr/\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\tExample: \u003cbr/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t![Capture](Capture.PNG)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "1. __I am unable to add Tasks that contains \"~\" as a Task description__"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\tTilde or also known as \"~\" is used as a delimiter when storing data. Therefore, using "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\ttilde as part of the Task description will lead to inaccurate storage of data. "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\tPlease find an alternative for the usage of tilde."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "###  Feature 1 "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can _add_ Tasks. There exists "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "three different Tasks: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Todo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Event "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "* Deadline. "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Note: Event and Deadline Tasks have an additional"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "aspect in which timing is also stored on top of "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Task description. Timing has to be entered as follows:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "`yyyy-MM-dd HH:mm`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "When a Task is added, *Nini* will"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "inform the User accordingly."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Feature 2"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can mark Tasks as _done_. "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User must indicate the index in the Task List"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "that the Task is assigned to. "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "When a task is marked as _done_,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Nini* will inform the User and update"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "the status."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User also has the option to mark all Tasks as "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "done. In which *Nini* will show the user that "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "all Taskshas its status updated."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Feature 3 "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can _delete_ Tasks."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User must indicate the index in the Task List"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "that the Task is assigned to. "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "When a Task is deleted, *Nini* will update"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "the User on the specific Task deleted. "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User also has the option to delete all Tasks."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "In doing so, *Nini* will inform the User that all"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Tasks have been deleted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Feature 4"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can list Tasks."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Nini* will inform User of the all the "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Tasks currently stored in the Task List."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Tasks with \"DONE\" are Tasks that were deemed as completed "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "by User while Tasks with \"PENDING\" are Tasks that have yet "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "to be deemed as complete by the User."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Feature 5 "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can find Tasks."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "*Nini* will search for a list of Tasks that matches"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "the key entered by the User."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### Feature 6"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "User can ask for help from *Nini*."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "In response, *Nini* will display a list"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "of commands that *Nini* is capable of doing. "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "##  Usage"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Todo` - Adds a Task of type Todo."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To add a Todo Task, type {todo} {task description} "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    todo read books"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      [T][Status: PENDING] read books"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Event` - Adds a Task of type Event."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To add an Event Task, type {event} {task description} {/} {timing}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     event celebrate birthday / 2020-02-16 14:00 "
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t__________________________________________________________"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t   [E][Status: PENDING] celebrate birthday (at: SUNDAY, 16"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t FEBRUARY 2020 14:00 )"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t Now you have 2 tasks in the list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t__________________________________________________________"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Deadline` - Adds a Task of type Deadline."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To add a Deadline Task, type {deadline} {task Description} {/} {timing}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     deadline finish homework / 2020-02-18 09:00"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t__________________________________________________________"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t Got it. I\u0027ve added this task:"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t   [D][Status: PENDING] finish homework (by: TUESDAY, 18 "
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t FEBRUARY 2020 9:00 )"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t Now you have 1 tasks in the list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t__________________________________________________________ "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Done` - Marks a specific Task as completed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To mark a Task as completed, type {done} {task index}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    done 1"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Nice! I\u0027ve marked this task as done:  "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "      [T][Status: DONE] read books  "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________  "
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To mark _ALL_ Tasks as completed, type {done} {all}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    done all"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________  "
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    All tasks have been marked as done!"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    1.[T][Status: DONE] read books  "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    2.[E][Status: DONE] celebrate birthday (at: SUNDAY, 16 "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    FEBRUARY 2020 14:00 )  "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    3.[D][Status: DONE] finish homework (by: TUESDAY, 18 "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    FEBRUARY 2020 9:00 )  "
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________  "
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Delete` - Delete Tasks from Task List."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To delete Tasks from Task List, type {delete} {task index}"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    delete 1"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Noted. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       [T][Status: DONE] read books"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Now you have 3 tasks in the list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To delete _ALL_ Tasks from the Task List, type {delete} {all}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Note: when using this command, *Nini* will prompt the User to"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "confirm if they intend on deleteing _ALL_ Tasks. User is then "
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "required to type Y for Yes or N for No."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage: "
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    delete all"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Are you sure that you want ALL tasks to be deleted?"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Type Y for Yes and N for No"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    Y _(USER INPUT)_"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "       All tasks have been deleted!"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `List` - Lists all currently available Tasks in the Task List."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "To retrieve the current list of Tasks, type {list}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     List"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "  "
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Here are the tasks in your list:"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     1.[T][Status: DONE] read books  "
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     2.[E][Status: DONE] celebrate birthday (at: SUNDAY, "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     16 FEBRUARY 2020 14:00 )  "
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     3.[D][Status: DONE] finish homework (by: TUESDAY, "
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     18 FEBRUARY 2020 9:00 ) "
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Find` - Finds a list Tasks that matches the search key."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    Find books"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     Here are the matching tasks in your list!"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     1.[T][Status: PENDING] read books"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    __________________________________________________________"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "### `Help`- Lists commands that can be carried out by *Nini*"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "Example of usage:"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    help"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Expected outcome: "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t__________________________________________________________"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t Below would be a list of commands that you will find "
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t useful!"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 1. [Todo] - Adds a Task of type Todo."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To add a Todo Task, type {todo} {task description}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 2. [Event] - Adds a Task of type Event."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To add an Event Task, type {event} {task description} "
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    {/} {timing}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 3. [Deadline] - Adds a Task of type Deadline."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To add a Deadline Task, type {event} {task description} "
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    {/} {timing}"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 4. [Done] - Marks a specific Task as completed."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To mark a Task as completed, type {done} {task index}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To mark ALL Tasks as completed, type {done} {all}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 5. [Delete] - Delete Tasks from Task List."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To delete Tasks from Task List, type {delete} "
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    {task index}"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To delete ALL Tasks from the Task List, type {delete}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    {all}"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    ***Note: when using this command, Nini will prompt the "
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    User to confirm if they intend on deleting _ALL_ Tasks."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    User is then required to type Y for Yes or N for No.***"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 6. [List] - Lists all currently available Tasks in the Task "
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    List."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To retrieve the current list of Tasks, type {list}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t 7. [Find] - Finds a list Tasks that matches the search key."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t    To find a list of matching Tasks, type {find}"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "\t__________________________________________________________"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    "
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 275,
      "-": 23
    }
  },
  {
    "path": "gradlew.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem Copyright 2015 the original author or authors."
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem Licensed under the Apache License, Version 2.0 (the \"License\");"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem you may not use this file except in compliance with the License."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem You may obtain a copy of the License at"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem      https://www.apache.org/licenses/LICENSE-2.0"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem Unless required by applicable law or agreed to in writing, software"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem distributed under the License is distributed on an \"AS IS\" BASIS,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem See the License for the specific language governing permissions and"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem limitations under the License."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "@if \"%DEBUG%\" \u003d\u003d \"\" @echo off"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@rem  Gradle startup script for Windows"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@rem"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "@rem ##########################################################################"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Set local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" setlocal"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "set DIRNAME\u003d%~dp0"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%DIRNAME%\" \u003d\u003d \"\" set DIRNAME\u003d."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_BASE_NAME\u003d%~n0"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "set APP_HOME\u003d%DIRNAME%"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "set DEFAULT_JVM_OPTS\u003d\"-Xmx64m\" \"-Xms64m\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Find java.exe"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "if defined JAVA_HOME goto findJavaFromJavaHome"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003djava.exe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "%JAVA_EXE% -version \u003eNUL 2\u003e\u00261"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\" \u003d\u003d \"0\" goto init"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is not set and no \u0027java\u0027 command could be found in your PATH."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ":findJavaFromJavaHome"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_HOME\u003d%JAVA_HOME:\"\u003d%"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "set JAVA_EXE\u003d%JAVA_HOME%/bin/java.exe"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "if exist \"%JAVA_EXE%\" goto init"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "echo."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "echo Please set the JAVA_HOME variable in your environment to match the"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "echo location of your Java installation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "goto fail"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ":init"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Get command-line arguments, handling Windows variants"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "if not \"%OS%\" \u003d\u003d \"Windows_NT\" goto win9xME_args"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Slurp the command line arguments."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "set _SKIP\u003d2"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ":win9xME_args_slurp"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "if \"x%~1\" \u003d\u003d \"x\" goto execute"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "set CMD_LINE_ARGS\u003d%*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ":execute"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Setup the command line"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "set CLASSPATH\u003d%APP_HOME%\\gradle\\wrapper\\gradle-wrapper.jar"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@rem Execute Gradle"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "\"%JAVA_EXE%\" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% \"-Dorg.gradle.appname\u003d%APP_BASE_NAME%\" -classpath \"%CLASSPATH%\" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ":end"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "@rem End local scope for the variables with windows NT shell"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%ERRORLEVEL%\"\u003d\u003d\"0\" goto mainEnd"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ":fail"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "rem the _cmd.exe /c_ return code!"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "if  not \"\" \u003d\u003d \"%GRADLE_EXIT_CONSOLE%\" exit 1"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "exit /b 1"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ":mainEnd"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "if \"%OS%\"\u003d\u003d\"Windows_NT\" endlocal"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ":omega"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 17,
      "-": 83
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.IllegalDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *Hello, World!\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *The program implements an application .\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *that keeps a list of Tasks\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @author  Nizar Mohamed\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @version 2.0\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @since   2020-02-21\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke{"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private ArrayList\u003cTask\u003e l1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String FILEPATH \u003d\"data/duke.txt\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Duke(String filePath) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.l1\u003dstorage.loadFile();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.ui.showLoadingError();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.l1 \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.storage \u003d new Storage(ui);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method runs continuously, asking user for inputs\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * until user input \u0027bye\u0027\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void run(){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int status \u003d 1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.ui.printWelcomeMessage();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (status \u003d\u003d 1) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                String input \u003d this.ui.getUserIn();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                this.ui.printLine();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                Command command \u003d Parser.parse(input);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                command.execute(this.l1, this.ui, this.storage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                status\u003dcommand.getStatus();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }catch(IllegalDukeException | FileNotFoundException e ){"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                this.ui.promptUser(e.getMessage());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }finally{"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                this.ui.printLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.ui.close();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the main method for Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param args This is the argument enter (if any) by User when running Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IOException if the data directory is missing.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void main(String[] args) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            new Duke(FILEPATH).run();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch(FileNotFoundException e){"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            System.err.println(e.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 72,
      "-": 3
    }
  },
  {
    "path": "src/main/java/duke/asset/IllegalDukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.asset;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is an extension of Exception that is unique to Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class IllegalDukeException extends Exception{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public IllegalDukeException(String message){"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 9
    }
  },
  {
    "path": "src/main/java/duke/asset/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.asset;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the class that stores the list of tasks in an ArrayList.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class also saves and loads the ArrayList into data.txt.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private File inFile;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String STORAGE_DELIMITER \u003d \"~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor is called only when data folder is missing.\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This is the input. Allows for the software to inform\u003cbr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *           Users on missing data folder and that the software is\u003cbr\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *           creating one.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IOException if data directory is missing.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if duke.txt is missing.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Storage(Ui ui) throws IOException, FileNotFoundException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                ui.promptUser(\"Creating new data file for Nini\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                String dir\u003d \"data\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                File file \u003d new File(dir);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                boolean bool \u003d file.mkdir();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                dir+\u003d\"/duke.txt\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                File file2 \u003d new File(dir);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(bool \u0026\u0026 file2.createNewFile()){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.promptUser(\"Directory created successfully.\\nData for Nini is stored at:\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            file2.getAbsolutePath());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    this.inFile \u003d new File (dir);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }else{"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new FileNotFoundException(\"Sorry could not create specified directory, refer to User guide \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            + \"on missing file error\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor creates a new Storage class.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param filePath This is the path of the data file (duke.txt) required for Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if data file (duke.txt) does not exist.\u003cbr\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Storage(String filePath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.inFile\u003d new File(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method loads data onto the software.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return The method returns an ArrayList of Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if duke.txt does not exist.\u003cbr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFile() throws FileNotFoundException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Scanner in \u003d new Scanner(this.inFile);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cTask\u003e l1\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (in.hasNextLine()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] temp \u003d in.nextLine().split(STORAGE_DELIMITER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            initList(temp, l1);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        in.close();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return l1;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method initialises the ArrayList before using it.\u003cbr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param temp This is the data from the text file that has\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *             been split into arrays of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the ArrayList of Tasks that is used by the software.\u003cbr\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void initList(String[] temp, ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch(temp[0]){"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"T\" :"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                Todo todo \u003d new Todo(temp[2]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(temp[1].equals(\"Y\")){"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    todo.done();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                l1.add(todo);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"D\" :"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                Deadline deadline \u003d new Deadline(temp[3]);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                deadline.setBy(temp[1]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(temp[2].equals(\"Y\")){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    deadline.done();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                l1.add(deadline);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"E\" :"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                Event event \u003d new Event(temp[3]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                event.setAt(temp[1]);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(temp[2].equals(\"Y\")){"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    event.done();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                l1.add(event);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method saves the data entered by the User into a text file.\u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the ArrayList of Tasks that is used by the software.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if duke.txt does not exist.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void saveFile(ArrayList\u003cTask\u003e l1) throws FileNotFoundException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            PrintWriter outText\u003d new PrintWriter(this.inFile);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for(int i\u003d0; i\u003c l1.size(); i++){"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outText.println(l1.get(i).toFile());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            outText.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 117
    }
  },
  {
    "path": "src/main/java/duke/asset/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.asset;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.StringTokenizer;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class handles with the interaction with User.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Ui  {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final int MAX_LINE_LENGTH\u003d 56;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LINE \u003d \"\\t__________________________________________________________\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LIST_EMPTY\u003d \"\\t Oops! No task has been assigned yet! Please enter a task!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MISSING_FILE \u003d \"Data file \\\"data.txt\\\" is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MATCHING_TASK\u003d \"\\t Here are the matching tasks in your list!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NO_MATCHING_TASK \u003d \"\\t Oops! No such task can be found!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TASK_ADDED \u003d \"\\t Got it. I\u0027ve added this task:\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String AVAILABLE_TASKS \u003d \"\\t Here are the tasks in your list:\\n\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String GOODBYE_MESSAGE \u003d \"\\t Bye.Hope to see you again soon!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String REMOVE_ACKNOWLEDGEMENT \u003d \"\\t Noted. I\u0027ve removed this task: \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DONE_ACKNOWLEDGEMENT \u003d \"\\t Nice! I\u0027ve marked this task as done:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DONE_ALL_ACKNOWLEDGEMENT \u003d \"\\t All tasks have been marked as done!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DAB\u003d \"\\t ``````````````````````````````````````````````````````````\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ````````````````````````````````:v(v\u0027`````````````````````\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ```````````````````````````,)4|ex` `L}````````````````````\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````````````````!s\\\"\u0027h `M:   ^z_;)T```````````````\\n\" +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````````````````Z   u|}Z:        \\\"}``````````````\\n\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````````````:\u003d?)                \u0027B?L\u0027```````````\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````````````\u0027Z                    ;Yp\\\"```````````\\n\" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````````````.e                      ?_```````````\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ```````````````````\u0027QDGH                    .5````````````\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ````````````````````I#g\u0027         \u0027_`        ||````````````\\n\" +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ```````````:mX_``````YhL`      `\u0027q!`   ?     h````````````\\n\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ```````````\u0027Qbs)|L\u003d_V\\\" \u0027Y}     ^\u0027q@\u0026b\u003dc\u003d_`  ,Z````````````\\n\" +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ````````````q\u003e     \u0027T,   ,o\\\"    ;\\\"@c.   .sVx~`````````````\\n\" +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ````````````c!             \\\"bh` `,p       z:``````````````\\n\" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````q.              ngDQmh8s     X\u0027``````````````\\n\" +"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````LY\\\"             :n}\u003e``b;   _V```````````````\\n\" +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ````````````````q?,                ?;   \\\"V````````````````\\n\" +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````KvR                  \u0027  )x_`````````````````\\n\" +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````zjL                  GLY\\\"```````````````````\\n\" +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ```````````````M                 .I)``````````````````````\\n\" +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ```````````````Lz                `D:``````````````````````\\n\" +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````vu`    (I)_;\\\"\\\".      P.`````````````````````\\n\" +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````p     :X.\u0027:^,\\\"\u003dn    \\\"q``````````````````````\\n\" +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````)0X?^:)I````````m\u0027   :j``````````````````````\\n\" +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t `````````````.IGD8k\u0027`````````\u003c\u0026G55M```````````````````````\\n\" +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"\\t ``````````````````````````````````````````````````````````\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor is called during the run process of Duke\u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * to create a IO class for Ui.\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This methods gets the User input.\u003cbr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return the Scanner class to read User input.\u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getUserIn(){"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return in.nextLine();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints the welcome message to User.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printWelcomeMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String banner \u003d \"\\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"\\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"\\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"\\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                + \"\\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\\n\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String logo \u003d \"\\t~~~~~~~~~~~~~~~________   ___  ________   ___~~~~~~~~~~~~\\n\" +"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t~~~~~~~~~~~~~~|\\\\   ___  \\\\|\\\\  \\\\|\\\\   ___  \\\\|\\\\  \\\\~~~~~~~~~~~\\n\" +"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t~~~~~~~~~~~~~~\\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\~~~~~~~~~~\\n\" +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t~~~~~~~~~~~~~~~\\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\~~~~~~~~~\\n\" +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t~~~~~~~~~~~~~~~~\\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\ \\\\  \\\\\\\\ \\\\  \\\\ \\\\  \\\\~~~~~~~~\\n\" +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t~~~~~~~~~~~~~~~~~~\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\__\\\\ \\\\__\\\\\\\\ \\\\__\\\\ \\\\__\\\\~~~~~~\\n\" +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t~~~~~~~~~~~~~~~~~~\\\\|__| \\\\|__|\\\\|__|\\\\|__| \\\\|__|\\\\|__|~~~~~~~\\n\";"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t\" + \"Hello from\\n\" + banner + logo + banner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t\" + \"What can I do for you?\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints constant LINE\u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printLine(){"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(LINE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method also ensures that the message printed is within the standard\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * length, which is the length of the constant LINE, 58 characters."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param message is the String that we intend to format to a standard length\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                per line.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String of standard length per line"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String formatMessage(String message) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringTokenizer token \u003d new StringTokenizer(message, \" \");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder standardLengthMessage \u003d new StringBuilder(message.length());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        int lineLength \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        while (token.hasMoreTokens()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String word \u003d token.nextToken();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (lineLength + word.length() \u003e MAX_LINE_LENGTH) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                standardLengthMessage.append(\"\\n\\t \");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                lineLength \u003d 0;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            standardLengthMessage.append(word + \" \");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            lineLength +\u003d word.length() + 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return standardLengthMessage.toString().stripTrailing();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method informs User that a new Task class has been created and added to list\u003cbr\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the first argument of this method. It is the list of current\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *           Tasks in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param task This is the second argument. This is the task that is to be printed to inform\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *             user that the stated task has just been added.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printAddTask(ArrayList\u003cTask\u003e l1, Task task){"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(TASK_ADDED);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t  \" + formatMessage(task.toString()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t Now you have \" + l1.size()+ \" tasks in the list.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method is to print the ArrayList that has been given to it."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the ArrayList that needs to be printed."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printList(ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for (int i \u003d 0; i \u003c l1.size(); i++) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            int count \u003d i + 1;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            Task task \u003d l1.get(i);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out.println(\"\\t \" + formatMessage(count + \".\" + task.toString()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method shows User of all available Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 is the current list of available Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * If l1 is empty, method will inform user that no Tasks\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * are available.\u003cbr\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printCurrentList(ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(l1.isEmpty()){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out.println(LIST_EMPTY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out.print(AVAILABLE_TASKS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            printList(l1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints good bye message to User.\u003cbr\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printGoodByeMessage(){"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(GOODBYE_MESSAGE);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(DAB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method informs User that stated Task has been marked as done.\u003cbr\u003e"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param task This is the only argument for this method. It is the\u003cbr\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *             task that User wants to mark as done.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printDone(Task task){"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(DONE_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(formatMessage(\"\\t   \"+task.toString()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method informs User that stated Task has been deleted.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param task  This is the first argument of this method. It is\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *              the task that the User wants to delete.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1    This is the second argument of this method. It is\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *              the current list of Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printDelete(Task task, ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(REMOVE_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t   \" + formatMessage(task.toString()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t Now you have \" + l1.size() + \" tasks in the list.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method informs User that all Tasks has been marked as done.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the current list of Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printDoneAll(ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(DONE_ALL_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        printList(l1);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method lists the supported commands for User.\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printHelp(){"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String Help \u003d \"\\t 1. [Todo] - Adds a Task of type Todo.\\n\" +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To add a Todo Task, type {todo} {task description}\\n\"+"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t 2. [Event] - Adds a Task of type Event.\\n\" +"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To add an Event Task, type {event} {task description}\\n \" +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    {/} {timing}\\n\" +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t 3. [Deadline] - Adds a Task of type Deadline.\\n\" +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To add a Deadline Task, type {event} {task description}\\n\" +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    {/} {timing}\\n\" +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t 4. [Done] - Marks a specific Task as completed.\\n\" +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To mark a Task as completed, type {done} {task index}\\n\" +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To mark ALL Tasks as completed, type {done} {all}\\n\" +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t 5. [Delete] - Delete Tasks from Task List.\\n\" +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To delete Tasks from Task List, type {delete}\\n \" +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    {task index}\\n\" +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To delete ALL Tasks from the Task List, type {delete}\\n\" +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    {all}\\n\" +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    ***Note: when using this command, Nini will prompt the\\n\" +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    User to confirm if they intend on deleting _ALL_ Tasks.\\n\" +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    User is then required to type Y for Yes or N for No.***\\n\" +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t 6. [List] - Lists all currently available Tasks in the Task\\n\" +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    List.\\n\" +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To retrieve the current list of Tasks, type {list}\\n \"+"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t 7. [Find] - Finds a list Tasks that matches the search key.\\n\"+"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t    To find a list of matching Tasks, type {find}\";"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(\"\\t Below would be a list of commands that you will find\\n\" +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                \"\\t useful!\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(Help);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method informs User that data.txt is missing.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void showLoadingError(){"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out.println(MISSING_FILE);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method shows User the list of Tasks that matches with\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * User search key.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 is the list of all Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l2 is the list of matching Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void printFindList(ArrayList\u003cTask\u003e l1, ArrayList\u003cInteger\u003e l2){"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(l2.isEmpty()){"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out.println(NO_MATCHING_TASK);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out.println(MATCHING_TASK);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (int i \u003d 0; i \u003c l2.size(); i++) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                int count \u003d i + 1;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                Task task \u003d l1.get(l2.get(i));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                out.println(\"\\t \" + formatMessage(count + \".\" + task.toString()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method allows for other classes to print a message to the User.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param message This is the message that the other classes wish to prompt.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void promptUser(String message){"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            out.println(formatMessage(message));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method closes the System.in class of Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void close(){"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.in.close();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 273
    }
  },
  {
    "path": "src/main/java/duke/commands/AddCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.IllegalDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.parser.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the sub class of the Command class in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class adds tasks into the ArrayList based on User input.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class AddCommand extends Command   {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String timing;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private Task task;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This is the constructor that creates a new AddCommand class.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param fullCommand This is the input entered by User that has already\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                    been split into an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDukeException if the command entered is not supported by the software.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public AddCommand(String[] fullCommand) throws IllegalDukeException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String [] temp \u003d Parser.getTaskInfo(fullCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.action\u003dtemp[0];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.timing\u003dtemp[1];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method adds a Task.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the list of currently available Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void addTodo(ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Todo todo \u003d new Todo(this.action);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        l1.add(todo);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.task\u003dtodo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method adds a Task of type Deadline.\u003cbr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the list of currently available Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void addDeadline(ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Deadline deadline\u003d new Deadline(this.action);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        deadline.setBy(this.timing);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        l1.add(deadline);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.task\u003ddeadline;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method adds a Task of type Event.\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the list of currently available Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void addEvent(ArrayList\u003cTask\u003e l1){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Event event \u003d new Event(this.action);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        event.setAt(this.timing);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        l1.add(event);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.task\u003devent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e l1, Ui ui, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch(this.fullCommand[0]){"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"todo\" :"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                addTodo(l1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"deadline\" :"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                addDeadline(l1);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"event\" :"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                addEvent(l1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printAddTask(l1, this.task);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        storage.saveFile(l1);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 83
    }
  },
  {
    "path": "src/main/java/duke/commands/ByeCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the sub class of the Command class in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class changes the default status to -1, terminating\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * the run() method in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class prints the good bye message to User\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class ByeCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor creates a ByeCommand.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param fullCommand This is the input entered by user that has\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                    been split into an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public ByeCommand(String[] fullCommand){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(fullCommand );"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.status\u003d-1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e l1, Ui ui, Storage storage) throws FileNotFoundException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printGoodByeMessage();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        storage.saveFile(l1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the parent class of the Command class in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class stores a status which determines the continuation\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * of the run() method in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class also stores the full command entered by User in the\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * form of an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class does basic execution like listing available tasks\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * and commands in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class  Command  {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected int status;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected String[] fullCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_INPUT\u003d\"\\t OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. :(\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" Input command is wrong. Enter \\\"help\\\" for list of accepted commands\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor creates a Command.\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param fullCommand This is the input entered by user that has\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                    been split into an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Command(String[] fullCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.status \u003d 1;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.fullCommand \u003d fullCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method executes the Command.\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param l1 This is the list of currently available Tasks.\u003cbr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param ui This is the Ui class used in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param storage This is the Storage class used to store data in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDukeException if command entered by User is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws FileNotFoundException if duke.txt does not exist\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e l1, Ui ui, Storage storage) throws IllegalDukeException,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(this.fullCommand[0].equals(\"help\")){"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printHelp();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else if(this.fullCommand[0].equals(\"list\")){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            ui.printCurrentList(l1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDukeException(WRONG_INPUT);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        storage.saveFile(l1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method gets the status of the command.\u003cbr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return status of the Task. 1 means Command continues the program\u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *     -1 means the Command ends the program\u003cbr\u003e."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public int getStatus(){"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.status;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 61
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.IllegalDukeException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Ui;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is a sub class of the Command class in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class deletes a Task from the ArrayList based on the task\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * number stated by the User.\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class DeleteCommand extends Command  {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private int index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    boolean isAll\u003d false;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDEX_OUT_OF_RANGE \u003d \"\\t Task number provided is not valid. Press \\\"list\\\" to see\" +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" available list of task numbers\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String ALL_TASKS_ALREADY_DELETED \u003d\"\\t List is already empty!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DELETE_ALL_ACKNOWLEDGEMENT \u003d \"\\t All tasks have been deleted!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String DELETE_ALL_CONFIRMATION \u003d \"\\t Are you sure that you want ALL tasks to be deleted? \" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \"Type Y for Yes and N for No\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String IGNORE_DELETE_ALL \u003d \"\\t List was not modified! Enter \\\"list\\\" to ensure all tasks are\" +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" still in the list!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String YES_OR_NO_ONLY \u003d \"\\t I\u0027m sorry but the options are only Y for YES or N for NO!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor creates a DeleteCommand.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param fullCommand This is the input entered by user that has\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                    been split into an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public DeleteCommand(String[] fullCommand){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(fullCommand[1].equals(\"all\")){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.isAll\u003dtrue;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.index \u003d parseInt(fullCommand[1]) - 1;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e l1, Ui ui, Storage storage) throws IllegalDukeException, FileNotFoundException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if(l1.isEmpty()){"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalDukeException(ALL_TASKS_ALREADY_DELETED);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (this.isAll) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.promptUser(DELETE_ALL_CONFIRMATION);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    String confirmation \u003d ui.getUserIn().toLowerCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    while (!confirmation.equals(\"y\") \u0026\u0026 !confirmation.equals(\"n\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.promptUser(YES_OR_NO_ONLY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        confirmation \u003d ui.getUserIn().toLowerCase();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printLine();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (confirmation.equals(\"y\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        l1.clear();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.promptUser(DELETE_ALL_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.promptUser(IGNORE_DELETE_ALL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (this.index \u003e\u003d l1.size()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        throw new IllegalDukeException(INDEX_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        Task task \u003d l1.get(this.index);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        l1.remove(this.index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printDelete(task, l1);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        storage.saveFile(l1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 76
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.IllegalDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Storage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Ui;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is a sub class of the Command class in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class marks a Task as done based on the task\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * number stated by the User.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class DoneCommand extends Command  {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private int index\u003d0 ;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    boolean isAll\u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDEX_OUT_OF_RANGE \u003d \"\\t Task number provided is not valid. Press \\\"list\\\" to see\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" available list of task numbers\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String LIST_EMPTY\u003d \"\\t Oops! No task has been assigned yet! Please enter a task!\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor creates a DoneCommand.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param fullCommand This is the input entered by user that has\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                    been split into an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public DoneCommand(String[] fullCommand){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(fullCommand[1].equals(\"all\")){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.isAll\u003d true;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            this.index \u003d parseInt(fullCommand[1]) - 1;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e l1, Ui ui, Storage storage) throws IllegalDukeException,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if (l1.isEmpty()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalDukeException(LIST_EMPTY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (this.isAll) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    for (int i \u003d 0; i \u003c l1.size(); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        Task task \u003d l1.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        task.done();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    ui.printDoneAll(l1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (this.index \u003e\u003d l1.size()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        throw new IllegalDukeException(INDEX_OUT_OF_RANGE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        Task task \u003d l1.get(this.index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        task.done();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        ui.printDone(task);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        storage.saveFile(l1);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 59
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.Ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is a sub class of the Command class in Duke.\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class finds any Task which description matches\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * the key entered by User.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This constructor creates a FindCommand.\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param fullCommand This is the input entered by user that has\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *                    been split into an array of Strings.\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public FindCommand(String[] fullCommand){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(fullCommand);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void execute(ArrayList\u003cTask\u003e l1, Ui ui, Storage storage){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String key\u003dthis.fullCommand[1];"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ArrayList\u003cInteger\u003e l2\u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        for(Task task : l1){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if(task.getAction().contains(key)){"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                l2.add(l1.indexOf(task));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        ui.printFindList(l1, l2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 34
    }
  },
  {
    "path": "src/main/java/duke/parser/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import duke.asset.IllegalDukeException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.time.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "import static java.lang.Integer.parseInt;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class handles with making sense of commands\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * entered by Users\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class has four methods:\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 1) parseCommand() : splits User input by spaces\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 2) getTaskInfo() : separates the User input into two Strings (Action and Timing)\u003cbr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 3) validateCommand() : ensures that User input is valid and legal\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 4) parse() : assigns each command enter by User to the suitable Command class\u003cbr\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Parser  {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_INPUT\u003d\"\\t OOPS!!! I\u0027m sorry, but I don\u0027t know what that means. :(\" +"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" Input command is wrong. Enter \\\"help\\\" for list of accepted commands\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NO_TASK_NUMBER \u003d \"\\t Please enter a task number!\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String MULTIPLE_WHITE_SPACES\u003d \"\\\\s+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_USAGE_OF_COMMAND \u003d \" cannot be used with other commands\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NOT_INTEGER \u003d \"\\t Argument after command used is not an integer!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDICATE_TIMING_INDICATOR \u003d \"\\t Use \\\"/\\\" to indicate timing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String NON_POSITIVE_INTEGER \u003d \"\\t Task index cannot be negative or zero!\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String INDICATE_TIMING \u003d\"\\t Please enter a timing!\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String WRONG_TIMING_FORMAT\u003d\"\\t Timing format is wrong! Ensure it is either \\\"yyyy-MM-dd\\\"\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" or \\\"yyyy-MM-dd HH:mm\\\" ***Hours are in 24 hrs format***\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String AVOID_DELIMITER \u003d \"\\t Please refrain from using any \\\"~\\\" as it will lead to\" +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            \" improper storage of your list!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String TIMING_INDICATOR \u003d \"/\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String SPACE \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String EMPTY_TIMING_CHECKER \u003d \"*\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method splits User input by spaces into an array of Strings\u003cbr\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @param inCommand  This is the full input entered by User.\u003cbr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @return This returns the array of Strings that is split by spaces.\u003cbr\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String[] parseCommand(String inCommand) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        inCommand \u003d inCommand.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] temp \u003d inCommand.split(MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return temp;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method ensures that timing entered by User is valid.\u003cbr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param timing This is the timing given by User.\u003cbr\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDukeException if timing entered is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void validateTiming(String timing) throws IllegalDukeException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] temp \u003dtiming.split(MULTIPLE_WHITE_SPACES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            LocalDateTime dateTime \u003d LocalDateTime.parse(timing, formatter);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }catch(DateTimeParseException e){"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDukeException(WRONG_TIMING_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method converts timing from LocalDateTime\u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * format to a meaningful String format.\u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param inTiming This is the timing in LocalDateTime.\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return timing in the following format: dd Month yyyy HH:mm\u003cbr\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String convertToDateFormat(String inTiming){"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        LocalDateTime dateTime \u003d LocalDateTime.parse(inTiming, formatter);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Integer day \u003d dateTime.getDayOfMonth();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        DayOfWeek dayOfWeek\u003d dateTime.getDayOfWeek();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Month month \u003ddateTime.getMonth();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Integer year \u003ddateTime.getYear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Integer hour \u003ddateTime.getHour();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Integer min \u003ddateTime.getMinute();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String minute \u003d formatTiming(min);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String hourString \u003d formatTiming(hour);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return String.format(\" %s, %s %s %s %s:%s \", dayOfWeek.toString(), day.toString(), month.toString(),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                year.toString(), hourString, minute);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method separates User input into two Strings (Action and Timing)\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @param temp This is the array of Strings that was split by parseCommand().\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @return String[]  This returns the two Strings, Action and Timing.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @throws IllegalDukeException if command entered by the User is invalid.\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String[] getTaskInfo(String[] fullCommand) throws IllegalDukeException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder action \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        StringBuilder timing \u003d new StringBuilder();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        boolean flip \u003d false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(fullCommand[0].equals(\"todo\")){"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for(int i\u003d1; i\u003cfullCommand.length; i++){"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                action.append(fullCommand[i]).append(SPACE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            for (int i \u003d 1; i \u003c (fullCommand.length); i++) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if (fullCommand[i].contains(TIMING_INDICATOR)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    flip \u003d true;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if(fullCommand[i].charAt(0)\u003d\u003d\u0027/\u0027){"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        timing.append(fullCommand[i]).append(SPACE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }else{"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        String[] temp \u003d fullCommand[i].split(TIMING_INDICATOR);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        action.append(temp[0]).append(SPACE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        timing.append(temp[1]).append(SPACE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    if (flip) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        timing.append(fullCommand[i]).append(SPACE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                        action.append(fullCommand[i]).append(SPACE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            timing \u003d new StringBuilder(timing.toString().replace(TIMING_INDICATOR, SPACE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            timing \u003d new StringBuilder(timing.toString().trim());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            validateTiming(timing.toString());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            timing \u003d new StringBuilder(convertToDateFormat(timing.toString()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        action \u003d new StringBuilder(action.toString().trim());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(action.toString().contains(\"~\")){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDukeException(AVOID_DELIMITER);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else if(action.length() \u003d\u003d 0){"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDukeException(\"\\t OOPS!!! The description of a \" + fullCommand[0] +"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    \" cannot be empty.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] temp2 \u003d new String[2];"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        temp2[0] \u003d action.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        temp2[1] \u003d timing.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return temp2;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method formats timing with an Integer value smaller\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * than 10 to be printed with a \"0\" at the front\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param timing This is the timing"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return String that represents two digits."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static String formatTiming(Integer timing){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String formattedTiming;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(timing\u003c10){"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            formattedTiming\u003d \"0\" + timing.toString();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            formattedTiming\u003d timing.toString();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return formattedTiming;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks is User indicated timing and its indicator, \"/\". \u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param inCommand This is the full command entered by User. \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDukeException if the command entered is invalid or illegal."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkTimingIndicator(String inCommand) throws IllegalDukeException{"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        if(inCommand.contains(TIMING_INDICATOR)){"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String check \u003d inCommand + EMPTY_TIMING_CHECKER;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            String[] tempCommand \u003d check.split(TIMING_INDICATOR);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if(tempCommand[1].equals(EMPTY_TIMING_CHECKER)){"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalDukeException(INDICATE_TIMING);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }else{"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDukeException(INDICATE_TIMING_INDICATOR);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method checks if User entered an Integer for the Task Number. \u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @param userCommand This is the full command that has been split into an array of Strings\u003cbr\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @throws IllegalDukeException if the command entered by User is invalid or illegal.\u003cbr\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static void checkInteger(String[] userCommand) throws IllegalDukeException{"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            if(!userCommand[1].equals(\"all\")){"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                int number \u003d parseInt(userCommand[1]) - 1;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(number\u003c\u003d-1){"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalDukeException(NON_POSITIVE_INTEGER);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            throw new IllegalDukeException(NOT_INTEGER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method ensures that User input is valid and legal.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @param inCommand This is the full input given by User.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @return String[] This is the validated array of Strings\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * to be used in the parse().\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @throws IllegalDukeException if command enter is invalid or illegal.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "   public static String[] validateCommand(String inCommand) throws IllegalDukeException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        inCommand\u003dinCommand.toLowerCase();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] userCommand \u003d parseCommand(inCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] out \u003d null;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (userCommand[0]) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"help\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"list\":"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(userCommand.length\u003e1){"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalDukeException(\"\\t Command \" + userCommand[0] + WRONG_USAGE_OF_COMMAND);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(userCommand.length\u003d\u003d1) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalDukeException(NO_TASK_NUMBER);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    checkInteger(userCommand);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"find\" :"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                if(userCommand.length\u003d\u003d1) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    throw new IllegalDukeException(\"\\t OOPS!!! The description of a \" + userCommand[0] +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                            \" cannot be empty.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }else if (userCommand[0].equals(\"deadline\") || userCommand[0].equals(\"event\")){"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                    checkTimingIndicator(inCommand);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                throw new IllegalDukeException(WRONG_INPUT);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        out \u003d userCommand;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return out;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method assigns each command enter by User to the suitable Command class.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method ensures that User input is validated before assigning to\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * designated Command class. Therefore it calls validateCommand() before\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * assigning commands through switch statement.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @param input is the full command entered by User.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @return outCommand This is the designated command based on user input.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @throws IllegalDukeException if command enter is invalid or illegal.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static Command parse(String input) throws IllegalDukeException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String[] fullCommand \u003d validateCommand(input);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        Command outCommand;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        switch (fullCommand[0]) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"bye\":"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outCommand \u003d new ByeCommand(fullCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"done\":"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outCommand \u003d new DoneCommand(fullCommand);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"todo\":"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"deadline\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"event\":"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outCommand \u003d new AddCommand(fullCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"delete\":"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outCommand \u003d new DeleteCommand(fullCommand);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            case \"find\" :"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outCommand \u003d new FindCommand(fullCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                outCommand \u003d new Command(fullCommand);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return outCommand;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 264
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is a sub class of the Task class in Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class has an extra value \u0027by\u0027 which stores"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * the timing the deadline is due by."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Deadline extends Task{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected String by\u003dnull;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Deadline(String description){"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void setBy(String inBy){"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.by\u003dinBy;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method prints the class in the following format:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * [D][X] description (by: timing)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return \"[D]\" + super.toString()  + \" (by:\" + this.by + \")\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toFile(){"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return String.format(\"D\" +STORAGE_DELIMITER + \"%s\" + STORAGE_DELIMITER + \"%s\", this.by, super.toFile());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 30
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is a sub class of the Task class in Duke."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This class has an extra value \u0027at\u0027 which stores"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * the timing the event will be occur."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected String at\u003dnull;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Event(String action){"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(action);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method sets the value of the parameter \"at\"."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * @param at This is the only argument."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void setAt(String at){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.at\u003dat;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method prints the class in the following format:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * [E][X] description (at: timing)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return \"[E]\" + super.toString()  + \" (at:\" + this.at + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toFile(){"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return String.format(\"E\" + STORAGE_DELIMITER + \"%s\" + STORAGE_DELIMITER+ \"%s\", this.at, super.toFile());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 33
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the parent class for all tasks in Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Each Task has the following value:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 1) Action : description of the Task"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 2) isDone : status of the task (Completed or Otherwise)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Each Task also has the following behaviours:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 1) toString(): prints Task to output stream"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * 2) toFile() : writes the Task details to data.txt"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    private String action;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public static final String STORAGE_DELIMITER\u003d \"~\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Task(String action){"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.action\u003daction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.isDone\u003dfalse;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method returns the value of isDone of the task."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return This returns the value of isDone in the form of"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *         [isDone]. Unicode value of Check Mark and Ballot"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *         is used to indicate true and false value of"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     *         isDone."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getStatus(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String temp\u003dthis.isDone ? \"DONE\" : \"PENDING\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return \"[Status: \" + temp + \"]\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public void done(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        this.isDone\u003dtrue;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method prints the Task."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return getStatus()+ \" \" + this.action;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * This method writes the Task details to data.txt."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * @return This returns the data to be written into"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     * data.txt in String format."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toFile(){"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        String done \u003d this.isDone ? \"Y\" : \"N\" ;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return String.format(\"%s\" + STORAGE_DELIMITER + \"%s\", done, this.action);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String getAction(){"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return this.action;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 56
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This is the sub class of the Task class in Duke"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * Each of this class follows the same values and"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * behaviours of a Task class."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "public class Todo extends Task{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public Todo(String action) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        super(action);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * This method prints the class in the following format:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " * [T][X] description"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    public String toFile(){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "        return String.format(\"T\" + STORAGE_DELIMITER + \"%s\", super.toFile());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "NizarMohd"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "NizarMohd": 24
    }
  }
]
