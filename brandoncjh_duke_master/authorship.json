[
  {
    "path": "build.gradle",
    "fileType": "gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00275.1.0\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "group \u0027seedu.duke\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "version \u00270.1.0\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "application {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Change this to your main class."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    mainClassName \u003d \"Duke\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "run {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    standardInput \u003d System.in"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "// https://github.com/nus-cs2113-AY1920S2/duke/blob/master/tutorials/gradleTutorial.md"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/*checkstyle {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    toolVersion \u003d \u00278.23\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}*/"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    archiveBaseName \u003d \"duke\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    archiveVersion \u003d \"0.1.4\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    archiveClassifier \u003d null"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    archiveAppendix \u003d null"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.5.0\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "test {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 24,
      "-": 19
    }
  },
  {
    "path": "src/main/java/Command.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.*;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class represents an individual command. The call for command execution is done through here. It also executes the relevant"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * operations on the {@link TaskList} containing the Tasks."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @see TaskList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Messages messageContainer \u003d new Messages();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String keyword;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String[] tokenizedInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String[] taskDescriptionRemarksFieldsInput;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String query;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //for list and bye"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Command(String keyword) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //for done, delete and find"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Command(String keyword, String queryInput) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.query \u003d queryInput;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //for todo, event and deadline"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Command(String keyword, String[] tokenizedInput, String[] processedUserInput) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.keyword \u003d keyword;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.tokenizedInput \u003d tokenizedInput;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.taskDescriptionRemarksFieldsInput \u003d processedUserInput;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method parses the keyword attribute of the {@link Command} object, and carries out the operation corresponding to the keyword on a {@link TaskList} list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * If any exception is encountered during the operation, they will be thrown and caught by the exception handler"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * in the main class ({@link Duke})"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param taskListInput         the list of tasks"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param uiInput           for displaying Ui elements"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws MissingParameterException"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NumberFieldException an exception thrown in DONE and DELETE command operations; when the task number given is not a number, or outside the range of existing tasks"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoRemarkException an exception thrown in EVENT and DEADLINE command operations; when the new task does not contain a remarks field"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IllegalKeywordException an exception thrown when the command keyword is not recognized as a valid command"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoDescriptionException an exception thrown in TODO, EVENT and DEADLINE command operations; when the new task does not contain a description field"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see NumberFieldException"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void execute(TaskList taskListInput, Ui uiInput) throws MissingParameterException,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            NumberFieldException, NoRemarkException, IllegalKeywordException, NoDescriptionException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        switch (keyword.toLowerCase()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (BYE_COMMAND):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (LIST_COMMAND):"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            printTaskList(taskListInput, uiInput);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (DONE_COMMAND):"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            updateTaskDone(taskListInput, uiInput, query);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (DELETE_COMMAND):"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            deleteTask(taskListInput, uiInput, query);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (FIND_COMMAND):"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            findTasksByKeyword(taskListInput, uiInput, query);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            insertNewTask(taskListInput, uiInput, tokenizedInput);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method prints out the {@link Task} objects that are currently existing in the given {@link TaskList} list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * The list includes the type ({@link Todo}, {@link Event}, {@link Deadline}) of each Task and the completion status"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * of each task. If there are no tasks in the TaskList, an empty list message is printed instead."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param listInput         the list of Tasks"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param uiInput           for displaying Ui elements"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Todo"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Event"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Deadline"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void printTaskList(TaskList listInput, Ui uiInput) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String taskListPrintOutput \u003d \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //if list empty, inform user and await next command"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (listInput.getTaskCount() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            uiInput.displayMessage(EMPTY_LIST_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //if list non-empty, print out all existing tasks"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (int i \u003d 0; i \u003c listInput.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String currentTaskText \u003d \"\\t\" + Integer.toString(i + 1) + \".\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    + listInput.getTaskList().get(i).toString() + LS;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskListPrintOutput +\u003d currentTaskText;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        uiInput.displayMessage(taskListPrintOutput);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method marks a {@link Task} object (denoted by task number) in the {@link TaskList} list as \"done\"."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * If the task number given is not a valid number or falls outside the range of existing tasks, an error message will be shown stating that the number chosen is out of range"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param listInput         the list of tasks"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param taskNumberInput   the task number of the task to be marked as done"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param uiInput           for displaying Ui elements"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NumberFieldException the exception thrown when the task number given is not a number, or outside the range of existing tasks"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see NumberFieldException"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void updateTaskDone(TaskList listInput, Ui uiInput, String taskNumberInput) throws NumberFieldException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        int queryNumber;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            queryNumber \u003d Integer.parseInt(taskNumberInput);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //throw NumberFieldException if taskNumber is a string eg. \"remove foo\" OR whitespaces only"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new NumberFieldException(INVALID_TASK_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        boolean isOutOfRange \u003d queryNumber \u003c 1 || queryNumber \u003e listInput.getTaskCount();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //handle case where user inputs non-existing task number to mark as done"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (isOutOfRange){"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            uiInput.displayMessage(INVALID_TASK_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //handle case where user tries to mark as done an already completed task"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        boolean isTaskAlreadyDone \u003d listInput.getTaskDoneStatus(queryNumber-1);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (isTaskAlreadyDone) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            uiInput.displayMessage(TASK_ALREADY_COMPLETED_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        listInput.markTaskAsDone(queryNumber-DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String taskDoneMessage \u003d messageContainer.getTaskDoneMessage(queryNumber, listInput);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        uiInput.displayMessage(taskDoneMessage);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    //TODO"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method constructs a new {@link Task} from the attributes of the {@link Command} object, and inserts it into a given {@link TaskList} list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * If the task number given is not a valid number or falls outside the range of existing tasks, an error message will be shown stating that the number chosen is out of range"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param listInput         the list of Tasks"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param uiInput           for displaying Ui elements"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws MissingParameterException"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NumberFieldException the exception thrown when the task number given is not a number, or outside the range of existing tasks"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoRemarkException"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IllegalKeywordException"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoDescriptionException"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see NumberFieldException"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private void insertNewTask(TaskList listInput, Ui uiInput, String[] tokenizedInput) throws"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    IllegalKeywordException, NoDescriptionException, NoRemarkException {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Task newTask;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        switch (tokenizedInput[0]) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (TODO_COMMAND):"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            newTask \u003d new Todo(taskDescriptionRemarksFieldsInput[0]);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (DEADLINE_COMMAND):"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            newTask \u003d new Deadline(taskDescriptionRemarksFieldsInput[0], taskDescriptionRemarksFieldsInput[1]);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (EVENT_COMMAND):"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            newTask \u003d new Event(taskDescriptionRemarksFieldsInput[0], taskDescriptionRemarksFieldsInput[1]);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IllegalKeywordException(INVALID_COMMAND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        listInput.addTask(newTask);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String taskAddedMessage \u003d messageContainer.getTaskAddedMessage(newTask, listInput);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        uiInput.displayMessage(taskAddedMessage);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method deletes a {@link Task} object (denoted by task number) in the {@link TaskList} list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * If the task number input given is not an integer or falls outside the range of existing tasks, an error message will be shown stating that the number input is invalid."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param listInput         the list of Tasks"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param uiInput           for displaying Ui elements"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param taskNumberInput   the task number of the task to be deleted"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NumberFieldException the exception thrown when the task number given is not an integer, or outside the range of existing tasks"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see NumberFieldException"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private void deleteTask(TaskList listInput, Ui uiInput, String taskNumberInput) throws NumberFieldException {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        int taskNumberForRemoval;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskNumberForRemoval \u003d Integer.parseInt(taskNumberInput);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new NumberFieldException(INVALID_TASK_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        boolean isOutOfBounds \u003d (taskNumberForRemoval \u003c\u003d 0 || taskNumberForRemoval \u003e listInput.getTaskCount());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (isOutOfBounds) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new NumberFieldException(INVALID_TASK_NUMBER_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Task removedTask \u003d listInput.deleteTask(Integer.valueOf(taskNumberForRemoval)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String taskRemovedMessage \u003d messageContainer.getTaskRemovedMessage(removedTask, listInput);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        uiInput.displayMessage(taskRemovedMessage);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private void findTasksByKeyword(TaskList listInput, Ui uiInput, String searchQuery) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        int resultNumber \u003d 1;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ArrayList\u003cTask\u003e searchResults \u003d listInput.findSearchResults(listInput.getTaskList(), searchQuery);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (Integer.valueOf(searchResults.size()).equals(Integer.valueOf(0))) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            uiInput.displayMessage(NO_MATCHING_SEARCH_RESULTS_MESSAGE);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String searchOutput \u003d \"\\tHere are the search results: \" + LS;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            for (Task result : searchResults) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                searchOutput +\u003d \"\\t\"+ Integer.toString(resultNumber) + \".\" + result.toString() + LS;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                resultNumber++;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            uiInput.displayMessage(searchOutput);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 254
    }
  },
  {
    "path": "src/main/java/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.SAVE_TASKLIST_TO_FILE_FAILURE_MESSAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.TASKLIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This is the main class that runs the entire Duke program."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Messages messageContainer \u003d new Messages();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This constructor initializes the other classes to be used in the Duke program."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * The constructor will also attempt to to load any existing local TaskList save at the location specified in the filePath."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param filePath the location of the file that contains the local save data of the TaskList (if any)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Storage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Storage#loadFileToTaskList"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Duke(String filePath) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.ui \u003d new Ui();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.storage \u003d new Storage(filePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            this.tasks \u003d new TaskList(storage.loadFileToTaskList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            this.tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Duke main \u003d new Duke(TASKLIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        main.runStartup();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        main.runLoopUntilExit();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        main.runExit();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * Displays the startup message."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui#sayIntro"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void runStartup() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ui.sayIntro();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method runs the main loop where where Duke obtains command from user and converts it into a {@link Command}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * object that executes the corresponding operation."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eThis loop continues running until it encounters the \"bye\" command. It will then exit the loop.\u003c/p\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui#getUserCommand"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Parser#parseCommand"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Command#execute"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void runLoopUntilExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Parser commandParser \u003d new Parser(tasks);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (commandParser.exitCommandNotEncountered()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                String userInputText \u003d ui.getUserCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                Command nextCommand \u003d commandParser.parseCommand(userInputText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                nextCommand.execute(tasks, ui);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (NoRemarkException"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    | IllegalKeywordException"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    | NoDescriptionException"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    | NumberFieldException"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    | MissingParameterException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                ui.displayMessage(e.getMessage());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method is used to exit Duke."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eOccurs when the \"bye\" command is issued. It saves the current task list and close the"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * scanner before saying goodbye\u003c/p\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Storage#saveTaskListToFile"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui#closeScanner"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui#sayGoodbye"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void runExit() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            storage.saveTaskListToFile(tasks);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            ui.displayMessage(SAVE_TASKLIST_TO_FILE_FAILURE_MESSAGE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ui.sayGoodbye();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 100,
      "-": 4
    }
  },
  {
    "path": "src/main/java/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import exceptions.*;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class parses the user input. It helps to process and convert input into a {@link Command} object."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final int MAX_SUBSTRING_FIELDS \u003d 2;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public boolean isExitCommandInvoked \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private TaskList taskList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private Messages messageContainer \u003d new Messages();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Parser(TaskList taskListInput) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.taskList \u003d taskListInput;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method attempts to validate the user input and construct the required {@link Command} based on the parameters."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eThe command keywords in the user input follow specified formats. If there are inconsistencies in the input,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * an exception will be thrown with an error message informing the user of the inconsistency and advice for proper usage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003c/p\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param userInput a String containing the processed command input provided by the user"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a Command object that can be used to execute the intended operation for the user"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NumberFieldException an exception thrown in DONE and DELETE command operations; when the task number given is not a number, or outside the range of existing tasks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoRemarkException an exception thrown in EVENT and DEADLINE command operations; when the new task does not contain a remarks field"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IllegalKeywordException an exception thrown when the command keyword is not recognized as a valid command"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoDescriptionException an exception thrown in TODO, EVENT and DEADLINE command operations; when the new task does not contain a description field"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see TaskList"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see NumberFieldException"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Command parseCommand(String userInput) throws NoRemarkException, IllegalKeywordException,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            NoDescriptionException, MissingParameterException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Command newCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String[] tokenizedInput \u003d userInput.split(WHITESPACE_DELIMITER);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String commandKeyword \u003d tokenizedInput[0];"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        switch (commandKeyword.toLowerCase()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (BYE_COMMAND):"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (LIST_COMMAND):"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (commandKeyword.equals(BYE_COMMAND)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                isExitCommandInvoked \u003d true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            newCommand \u003d new Command(commandKeyword);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case(DONE_COMMAND):"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case(DELETE_COMMAND):"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case(FIND_COMMAND):"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newCommand \u003d new Command(commandKeyword, tokenizedInput[1]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                //throw MissingParameterException if any of the commands given without additional par"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new MissingParameterException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                        messageContainer.executeCommandInsufficientParameterErrorMessage(commandKeyword));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (TODO_COMMAND):"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (EVENT_COMMAND):"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        case (DEADLINE_COMMAND):"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String[] separatedDescriptionRemarksInput \u003d splitUserInput(userInput);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            newCommand \u003d new Command(commandKeyword, tokenizedInput, separatedDescriptionRemarksInput);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IllegalKeywordException(INVALID_COMMAND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return newCommand;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method attempts to split the user input into substrings containing the description and remarks (if applicable) of the Task."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eIt is only applicable for the TODO, COMMAND and DEADLINE commands.\u003c/p\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param originalInput"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a String array of size 2, containing the description and remarks for creation of a Task. If the Task is a"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws MissingParameterException this exception occurs if either the description or remarks field is not detected (ie. the amount of substrings is lesser than expected)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoDescriptionException this exception occurs if the description field (the section before the \" /\") of the Task is empty"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws NoRemarkException this exception occurs if the remarks field (the section after the \" /\") of the Task is empty"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IllegalKeywordException this exception occurs if the command keyword in the input is not TODO/EVENT/DEADLINE"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String[] splitUserInput(String originalInput) throws MissingParameterException,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            NoDescriptionException, NoRemarkException, IllegalKeywordException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String[] returnValue \u003d new String[MAX_SUBSTRING_FIELDS];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (originalInput.contains(REMARKS_DELIMITER)){"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String[] separatedSections \u003d originalInput.split(REMARKS_DELIMITER);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String commandWord \u003d separatedSections[0].split(WHITESPACE_DELIMITER, 2)[0];"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //todo should not have a remark section"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (commandWord.toLowerCase().equals(TODO_COMMAND)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new IllegalKeywordException(TODO_HAS_REMARK_SECTION_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (Integer.valueOf(separatedSections.length).equals(Integer.valueOf(1))){"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new MissingParameterException(executeCommandInsufficientParameterErrorMessage(commandWord));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            // get description part of userInput without the command word"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            try{"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                returnValue[0] \u003d separatedSections[0].split(WHITESPACE_DELIMITER, 2)[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } catch (ArrayIndexOutOfBoundsException e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new MissingParameterException(messageContainer.executeCommandInsufficientParameterErrorMessage(commandWord));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (returnValue[0].trim().length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new NoDescriptionException(messageContainer.addTaskEmptyDescriptionErrorMessage(commandWord));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            // get additional remark part of userInput"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            returnValue[1] \u003d separatedSections[1];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isRemarksEmpty \u003d ((commandWord.toLowerCase().equals(EVENT_COMMAND)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    || commandWord.toLowerCase().equals(DEADLINE_COMMAND))  \u0026\u0026 returnValue[1].trim().length() \u003d\u003d 0);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isRemarksEmpty){"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new NoRemarkException(messageContainer.addTaskEmptyRemarksErrorMessage(commandWord));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return returnValue;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            // get description part of userInput without the command word"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String[] separatedSections \u003d originalInput.split(WHITESPACE_DELIMITER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String commandWord \u003d separatedSections[0].split(WHITESPACE_DELIMITER, 2)[0];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //only the keyword input"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (Integer.valueOf(separatedSections.length).equals(Integer.valueOf(1))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new MissingParameterException(messageContainer.executeCommandInsufficientParameterErrorMessage(commandWord));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //similar to above, event and deadline should not be missing a description section"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (commandWord.toLowerCase().equals(EVENT_COMMAND) || commandWord.toLowerCase().equals(DEADLINE_COMMAND)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                throw new IllegalKeywordException(/*event or deadline should have remarks section msg*/messageContainer.splitInputEventOrDeadlineMissingRemarksErrorMessage(commandWord));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            returnValue[0] \u003d originalInput.trim().split(WHITESPACE_DELIMITER, 2)[1];"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            // remark column is null (for todo, it won\u0027t be used)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            returnValue[1] \u003d null;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            return returnValue;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public boolean exitCommandNotEncountered(){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return !this.isExitCommandInvoked;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 142
    }
  },
  {
    "path": "src/main/java/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.Deadline;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.Event;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.TASKLIST_SAVE_DIRECTORY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.TASKLIST_SAVE_FILEPATH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.TASKLIST_SAVE_PIPE_DELIMITER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class is used to load and save the data of Tasks in the {@link TaskList} object to a local .txt file."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Storage(String filePathInput) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.filePath \u003d filePathInput;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method loads the saved data from the local save file before returning a {@link TaskList}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eIf there is no saved data present, this will throw a {@link FileNotFoundException} which"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * creates an empty TaskList. Else, it will load the saved tasks to a TaskList \u003c/p\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return an ArrayList\u003cTask\u003e containing the tasks. If there is no existing save file, an empty ArrayList is returned instead."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws FileNotFoundException this exception occurs if no local save file is found. Handled by the Duke class which creates a new empty ArrayList\u003cTask\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public ArrayList\u003cTask\u003e loadFileToTaskList() throws FileNotFoundException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        File f \u003d new File(this.filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (!f.exists()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            File newDirectory \u003d new File(TASKLIST_SAVE_DIRECTORY);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            boolean isNewDirectoryCreated \u003d newDirectory.mkdir();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (isNewDirectoryCreated) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                File newFile \u003d new File(TASKLIST_SAVE_FILEPATH);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    newFile.createNewFile();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                } catch (IOException ex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                    System.out.println(\"Failed to create file in new directory\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                System.out.println(\"Failed to create directory\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new FileNotFoundException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ArrayList\u003cTask\u003e taskListToReturn \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        Scanner s \u003d new Scanner(f);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (s.hasNext()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //add task (each line) to ArrayList taskList"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //1. process each line first, construct new Todo/Event/Deadline object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String taskString \u003d s.nextLine();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            String[] tokenizedTaskString \u003d taskString.split(TASKLIST_SAVE_PIPE_DELIMITER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            Task newTaskToLoad;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            switch(tokenizedTaskString[0].toUpperCase()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            case (\"T\"):"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newTaskToLoad \u003d new Todo(tokenizedTaskString[2]);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            case (\"E\"):"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newTaskToLoad \u003d new Event(tokenizedTaskString[2], tokenizedTaskString[3]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            case (\"D\"):"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newTaskToLoad \u003d new Deadline(tokenizedTaskString[2], tokenizedTaskString[3]);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                //print invalid task loaded error message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            //if task was previously marked done already, make sure to mark it as done when loading to taskList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (tokenizedTaskString[1].equals(\"1\")) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newTaskToLoad.markAsDone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskListToReturn.add(newTaskToLoad);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return taskListToReturn;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method saves the data stored in the Tasks of the {@link TaskList} object input into the local save file itself."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param taskList      the \u003ccode\u003eArrayList\u003cTask\u003e\u003c/code\u003e of tasks"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @throws IOException  this exception occurs if the Task data was unable to be written to the local save file."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void saveTaskListToFile(TaskList taskList) throws IOException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        FileWriter fw;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fw \u003d new FileWriter(this.filePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            throw new IOException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //convert newTaskData to string format for storing in duke.txt"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String newTaskString;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (int i\u003d0; i \u003c taskList.getTaskCount(); i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            Task newTaskData \u003d taskList.getTaskList().get(i);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            if (newTaskData instanceof Todo) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newTaskString \u003d newTaskData.getTaskData()[0] + \" | \" + newTaskData.getTaskData()[1] + \" | \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                        + newTaskData.getTaskData()[2] + System.lineSeparator();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                newTaskString \u003d newTaskData.getTaskData()[0] + \" | \" + newTaskData.getTaskData()[1] + \" | \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                        + newTaskData.getTaskData()[2] + \" | \" + newTaskData.getTaskData()[3] + System.lineSeparator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            fw.write(newTaskString);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        fw.close();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 118
    }
  },
  {
    "path": "src/main/java/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.InputStream;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.io.PrintStream;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import common.Messages;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import static common.Messages.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class is the UI that allows the user to interact with Duke. It contains methods to take in user input and display messages."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private final Scanner in;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private final PrintStream out;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private final Messages messageContainer \u003d new Messages();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this(System.in, System.out);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Ui(InputStream in, PrintStream out) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.in \u003d new Scanner(in);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.out \u003d out;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method produces the introductory message on program startup."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void sayIntro(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        out.println(messageContainer.addCurlyBorders(START_MESSAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method produces the goodbye message before program terminates."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void sayGoodbye(){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        out.println(messageContainer.addCurlyBorders(FIRST_EXIT_MESSAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        out.println(SECOND_EXIT_MESSAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method obtains input from the user."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eIt runs a loop that continues running if the user provides an empty/whitespace command."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * It only breaks when the user provides a non-empty command\u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return the command provided by the user as a String."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getUserCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        out.print(USER_INPUT_ARROWHEAD_DISPLAY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        //silently consume all empty/whitespace lines"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        while (isInputEmpty(userInput)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            displayMessage(EMPTY_COMMAND_ERROR_MESSAGE);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            out.print(USER_INPUT_ARROWHEAD_DISPLAY);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            userInput \u003d in.nextLine();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return userInput;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This methods prints out the message input, enclosed within underscored borders, for user to view."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @param message the message to be printed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void displayMessage(String message) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        out.println(messageContainer.addUnderscoreBorders(message));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private boolean isInputEmpty(String rawInput) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return rawInput.trim().isEmpty();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 74
    }
  },
  {
    "path": "src/main/java/common/Messages.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package common;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import tasklist.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.Task;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class acts as a container for the error messages and strings that are used by the rest of the classes."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003eIt also holds some generalized methods that can be used to print messages, mainly for the classes involving Task manipulation.\u003c/p\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String UNDERSCORED_DIVIDER \u003d \"\\t____________________________________________________________\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private static final String CURLY_DIVIDER \u003d \"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /** Offset required to convert between 1-indexing and 0-indexing.  */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final int DISPLAYED_INDEX_OFFSET \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * A platform independent line separator."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String LS \u003d System.lineSeparator();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String SAVE_TASKLIST_TO_FILE_FAILURE_MESSAGE \u003d \"\\tError saving taskList to duke.txt\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String START_MESSAGE \u003d \"Hello! I\u0027m Duke\" + LS"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            + \"What can I do for you?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String FIRST_EXIT_MESSAGE \u003d \"Bye! Hope to see you again soon\" + LS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String SECOND_EXIT_MESSAGE \u003d \"********************CONNECTION TERMINATED********************\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String USER_INPUT_ARROWHEAD_DISPLAY \u003d \"\u003e\u003e\u003e\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String BYE_COMMAND \u003d \"bye\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String LIST_COMMAND \u003d \"list\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String DONE_COMMAND \u003d \"done\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String FIND_COMMAND \u003d \"find\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String DELETE_COMMAND \u003d \"delete\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TODO_COMMAND \u003d \"todo\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String DEADLINE_COMMAND \u003d \"deadline\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String EVENT_COMMAND \u003d \"event\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String WHITESPACE_DELIMITER \u003d \" \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String REMARKS_DELIMITER \u003d \" /\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TASKLIST_SAVE_DIRECTORY \u003d \"data\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TASKLIST_SAVE_FILEPATH \u003d \"data/duke.txt\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TASKLIST_SAVE_PIPE_DELIMITER \u003d \" \\\\| \";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String NO_MATCHING_SEARCH_RESULTS_MESSAGE \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            \"\\tNo tasks containing the search keyword were found.\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String EMPTY_COMMAND_ERROR_MESSAGE \u003d \"\\t\\u2639 !!ERROR!! Command cannot be whitespaces.\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String INVALID_TASK_NUMBER_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            \"\\t\\u2639 !!ERROR!! The task number you have provided is not valid.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String INVALID_COMMAND_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            \"\\t\\u2639 !!ERROR!! I\u0027m sorry, but I don\u0027t know what that means :-(\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String EMPTY_LIST_ERROR_MESSAGE \u003d \"\\tThe list is empty.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TASK_ALREADY_COMPLETED_ERROR_MESSAGE \u003d \"\\tThis task has already been marked completed.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TODO_HAS_REMARK_SECTION_ERROR_MESSAGE \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            \"\\t\\u2639 !!ERROR!! task command should not have a remarks section.\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String addUnderscoreBorders(String inputText) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return UNDERSCORED_DIVIDER + LS + inputText + LS + UNDERSCORED_DIVIDER;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String addCurlyBorders(String inputText) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return CURLY_DIVIDER + LS + inputText + LS + CURLY_DIVIDER;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String getTaskDoneMessage(int queryNumber, TaskList listInput) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\tGreat job! I\u0027ve marked this task as done:\" + LS + \"\\t\" + Integer.toString(queryNumber)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + \".[\" + listInput.getTaskStatusIcon(queryNumber - DISPLAYED_INDEX_OFFSET) + \"] \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + listInput.getTaskDescription(queryNumber - DISPLAYED_INDEX_OFFSET);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String getTaskAddedMessage(Task newTask, TaskList listInput) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\tGot it. I\u0027ve added this task:\" + LS + \"\\t\" + newTask.toString() + LS"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + \"\\tNow you have \" + listInput.getTaskCount() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String getTaskRemovedMessage(Task removedTask, TaskList listInput) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\tGot it. I\u0027ve removed this task: \\n\\t\" + removedTask.toString() + LS"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                + \"\\tNow you have \" + listInput.getTaskCount() + \" tasks in the list.\\n\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String addTaskEmptyDescriptionErrorMessage(String taskType) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\t\\u2639 !!ERROR!! The description of a \" + taskType + \" cannot be empty.\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String addTaskEmptyRemarksErrorMessage(String taskType) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\t\\u2639 !!ERROR!! The remarks section of a \" + taskType + \" cannot be empty.\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String executeCommandInsufficientParameterErrorMessage(String taskType) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\t\\u2639 !!ERROR!! \" + taskType + \" command is missing additional parameters.\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static String splitInputEventOrDeadlineMissingRemarksErrorMessage(String taskType) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"\\t\\u2639 !!ERROR!! \" + taskType + \" command should have a remarks section.\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 121
    }
  },
  {
    "path": "src/main/java/data/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class represents the DEADLINE subtype of Tasks that can be stored in Duke. It contains a description and a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final int DEADLINE_NUMBER_OF_FIELDS \u003d 4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String DEADLINE_NOTATION \u003d \"D\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method converts the data for a DEADLINE object into a String array for easy parsing and application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a String array consisting of the initial denoting the Task, its completion status and the description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void addIfContainsKeyword(ArrayList\u003cTask\u003e searchResults, String searchKeyword) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (this.getDescription().contains(searchKeyword) || this.getBy().contains(searchKeyword)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            searchResults.add(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String[] getTaskData(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String[] taskValues \u003d new String[DEADLINE_NUMBER_OF_FIELDS];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[0] \u003d DEADLINE_NOTATION;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (this.getIsDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskValues[1] \u003d TASK_DONE_NOTATION;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskValues[1] \u003d TASK_NOTDONE_NOTATION;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[2] \u003d this.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[3] \u003d this.getBy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return taskValues;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 52
    }
  },
  {
    "path": "src/main/java/data/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class represents the EVENT subtype of Tasks that can be stored in Duke. It contains a description and a deadline."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final int EVENT_NUMBER_OF_FIELDS \u003d 4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String EVENT_NOTATION \u003d \"E\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Event(String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getBy() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.by;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + by + \")\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method converts the data for an EVENT object into a String array for easy parsing and application."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a String array consisting of the initial denoting the Task, its completion status and the description"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void addIfContainsKeyword(ArrayList\u003cTask\u003e searchResults, String searchKeyword) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (this.getDescription().contains(searchKeyword) || this.getBy().contains(searchKeyword)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            searchResults.add(this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String[] getTaskData(){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String[] taskValues \u003d new String[EVENT_NUMBER_OF_FIELDS];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[0] \u003d EVENT_NOTATION;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (this.getIsDone()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskValues[1] \u003d TASK_DONE_NOTATION;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskValues[1] \u003d TASK_NOTDONE_NOTATION;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[2] \u003d this.getDescription();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[3] \u003d this.getBy();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return taskValues;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 52
    }
  },
  {
    "path": "src/main/java/data/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class is the superclass of all tasks that can be stored in Duke."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003eThis superclass is made abstract so the tasks stored in Duke will definitely be one of the subclasses of tasks\u003c/p\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public abstract class Task {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    protected final String TASK_DONE_NOTATION \u003d \"1\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    protected final String TASK_NOTDONE_NOTATION \u003d \"0\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return (this.isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getDescription(){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public boolean getIsDone(){"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.isDone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void markAsDone(){"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String toString(){"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This abstract method is overridden in the Task subclasses. It converts the data for Task objects into"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * a String array for easy parsing and application."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eThis data is used primarily by the Storage class when saving the task into the local save file.\u003c/p\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * \u003cp\u003eView the subclasses to see how the method is overridden.\u003c/p\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return the subclass will return its respective task information"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Todo"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Event"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @see Deadline"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public abstract String[] getTaskData();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public abstract void addIfContainsKeyword(ArrayList\u003cTask\u003e searchResults, String searchKeyword);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 58
    }
  },
  {
    "path": "src/main/java/data/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package data;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class represents the TODO subtype of Tasks that can be stored in Duke. It contains a description."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final int TODO_NUMBER_OF_FIELDS \u003d 3;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public static final String TODO_NOTATION \u003d \"T\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * This method converts the data for a TODO object into a String array for easy parsing and application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     * @return a String array consisting of the initial denoting the Task, its completion status and the description"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void addIfContainsKeyword(ArrayList\u003cTask\u003e searchResults, String searchKeyword) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (this.getDescription().contains(searchKeyword)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            searchResults.add(this);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String[] getTaskData(){"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        String[] taskValues \u003d new String[TODO_NUMBER_OF_FIELDS];"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[0] \u003d TODO_NOTATION;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        if (this.getIsDone()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskValues[1] \u003d TASK_DONE_NOTATION;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            taskValues[1] \u003d TASK_NOTDONE_NOTATION;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        taskValues[2] \u003d this.getDescription();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return taskValues;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 45
    }
  },
  {
    "path": "src/main/java/data/duke.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "T | 0 | abc"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 1
    }
  },
  {
    "path": "src/main/java/exceptions/IllegalKeywordException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This custom exception is thrown when the command keyword is not recognised."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class IllegalKeywordException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public IllegalKeywordException(String messageInput) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.message \u003d messageInput;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 17
    }
  },
  {
    "path": "src/main/java/exceptions/MissingParameterException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This custom exception is thrown when the user input is missing additional parameters (ie less substrings than expected)"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class MissingParameterException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public MissingParameterException(String messageInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.message \u003d messageInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 16
    }
  },
  {
    "path": "src/main/java/exceptions/NoDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This custom exception is thrown when the user input has a description field but it only contains whitespaces"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class NoDescriptionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public NoDescriptionException(String messageInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.message \u003d messageInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 16
    }
  },
  {
    "path": "src/main/java/exceptions/NoRemarkException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This custom exception is thrown when the user input has a remarks field but it only contains whitespaces"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class NoRemarkException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public NoRemarkException(String messageInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.message \u003d messageInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 16
    }
  },
  {
    "path": "src/main/java/exceptions/NumberFieldException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This custom exception is thrown when the user input for the task number is not an integer or out of range of the current existing tasks"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class NumberFieldException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private String message;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public NumberFieldException(String messageInput) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.message \u003d messageInput;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getMessage() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 16
    }
  },
  {
    "path": "src/main/java/tasklist/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "package tasklist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import data.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * This class is a list of {@link Task} objects. It acts as an abstract data type, various operations can be"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * conducted on the TaskList object like adding/removing Tasks or getting the total number of Tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e\u003c/p\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * It can also execute operations on individual Tasks; you can get or change the completion status of a Task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " * @see ArrayList"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e taskListFromSave) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.tasks \u003d taskListFromSave;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public int getTaskCount() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.tasks.size();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public boolean getTaskDoneStatus(int taskNumber) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.tasks.get(taskNumber).getIsDone();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void markTaskAsDone(int taskNumber) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.tasks.get(taskNumber).markAsDone();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getTaskDescription(int taskNumber) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.tasks.get(taskNumber).getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public String getTaskStatusIcon(int taskNumber) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.tasks.get(taskNumber).getStatusIcon();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public void addTask(Task taskToAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        this.tasks.add(taskToAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public Task deleteTask(int taskNumber) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return this.tasks.remove(taskNumber);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    public ArrayList\u003cTask\u003e findSearchResults(ArrayList\u003cTask\u003e taskListToSearch, String searchKeyword) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        ArrayList\u003cTask\u003e matchingResults \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        for (Task task : taskListToSearch) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "            task.addIfContainsKeyword(matchingResults, searchKeyword);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "        return matchingResults;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 65
    }
  },
  {
    "path": "text-ui-test/EXPECTED.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Hello! I\u0027m Duke"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "What can I do for you?"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! Command cannot be whitespaces."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tThe list is empty."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tInvalid task number."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! The description of a todo cannot be empty."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! I\u0027m sorry, but I don\u0027t know what that means :-("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! event command is missing additional parameters."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! event command is missing additional parameters."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! The remarks section of a event cannot be empty."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! event command is missing additional parameters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t[T][✘] abc"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tNow you have 1 tasks in the list."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t[E][✘] def (at: 123)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tNow you have 2 tasks in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t[D][✘] ghi (by: 456)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGot it. I\u0027ve added this task: "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t[E][✘] jkl (at: )"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tNow you have 4 tasks in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t1.[T][✘] abc"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t2.[E][✘] def (at: 123)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t3.[D][✘] ghi (by: 456)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t4.[E][✘] jkl (at: )"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGreat job! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t1.[✓] abc"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tThis task has already been marked completed."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! The task number you have provided is not valid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! The remove command is missing additional parameters."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! The remove command is missing additional parameters."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t☹ !!ERROR!! The task number you have provided is not valid."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGot it. I\u0027ve removed this task: "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t[T][✓] abc"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tNow you have 3 tasks in the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t1.[E][✘] def (at: 123)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t2.[D][✘] ghi (by: 456)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t3.[E][✘] jkl (at: )"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tGreat job! I\u0027ve marked this task as done:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t2.[✓] ghi"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\tThis task has already been marked completed."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e\t____________________________________________________________"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t1.[E][✘] def (at: 123)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t2.[D][✓] ghi (by: 456)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t3.[E][✘] jkl (at: )"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\t____________________________________________________________"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "\u003e\u003e\u003e~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "Bye! Hope to see you again soon"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "********************CONNECTION TERMINATED********************"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 115
    }
  },
  {
    "path": "text-ui-test/input.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "                      "
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "list"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "todo"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "blah"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "event /                                    "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "event /"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "event fail1 /               "
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "event fail2 /"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "todo abc"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "event def /123"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "deadline ghi /456"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "event jkl"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "list"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "done 1"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "remove foo"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "remove"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "remove"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "remove 999"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "remove 1"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "list"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "done 2"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "list"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "bye"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "(note: 2 is whitespaces,  7\u00269 is event with whitespace remarks)"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 29
    }
  },
  {
    "path": "text-ui-test/runtest.bat",
    "fileType": "bat",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "@ECHO OFF"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "REM create bin directory if it doesn\u0027t exist"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "if not exist ..\\bin mkdir ..\\bin"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "REM delete output from previous run"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "del ACTUAL.TXT"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "REM compile the code into the bin folder"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "javac  -cp ..\\src -Xlint:none -d ..\\bin ..\\src\\main\\java\\data\\Duke.java ..\\src\\main\\java\\data\\Deadline.java ..\\src\\main\\java\\data\\Event.java ..\\src\\main\\java\\data\\Todo.java ..\\src\\main\\java\\data\\Task.java ..\\src\\main\\java\\data\\IllegalKeywordException.java ..\\src\\main\\java\\data\\NoDescriptionException.java ..\\src\\main\\java\\data\\NoRemarkException.java ..\\src\\main\\java\\data\\NumberFieldException.java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "IF ERRORLEVEL 1 ("
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    echo ********** BUILD FAILURE **********"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "    exit /b 1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "REM no error here, errorlevel \u003d\u003d 0"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "java -Dfile.encoding\u003dUTF8 -classpath ..\\bin data.Duke \u003c input.txt \u003e ACTUAL.TXT"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "REM compare the output to the expected output"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "FC ACTUAL.TXT EXPECTED.TXT"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "brandoncjh"
        },
        "content": "pause"
      }
    ],
    "authorContributionMap": {
      "brandoncjh": 23
    }
  }
]
