[
  {
    "path": "README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Setting up"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "**Prerequisites**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* JDK 11"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Recommended: IntelliJ IDE"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Fork this repo to your GitHub account and clone the fork to your computer"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "**Importing the project into IntelliJ**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "1. Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "1. Set up the correct JDK version."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `Configure` \u003e `Structure for new Projects` (in older versions of Intellij:`Configure` \u003e `Project Defaults` \u003e `Project Structure`)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "   * If JDK 11 is listed in the drop down, select it. If it is not, click `New...` and select the directory where you installed JDK 11."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "   * Click `OK`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Import Project`."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "1. Locate the project directory and click `OK`."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "1. Select `Create project from existing sources` and click `Next`."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "1. Rename the project if you want. Click `Next`."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure that your src folder is checked. Keep clicking `Next`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. Click `Finish`."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# Tutorials "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "duke.Duke Increment | Tutorial"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "---------------|---------------"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "`A-Gradle` | [Gradle Tutorial](tutorials/gradleTutorial.md)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "`A-TextUiTesting` | [Text UI Testing Tutorial](tutorials/textUiTestingTutorial.md)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`Level-10` | JavaFX tutorials:\u003cbr\u003e→ [Part 1: Introduction to JavaFX][fx1]\u003cbr\u003e→ [Part 2: Creating a GUI for duke.Duke][fx2]\u003cbr\u003e→ [Part 3: Interacting with the user][fx3]\u003cbr\u003e→ [Part 4: Introduction to FXML][fx4]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[fx1]: \u003ctutorials/javaFxTutorialPart1.md\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "[fx2]: \u003ctutorials/javaFxTutorialPart2.md\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[fx3]: \u003ctutorials/javaFxTutorialPart3.md\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[fx4]: \u003ctutorials/javaFxTutorialPart4.md\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "# Feedback, Bug Reports"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* If you have feedback or bug reports, please post in [se-edu/duke issue tracker](https://github.com/se-edu/duke/issues)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* We welcome pull requests too."
      }
    ],
    "authorContributionMap": {
      "zi-hui": 2,
      "-": 37
    }
  },
  {
    "path": "docs/README.md",
    "fileType": "md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "## Features "
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### Add a Task"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "User can add tasks like Todo, Event, Deadline with their descriptions and date/time if applicable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### Delete a Task"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "User can delete the tasks by providing task number."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### Mark Task as completed"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "User can indicate tasks as done whenever they complete the task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### Find relevant Tasks"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "User can search for all Tasks that matches their input keyword."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### List all Tasks"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "User can view all the tasks and its status and description."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "## Usage"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `todo \u003ctask_description\u003e` - Adding a Todo task"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Adding a task of `todo` type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`todo read book` | Got it. I\u0027ve added this task: [T][✘] read book You now have 1 task(s) in the list."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `deadline \u003cdeadline_description\u003e /by \u003cdate\u003e` - Adding a Deadline Task"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Adding a task of `deadline` type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`deadline return book /by Feb 6th` | Got it. I\u0027ve added this task: [D][✘] return book (by: Feb 6th) You now have 1 task(s) in the list."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `event \u003cevent_description\u003e /at \u003cdate\u003e` - Adding a Event Task"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Adding a task of `event` type."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`event study MA1521 (at: Monday 2-4pm)` | Got it. I\u0027ve added this task: [E][✘] study MA1521 (at: Monday 2-4pm) You now have 1 task(s) in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `delete (item_number)` - Delete Specific Task"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Remove task by its index in the list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`delete 2` | Got it. I\u0027ve removed this task: [E][✘] study MA1521 (at: Monday 2-4pm) You now have 0 task(s) in the list."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `done (item_number)` - Mark Task as Done"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Mark task as completed by its index in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`done 1` |  Nice! I\u0027ve marked this task as done: [T][✓] read book"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `find \u003csearch_keyword\u003e` - Find Task with the Specified Keyword(s)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Search for tasks that are relevant to the search keyword by user."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`find book` | Here are the matching tasks in your list: 1.[T][✓] read book \u003cbr\u003e 2.[D][✓] return book (by: Feb 6th)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `list` - View all tasks in Duke"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Displays all task in the current list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage: `list`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`list` | Here are the duke.tasks in your list: 1. [T][✘] read book \u003cbr\u003e 2. [D][✘] return book (by: Feb 6th) \u003cbr\u003e 3. [E][✘] study MA1521 (at: Monday 2-4pm) \u003cbr\u003e "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "### `bye` - Exit the Program"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Terminate Duke."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "Example of usage | Expected outcome"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "-----------------|------------------"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "`bye` | Bye. Hope to see you again soon!"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zi-hui": 70,
      "-": 12
    }
  },
  {
    "path": "output.txt",
    "fileType": "txt",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "[T][✘] ework"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "[T][✘] frjkwf"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "[T][✘] jkdshew"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "[T][✘] read"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 4
    }
  },
  {
    "path": "src/main/java/duke/Duke.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.commands.ExecuteCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Task manager to manage tasks like Todos, Events and Deadlines."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Duke {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private Ui ui;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private Storage storage;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private TaskList tasks;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Ui, Storage and TaskList classes."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Duke() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ui \u003d new Ui();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        storage \u003d new Storage(\"output.txt\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            tasks \u003d new TaskList(storage.getData());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (FileNotFoundException err) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            ui.errorMessage(err.toString());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            tasks \u003d new TaskList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Starts and runs program."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void startDuke() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ui.greeting();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        boolean isExit \u003d false;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (!isExit) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String userData \u003d ui.readUserData();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                ExecuteCommand command \u003d Parser.parse(userData);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                command.execute(tasks, storage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                isExit \u003d command.toExit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            } catch (DukeException err) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                ui.errorMessage(err.toString());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        new Duke().startDuke();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 52
    }
  },
  {
    "path": "src/main/java/duke/Parser.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.commands.*;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.InvalidCommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Parser class to parse user inputs and identify user commands."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Processes user inputs and execute respective commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param userData String of user input."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ExecuteCommand object given by user."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws InvalidCommandException If command is invalid."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public static ExecuteCommand parse (String userData) throws InvalidCommandException {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String[] newData \u003d userData.split(\" \");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (newData[0].toLowerCase().equals(\"list\")) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (newData[0].toLowerCase().equals(\"done\")) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new DoneCommand(userData);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (newData[0].toLowerCase().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new DeadlineCommand(userData);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (newData[0].toLowerCase().equals(\"event\")) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new EventCommand(userData);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (newData[0].toLowerCase().equals(\"todo\")) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new TodoCommand(userData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if (newData[0].toLowerCase().equals(\"find\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new FindCommand(userData);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if(newData[0].toLowerCase().equals(\"delete\")){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new DeleteCommand(userData);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else if(newData[0].toLowerCase().equals(\"bye\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new InvalidCommandException(\"Invalid command.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 40
    }
  },
  {
    "path": "src/main/java/duke/Storage.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Storage class to get/load and store data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String homePath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param filePath String of filepath for stored data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Storage(String filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Gets the saved data from text file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return ArrayList Contains data from saved text file"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws FileNotFoundException If file from file path does not exists."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     public ArrayList\u003cTask\u003e getData() throws FileNotFoundException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Scanner scanner \u003d new Scanner(file);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        while (scanner.hasNext()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(\"testinggg\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String userData \u003d scanner.nextLine();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            char taskType \u003d userData.charAt(1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            char isDone \u003d userData.charAt(4);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            switch (taskType) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            case \u0027T\u0027:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Task todo \u003d new Todo(userData.substring(7));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                if (isDone \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    todo.updateIsDone();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                tasks.add(todo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            case \u0027E\u0027: {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] description \u003d userData.substring(7).split(\" \\\\(at: \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Task event \u003d new Event(description[0], description[1].substring(0, description[1].length() - 1));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                if (isDone \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    event.updateIsDone();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                tasks.add(event);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            case \u0027D\u0027: {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String[] description \u003d userData.substring(7).split(\" \\\\(by: \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                Task deadline \u003d new Deadline(description[0], description[1].substring(0, description[1].length() - 1));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                if (isDone \u003d\u003d \u00271\u0027) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                    deadline.updateIsDone();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                tasks.add(deadline);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "         System.out.println(tasks);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return tasks;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Saves and stores the tasks in ArrayList into a text file."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks command."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void saveData(TaskList tasks) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            FileWriter fw \u003d new FileWriter(\"output.txt\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (Task task : tasks.getTaskArray()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                fw.write(task.toString() + System.lineSeparator());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            fw.close();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } catch (IOException err) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            err.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 94
    }
  },
  {
    "path": "src/main/java/duke/TaskList.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Deadline;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Event;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Task;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.tasks.Todo;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.EmptyListException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * TaskList class to handle all TaskList operations."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class TaskList {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private ArrayList\u003cTask\u003e tasks;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for TaskList class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public TaskList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.tasks \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for existing task list."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks ArrayList consisting of all existing tasks."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public TaskList(ArrayList\u003cTask\u003e tasks) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.tasks \u003d tasks;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Get size of ArrayList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return size of ArrayList."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public int sizeOfList() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return tasks.size();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Get tasks of ArrayList."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return tasks of ArrayList."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ArrayList\u003cTask\u003e getTaskArray() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return this.tasks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Adds Todo into tasks ArrayList."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param taskToAdd String of task to add."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void todoTask(String taskToAdd) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Todo todo \u003d new Todo(taskToAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        tasks.add(todo);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + tasks.get(tasks.size() - 1) + System.lineSeparator()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"You now have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Finds tasks from tasks ArrayList."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param taskToFind String of task to find."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void findCommand(String taskToFind) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        ArrayList\u003cInteger\u003e resultsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        for (int i \u003d 1; i \u003c tasks.size() + 1; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (tasks.get(i-1).toString().contains(taskToFind)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                resultsList.add(i);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (resultsList.size() \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(\"Here are the matching tasks in your list: \");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (int i \u003d 0; i \u003c resultsList.size(); i++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                String index \u003d resultsList.get(i).toString();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                System.out.println(index + \".\" + tasks.get(resultsList.get(i) - 1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(\"Sorry! There are no tasks matching your search.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Adds Event into tasks ArrayList."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param eventToAdd String of event to add."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param at String of Date of event to be added."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void eventTask(String eventToAdd, String at){"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Event event \u003d new Event(eventToAdd, at);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        tasks.add(event);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + tasks.get(tasks.size() - 1) + System.lineSeparator()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"You now have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Adds Deadline into tasks ArrayList."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param deadlineToAdd String of deadline to add."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param by String of Date of deadline of task."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void deadlineTask(String deadlineToAdd, String by) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        Deadline deadline \u003d new Deadline(deadlineToAdd, by);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        tasks.add(deadline);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Got it. I\u0027ve added this task:\" + System.lineSeparator()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + tasks.get(tasks.size() - 1) + System.lineSeparator()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"You now have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Lists all tasks in tasks ArrayList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws EmptyListException If there are no existing tasks in ArrayList tasks."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void listCommand() throws EmptyListException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        int sizeOfList \u003d tasks.size();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (sizeOfList !\u003d 0) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            System.out.println(\"Here are the duke.tasks in your list:\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            for (int i \u003d 0; i \u003c sizeOfList ; i +\u003d 1) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                System.out.println(i + 1 + \". \" + tasks.get(i));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new EmptyListException(\"No tasks in the list.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Deletes tasks from ArrayList tasks."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param index Index of tasks to be deleted."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void deleteCommand(int index){"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Got it! I\u0027ve removed this task: \");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(tasks.get(index - 1));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        tasks.remove(index - 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println( \"You now have \" + tasks.size() + \" task(s) in the list.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Marks specified tasks as done."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param index Index  of task to be marked."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void doneCommand(int index){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        tasks.get(index - 1).updateIsDone();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Nice! I\u0027ve marked this task as done: \");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(tasks.get(index - 1));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 144
    }
  },
  {
    "path": "src/main/java/duke/Ui.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import java.util.Scanner;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Ui class for reading user input and displaying greeting message."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    Scanner scan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Ui class."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Instantiate new Scanner object when reading user inputs."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Ui() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.scan \u003d new Scanner(System.in);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Prints the greeting message of Duke."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void greeting() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        String logo \u003d \" ____        _        \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"|  _ \\\\ _   _| | _____ \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"| | | | | | | |/ / _ \\\\\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"| |_| | |_| |   \u003c  __/\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Hello from\\n\" + logo);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Hello! I\u0027m duke.Duke\\n\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"What can I do for you?\\n\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Reads user input from command line."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String of user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String readUserData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return (scan.nextLine());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void errorMessage(String err) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(err);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/DeadlineCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineTaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineDateException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to add Deadline tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class DeadlineCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Deadline Command."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param userData String of user input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public DeadlineCommand(String userData) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.userData \u003d userData;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and adds deadline tasks into TaskList object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Stores existing TaskList object into output file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws DeadlineTaskException If description of deadline tasks is missing."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws DeadlineDateException If date of deadline tasks is missing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws DeadlineTaskException, DeadlineDateException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (!userData.trim().toLowerCase().equals(\"deadline\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            int indexOfBy \u003d userData.indexOf(\"/by\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (indexOfBy \u003d\u003d -1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                throw new DeadlineDateException(\"Please specify a date by using \\\u0027/by\\\u0027!\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] newData \u003d userData.split(\" /by \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (newData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                throw new DeadlineDateException(\"Please specify a date after \\\u0027/by\\\u0027!\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] remove \u003d newData[0].split(\" \", 2);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            tasks.deadlineTask(remove[1], newData[1]);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new DeadlineTaskException(\"Add a task behind \u0027deadline\u0027, task cannot be left empty.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 48
    }
  },
  {
    "path": "src/main/java/duke/commands/DeleteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskNumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to delete task from tasks in TaskList."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class DeleteCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Delete Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param userData String of user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public DeleteCommand(String userData) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.userData \u003d userData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and deletes tasks in  the TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Stores existing TaskList object into output file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskNumberException If task number from user input does not exist in list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskDescriptionException If task number of task to be deleted is missing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws TaskNumberException, TaskDescriptionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (!userData.trim().toLowerCase().equals(\"delete\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] newData \u003d userData.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            int index \u003d Integer.parseInt(newData[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            int sizeOfList \u003d tasks.sizeOfList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (index \u003c\u003d sizeOfList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                tasks.deleteCommand(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                storage.saveData(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                throw new TaskNumberException(\"Task number does not exist in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new TaskDescriptionException(\"Add a task number after \\\u0027done\\\u0027 to mark task as done.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/DoneCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskDescriptionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskNumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to mark tasks as done."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class DoneCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Done Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param @param userData String of user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public DoneCommand(String userData) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.userData \u003d userData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and marks specified tasks in the TaskList object as done."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Stores existing TaskList object into output file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskNumberException If task number from user input does not exist in list."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskDescriptionException If task number of task to be marked is missing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws TaskNumberException, TaskDescriptionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (!userData.trim().toLowerCase().equals(\"done\")) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] newData \u003d userData.split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            int index \u003d Integer.parseInt(newData[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            int sizeOfList \u003d tasks.sizeOfList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (index \u003c\u003d sizeOfList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                tasks.doneCommand(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                storage.saveData(tasks);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                throw new TaskNumberException(\"Task number does not exist in the list.\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new TaskDescriptionException(\"Add a task number after \\\u0027done\\\u0027 to mark task as done.\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 47
    }
  },
  {
    "path": "src/main/java/duke/commands/EventCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskDescriptionException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.EventDateException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskNumberException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to add Event tasks."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class EventCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Event Command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param userData String of user input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public EventCommand(String userData) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.userData \u003d userData;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d false;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and adds Event tasks in TaskList object."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Stores existing TaskList object into output file."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskException If task description is missing."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws EventDateException If date of event tasks is missing."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws TaskException, EventDateException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (!userData.trim().toLowerCase().equals(\"event\")) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            int indexOfAt \u003d userData.indexOf(\"/at\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (indexOfAt \u003d\u003d -1) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                throw new EventDateException(\"Please specify a date for event by using \\\u0027at\\\u0027!\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] newData \u003d userData.split(\" /at \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            if (newData.length \u003d\u003d 1) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "                throw new EventDateException(\"Please specify a date after \\\u0027/at\\\u0027!\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] remove \u003d newData[0].split(\" \", 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            tasks.eventTask(remove[1], newData[1]);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new TaskException(\"Add a task behind \u0027event\u0027, task cannot be left empty.\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 50
    }
  },
  {
    "path": "src/main/java/duke/commands/ExecuteCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DukeException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Abstract class of all valid commands."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public abstract class ExecuteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected boolean toExit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected String userData;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and adds Event tasks in TaskList object."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Stores existing TaskList object into output file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws DukeException If user input contains invalid command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public abstract void execute(TaskList tasks, Storage storage) throws DukeException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return True if exit command is given by user."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public boolean toExit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return toExit;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 29
    }
  },
  {
    "path": "src/main/java/duke/commands/ExitCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to execute when Duke is terminated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class ExitCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor to set toExit of Duke to true."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public ExitCommand() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Display message when Duke is terminated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        System.out.println(\"Bye. Hope to see you again soon!\\n\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 27
    }
  },
  {
    "path": "src/main/java/duke/commands/FindCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to find tasks."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class FindCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Find Command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param userData String of user input."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public FindCommand(String userData) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.userData \u003d userData;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d false;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and adds Event tasks in TaskList object."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskException If task to search for is missing."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws TaskException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (!userData.trim().toLowerCase().equals(\"find\")) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] removeFind \u003d userData.split(\" \", 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            tasks.findCommand(removeFind[1]);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new TaskException(\"Add a word behind \u0027find\u0027 to search for relevant tasks.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 36
    }
  },
  {
    "path": "src/main/java/duke/commands/ListCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.EmptyListException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to list all tasks."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class ListCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Lists all tasks in TaskList object."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws EmptyListException If existing list is empty."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage ) throws EmptyListException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        tasks.listCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 23
    }
  },
  {
    "path": "src/main/java/duke/commands/TodoCommand.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.Storage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.TaskList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineDateException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.DeadlineTaskException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "import duke.exceptions.TaskException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Command to add Todo tasks."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class TodoCommand extends ExecuteCommand {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Todo Command."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param userData String of user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public TodoCommand(String userData) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.userData \u003d userData;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.toExit \u003d false;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Parse user input and adds todo tasks into TaskList object."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Stores existing TaskList object into output file."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param tasks TaskList class object that handles all ArrayList of Tasks commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param storage Storage class object that loads and saves data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @throws TaskException If description of todo tasks is missing."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void execute(TaskList tasks, Storage storage) throws TaskException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        if (!userData.trim().toLowerCase().equals(\"todo\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            String[] removeTodo \u003d userData.split(\" \", 2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            tasks.todoTask(removeTodo[1]);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            storage.saveData(tasks);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "            throw new TaskException(\"Add a task behind \u0027todo\u0027, task cannot be left empty.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 40
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DeadlineDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when \"/by\" date is missing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class DeadlineDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of DeadlineDateException class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public DeadlineDateException(String error) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DeadlineTaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when task description is missing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class DeadlineTaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of DeadlineTaskException class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public DeadlineTaskException(String error) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/DukeException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Parent class of all exceptions thrown."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class DukeException extends Exception{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 7
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EmptyListException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws Exception when task list is empty when user inputs \"list\" as command."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class EmptyListException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of EmptyListException class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public EmptyListException(String error) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/EventDateException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when \"/at\" date is missing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class EventDateException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of EventDateException class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public EventDateException(String error) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/InvalidCommandException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when invalid command is provided as user input."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class InvalidCommandException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of InvalidCommandException class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public InvalidCommandException(String error) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskDescriptionException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when task number is not specified."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class TaskDescriptionException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of TaskDescriptionException class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public TaskDescriptionException(String error) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 25
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when task description is missing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class TaskException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of TaskException class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public TaskException(String error) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 26
    }
  },
  {
    "path": "src/main/java/duke/exceptions/TaskNumberException.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Throws exception when index of task number is missing."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class TaskNumberException extends DukeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    private String error;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor of TaskNumberException class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param error String containing error message."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public TaskNumberException(String error) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.error \u003d error;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formatting of error message."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return error String to display error message."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return String.format(\"Error: %s\", this.error);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 25
    }
  },
  {
    "path": "src/main/java/duke/tasks/Deadline.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Class for Deadline task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Deadline extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected String by;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Deadline class."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param description String for description of deadline task."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param by String for date of deadline task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Deadline(String description, String by) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.by \u003d by;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.taskDescription \u003d \"deadline\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To display deadline task message to user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of deadline task, description and date."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 28
    }
  },
  {
    "path": "src/main/java/duke/tasks/Event.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Class for Event task."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Event extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected String at;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for Deadline class."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param description String for description of event task."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param at String for date of event task."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Event(String description, String at) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.at \u003d at;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.taskDescription \u003d \"event\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To display event task message to user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of event task, description and date."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"[E]\" + super.toString() + \" (at: \" + at + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 29
    }
  },
  {
    "path": "src/main/java/duke/tasks/Task.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Abstract class for Task."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Task {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected String description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected boolean isDone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    protected String taskDescription;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for abstract Task class."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param description String for description of task."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Task(String description) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.isDone \u003d false;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        taskDescription \u003d \"task\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To update and set isDone to true when task is marked done."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public void updateIsDone (){"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.isDone \u003d true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To indicate if task is done."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return Tick symbol if done else Cross not done."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String getStatusIcon() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return (isDone ? \"\\u2713\" : \"\\u2718\"); //return tick or X symbols"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Formats tasks to display task messages to user."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String containing status and description of tasks."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"[\" + getStatusIcon() + \"] \" + description;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 46
    }
  },
  {
    "path": "src/main/java/duke/tasks/Todo.java",
    "fileType": "java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "package duke.tasks;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " * Class for Todo."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zi-hui"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "public class Todo extends Task {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * Constructor for abstract Todo class."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @param description String for description of task."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public Todo(String description) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        super(description);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        this.taskDescription \u003d \"todo\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zi-hui"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * To display todo task message to user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     * @return String consisting of todo task and description."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "        return \"[T]\" + super.toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zi-hui"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zi-hui": 25
    }
  }
]
